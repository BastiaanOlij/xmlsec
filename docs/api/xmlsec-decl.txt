<MACRO>
<NAME>XMLSEC_BASE64_LINESIZE</NAME>
#define XMLSEC_BASE64_LINESIZE				64
</MACRO>
<FUNCTION>
<NAME>xmlSecBase64CtxCreate</NAME>
<RETURNS>xmlSecBase64CtxPtr  </RETURNS>
int encode,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBase64CtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBase64CtxPtr ctx,int encode,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBase64CtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxUpdate</NAME>
<RETURNS>int  </RETURNS>
xmlSecBase64CtxPtr ctx,const unsigned char *in,size_t inLen,unsigned char *out,size_t outLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxFinal</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBase64CtxPtr ctx,unsigned char *out,size_t outLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64Encode</NAME>
<RETURNS>xmlChar *</RETURNS>
const unsigned char *buf,size_t len,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64Decode</NAME>
<RETURNS>int 	</RETURNS>
const xmlChar* str,unsigned char *buf,size_t len
</FUNCTION>
<MACRO>
<NAME>XMLSEC_VERSION</NAME>
#define XMLSEC_VERSION			"0.1.0"
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_MAJOR</NAME>
#define XMLSEC_VERSION_MAJOR		0
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_MINOR</NAME>
#define XMLSEC_VERSION_MINOR		1
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_SUBMINOR</NAME>
#define XMLSEC_VERSION_SUBMINOR		0
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_INFO</NAME>
#define XMLSEC_VERSION_INFO		"1:0:1"
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_MALLOC_FAILED</NAME>
#define XMLSEC_ERRORS_R_MALLOC_FAILED		 1 	
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XMLSEC_FAILED</NAME>
#define XMLSEC_ERRORS_R_XMLSEC_FAILED		 2
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CRYPTO_FAILED</NAME>
#define XMLSEC_ERRORS_R_CRYPTO_FAILED		 3
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XML_FAILED</NAME>
#define XMLSEC_ERRORS_R_XML_FAILED		 4
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XSLT_FAILED</NAME>
#define XMLSEC_ERRORS_R_XSLT_FAILED		 5
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_IO_FAILED</NAME>
#define XMLSEC_ERRORS_R_IO_FAILED		 6
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM	 10
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM_DATA	 11
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM_OR_KEY</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM_OR_KEY 12
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY		 13
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_DATA	 14
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_SIZE</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_SIZE	 15
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_ORIGIN</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_ORIGIN	 16
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_KEY_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_KEY_NOT_FOUND		 17
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_SIZE</NAME>
#define XMLSEC_ERRORS_R_INVALID_SIZE		 18
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_DATA		 19
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TYPE</NAME>
#define XMLSEC_ERRORS_R_INVALID_TYPE		 21
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_USAGE</NAME>
#define XMLSEC_ERRORS_R_INVALID_USAGE		 22
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE	 	 23
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODESET</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODESET	 	 24
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE_CONTENT</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE_CONTENT	 25
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE_ATTRIBUTE</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE_ATTRIBUTE	 26
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_NODE_ALREADY_PRESENT</NAME>
#define XMLSEC_ERRORS_R_NODE_ALREADY_PRESENT	 27
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_SAME_DOCUMENT_REQUIRED</NAME>
#define XMLSEC_ERRORS_R_SAME_DOCUMENT_REQUIRED	 28
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_NODE_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_NODE_NOT_FOUND 	 	 29
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_MAX_RETRIEVALS_LEVEL</NAME>
#define XMLSEC_ERRORS_R_MAX_RETRIEVALS_LEVEL	 30
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_VERIFY_FAILED</NAME>
#define XMLSEC_ERRORS_R_CERT_VERIFY_FAILED	 41
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_CERT_NOT_FOUND		 42
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_REVOKED</NAME>
#define XMLSEC_ERRORS_R_CERT_REVOKED		 43
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_ISSUER_FAILED</NAME>
#define XMLSEC_ERRORS_R_CERT_ISSUER_FAILED	 44
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_NOT_YET_VALID</NAME>
#define XMLSEC_ERRORS_R_CERT_NOT_YET_VALID	 45
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_HAS_EXPIRED</NAME>
#define XMLSEC_ERRORS_R_CERT_HAS_EXPIRED	 46
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_DSIG_INVALID_REFERENCE</NAME>
#define XMLSEC_ERRORS_R_DSIG_INVALID_REFERENCE 	 51
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_STATUS</NAME>
#define XMLSEC_ERRORS_R_INVALID_STATUS		 52
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_DATA_NOT_MATCH</NAME>
#define XMLSEC_ERRORS_R_DATA_NOT_MATCH		 53
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_UNEXPECTED_NODE</NAME>
#define XMLSEC_ERRORS_R_UNEXPECTED_NODE	 	 54
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_URI_TYPE</NAME>
#define XMLSEC_ERRORS_R_INVALID_URI_TYPE 	 55
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_MAX_ENCKEY_LEVEL</NAME>
#define XMLSEC_ERRORS_R_MAX_ENCKEY_LEVEL	 56
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_ASSERTION</NAME>
#define XMLSEC_ERRORS_R_ASSERTION		 100
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_DISABLED</NAME>
#define XMLSEC_ERRORS_R_DISABLED		 101
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_NOT_IMPLEMENTED</NAME>
#define XMLSEC_ERRORS_R_NOT_IMPLEMENTED		 102
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_TRANSFORM_DISABLED</NAME>
#define XMLSEC_ERRORS_R_TRANSFORM_DISABLED	111
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_KEYDATA_DISABLED</NAME>
#define XMLSEC_ERRORS_R_KEYDATA_DISABLED	112
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_MAX_NUMBER</NAME>
#define XMLSEC_ERRORS_MAX_NUMBER		256
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecErrorsCallback</NAME>
<RETURNS>void </RETURNS>
const char* file, 
						         int line, 
				    			 const char* func,
							 const char* errorObject,
							 const char* errorSubject,
							 int reason, 
							 const char* msg
</USER_FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsInit</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsShutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsSetCallback</NAME>
<RETURNS>void  </RETURNS>
xmlSecErrorsCallback callback
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsDefaultCallback</NAME>
<RETURNS>void  </RETURNS>
const char* file,int line,const char* func,const char* errorObject,const char* errorSubject,int reason,const char* msg
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsGetCode</NAME>
<RETURNS>int  </RETURNS>
size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsGetMsg</NAME>
<RETURNS>const char *</RETURNS>
size_t pos
</FUNCTION>
<VARIABLE>
<NAME>xmlSecPrintErrorMessages</NAME>
extern int xmlSecPrintErrorMessages;
</VARIABLE>
<MACRO>
<NAME>XMLSEC_ERRORS_HERE</NAME>
#define XMLSEC_ERRORS_HERE			__FILE__,__LINE__,__FUNCTION__
</MACRO>
<MACRO>
<NAME>xmlSecErrorsSafeString</NAME>
#define xmlSecErrorsSafeString(str) \
	(((str) != NULL) ? ((char*)(str)) : (char*)"NULL")
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_NO_MESSAGE</NAME>
#define XMLSEC_ERRORS_NO_MESSAGE 		xmlSecErrorGetEmptyMessage()
</MACRO>
<FUNCTION>
<NAME>xmlSecErrorGetEmptyMessage</NAME>
<RETURNS>const char *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecError</NAME>
<RETURNS>void  </RETURNS>
const char* file,int line,const char* func,const char* errorObject,const char* errorSubject,int reason,const char* msg, ...
</FUNCTION>
<MACRO>
<NAME>xmlSecAssert</NAME>
#define xmlSecAssert( p ) \
	if(!( p ) ) { \
	    xmlSecError(XMLSEC_ERRORS_HERE, \
			NULL, \
			#p, \
			XMLSEC_ERRORS_R_ASSERTION, \
			XMLSEC_ERRORS_NO_MESSAGE); \
	    return; \
	} 
</MACRO>
<MACRO>
<NAME>xmlSecAssert2</NAME>
#define xmlSecAssert2( p, ret ) \
	if(!( p ) ) { \
	    xmlSecError(XMLSEC_ERRORS_HERE, \
			NULL, \
			#p, \
			XMLSEC_ERRORS_R_ASSERTION, \
			XMLSEC_ERRORS_NO_MESSAGE); \
	    return(ret); \
	} 
</MACRO>
<FUNCTION>
<NAME>xmlSecIOInit</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecIOShutdown</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecIOCleanupCallbacks</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecIORegisterDefaultCallbacks</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecIORegisterCallbacks</NAME>
<RETURNS>int  </RETURNS>
xmlInputMatchCallback matchFunc,xmlInputOpenCallback openFunc,xmlInputReadCallback readFunc,xmlInputCloseCallback closeFunc
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformInputURIId</NAME>
#define xmlSecTransformInputURIId \
	xmlSecTransformInputURIGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformInputURIGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformInputURIOpen</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const xmlChar* uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoNodeRead</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr keyInfoNode,xmlSecKeyPtr key,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoNodeWrite</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr keyInfoNode,xmlSecKeyPtr key,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<ENUM>
<NAME>xmlSecKeyInfoMode</NAME>
typedef enum {
    xmlSecKeyInfoModeRead = 0,
    xmlSecKeyInfoModeWrite
} xmlSecKeyInfoMode;
</ENUM>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</NAME>
#define XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND		0x00000001
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</NAME>
#define XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD		0x00000002
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</NAME>
#define XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN		0x00000004
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</NAME>
#define XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD	0x00000008
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</NAME>
#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF	0x00000010
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</NAME>
#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF	0x00000020
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</NAME>
#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD	0x00000100
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</NAME>
#define XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS		0x00000200
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</NAME>
#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT	0x00000400
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</NAME>
#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT	0x00000800
</MACRO>
<MACRO>
<NAME>XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</NAME>
#define XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION 0x00001000
</MACRO>
<STRUCT>
<NAME>xmlSecKeyInfoCtx</NAME>
struct xmlSecKeyInfoCtx {
    void*				userData;
    unsigned int			flags;
    unsigned int			flags2;
    xmlSecKeysMngrPtr			keysMngr;
    xmlSecKeyInfoMode			mode;
    xmlSecPtrList			enabledKeyData;
    int					base64LineSize;
        
    /* RetrievalMethod */
    xmlSecTransformCtx			retrievalMethodCtx;
    int 				maxRetrievalMethodLevel;


    /* EncryptedKey */
    xmlSecEncCtxPtr			encCtx;
    int					maxEncryptedKeyLevel; 

	    

    /* x509 certificates */
    time_t				certsVerificationTime;
    int					certsVerificationDepth;


    /* PGP */
    void*				pgpReserved;	/* TODO */
        
    /* internal data */
    int 				curRetrievalMethodLevel;
    int					curEncryptedKeyLevel;                
    xmlSecKeyReq			keyReq;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxCreate</NAME>
<RETURNS>xmlSecKeyInfoCtxPtr  </RETURNS>
xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx,xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxReset</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxCopyUserPref</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyInfoCtxPtr dst,xmlSecKeyInfoCtxPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxCreateEncCtx</NAME>
<RETURNS>int  </RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoCtxDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyInfoCtxPtr keyInfoCtx,FILE* output
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataNameId</NAME>
#define xmlSecKeyDataNameId 		xmlSecKeyDataNameGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataNameGetKlass</NAME>
<RETURNS>xmlSecKeyDataId  </RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataValueId</NAME>
#define xmlSecKeyDataValueId		xmlSecKeyDataValueGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataValueGetKlass</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataRetrievalMethodId</NAME>
#define xmlSecKeyDataRetrievalMethodId	xmlSecKeyDataRetrievalMethodGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataRetrievalMethodGetKlass</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataEncryptedKeyId</NAME>
#define xmlSecKeyDataEncryptedKeyId	xmlSecKeyDataEncryptedKeyGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataEncryptedKeyGetKlass</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecKeyUsage</NAME>
typedef unsigned int 			xmlSecKeyUsage;
</TYPEDEF>
<MACRO>
<NAME>xmlSecKeyUsageSign</NAME>
#define	xmlSecKeyUsageSign		0x0001
</MACRO>
<MACRO>
<NAME>xmlSecKeyUsageVerify</NAME>
#define	xmlSecKeyUsageVerify		0x0002
</MACRO>
<MACRO>
<NAME>xmlSecKeyUsageEncrypt</NAME>
#define	xmlSecKeyUsageEncrypt		0x0004
</MACRO>
<MACRO>
<NAME>xmlSecKeyUsageDecrypt</NAME>
#define	xmlSecKeyUsageDecrypt		0x0008
</MACRO>
<MACRO>
<NAME>xmlSecKeyUsageAny</NAME>
#define	xmlSecKeyUsageAny		0xFFFF
</MACRO>
<STRUCT>
<NAME>xmlSecKeyReq</NAME>
struct xmlSecKeyReq {
    xmlSecKeyDataId			keyId;
    xmlSecKeyDataType			keyType;
    xmlSecKeyUsage			keyUsage;
    size_t				keyBitsSize;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyReqInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyReqPtr keyReq
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReqFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyReqPtr keyReq
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReqReset</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyReqPtr keyReq
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReqCopy</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyReqPtr dst,xmlSecKeyReqPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReqMatchKey</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyReqPtr keyReq,xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReqMatchKeyValue</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyReqPtr keyReq,xmlSecKeyDataPtr value
</FUNCTION>
<STRUCT>
<NAME>xmlSecKey</NAME>
struct xmlSecKey {
    xmlChar*				name;
    xmlSecKeyDataPtr			value;
    xmlSecPtrListPtr			dataList;
    xmlSecKeyUsage			usage;
    
    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyCreate</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyEmpty</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDuplicate</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyCopy</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr keyDst,xmlSecKeyPtr keySrc
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyGetName</NAME>
<RETURNS>const xmlChar *</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeySetName</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,const xmlChar* name
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyGetType</NAME>
<RETURNS>xmlSecKeyDataType 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyGetValue</NAME>
<RETURNS>xmlSecKeyDataPtr 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeySetValue</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,xmlSecKeyDataPtr value
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyGetData</NAME>
<RETURNS>xmlSecKeyDataPtr  </RETURNS>
xmlSecKeyPtr key,xmlSecKeyDataId dataId
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyEnsureData</NAME>
<RETURNS>xmlSecKeyDataPtr  </RETURNS>
xmlSecKeyPtr key,xmlSecKeyDataId dataId
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyAdoptData</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyGenerate</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
const xmlChar* klass,const xmlChar* name,size_t sizeBits,xmlSecKeyDataType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyMatch</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,const xmlChar *name,xmlSecKeyReqPtr keyReq
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyIsValid</NAME>
#define xmlSecKeyIsValid(key) \
	((( key ) != NULL) && \
	 (( key )->value != NULL) && \
	 ((( key )->value->id) != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecKeyCheckId</NAME>
#define xmlSecKeyCheckId(key, keyId) \
 	(xmlSecKeyIsValid(( key )) && \
	((( key )->value->id) == ( keyId )))
</MACRO>
<MACRO>
<NAME>xmlSecKeyPtrListId</NAME>
#define xmlSecKeyPtrListId	xmlSecKeyPtrListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyPtrListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecKeyDataId</NAME>
typedef const struct _xmlSecKeyDataKlass 	xmlSecKeyDataKlass, *xmlSecKeyDataId; 
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecKeyDataStoreId</NAME>
typedef const struct _xmlSecKeyDataStoreKlass 	xmlSecKeyDataStoreKlass, *xmlSecKeyDataStoreId; 
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecKeyDataUsage</NAME>
typedef unsigned int				xmlSecKeyDataUsage;
</TYPEDEF>
<MACRO>
<NAME>xmlSecKeyDataUsageUnknown</NAME>
#define xmlSecKeyDataUsageUnknown			0x00000
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyInfoNodeRead</NAME>
#define xmlSecKeyDataUsageKeyInfoNodeRead		0x00001
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyInfoNodeWrite</NAME>
#define xmlSecKeyDataUsageKeyInfoNodeWrite		0x00002
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyValueNodeRead</NAME>
#define xmlSecKeyDataUsageKeyValueNodeRead		0x00004
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyValueNodeWrite</NAME>
#define xmlSecKeyDataUsageKeyValueNodeWrite		0x00008
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageRetrievalMethodNodeXml</NAME>
#define xmlSecKeyDataUsageRetrievalMethodNodeXml	0x00010
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageRetrievalMethodNodeBin</NAME>
#define xmlSecKeyDataUsageRetrievalMethodNodeBin	0x00020
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageAny</NAME>
#define xmlSecKeyDataUsageAny				0xFFFFF
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyInfoNode</NAME>
#define xmlSecKeyDataUsageKeyInfoNode			\
	(xmlSecKeyDataUsageKeyInfoNodeRead | xmlSecKeyDataUsageKeyInfoNodeWrite)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageKeyValueNode</NAME>
#define xmlSecKeyDataUsageKeyValueNode			\
	(xmlSecKeyDataUsageKeyValueNodeRead | xmlSecKeyDataUsageKeyValueNodeWrite)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataUsageRetrievalMethodNode</NAME>
#define xmlSecKeyDataUsageRetrievalMethodNode		\
	(xmlSecKeyDataUsageRetrievalMethodNodeXml | xmlSecKeyDataUsageRetrievalMethodNodeBin)
</MACRO>
<TYPEDEF>
<NAME>xmlSecKeyDataType</NAME>
typedef unsigned int				xmlSecKeyDataType;
</TYPEDEF>
<MACRO>
<NAME>xmlSecKeyDataTypeUnknown</NAME>
#define xmlSecKeyDataTypeUnknown			0x0000
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypeNone</NAME>
#define xmlSecKeyDataTypeNone				xmlSecKeyDataTypeUnknown
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypePublic</NAME>
#define xmlSecKeyDataTypePublic				0x0001
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypePrivate</NAME>
#define xmlSecKeyDataTypePrivate			0x0002
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypeSymmetric</NAME>
#define xmlSecKeyDataTypeSymmetric			0x0004
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypeSession</NAME>
#define xmlSecKeyDataTypeSession			0x0008
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypePermanent</NAME>
#define xmlSecKeyDataTypePermanent			0x0010
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataTypeAny</NAME>
#define xmlSecKeyDataTypeAny				0xFFFF
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataIdsGet</NAME>
<RETURNS>xmlSecPtrListPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdsInit</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdsShutdown</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdsRegisterDefault</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdsRegister</NAME>
<RETURNS>int  </RETURNS>
xmlSecKeyDataId id
</FUNCTION>
<STRUCT>
<NAME>xmlSecKeyData</NAME>
struct xmlSecKeyData {
    xmlSecKeyDataId			id;
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyDataCreate</NAME>
<RETURNS>xmlSecKeyDataPtr 	</RETURNS>
xmlSecKeyDataId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataDuplicate</NAME>
<RETURNS>xmlSecKeyDataPtr 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataGenerate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataPtr data,size_t sizeBits,xmlSecKeyDataType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataGetType</NAME>
<RETURNS>xmlSecKeyDataType 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataGetIdentifier</NAME>
<RETURNS>const xmlChar *</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataXmlRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,xmlNodePtr dataNode,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataXmlWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,xmlNodePtr dataNode,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,const unsigned char* buf,size_t bufSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,unsigned char** buf,size_t* bufSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataGetName</NAME>
#define xmlSecKeyDataGetName(data) \
	((xmlSecKeyDataIsValid((data))) ? \
	  xmlSecKeyDataKlassGetName((data)->id) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataIsValid</NAME>
#define xmlSecKeyDataIsValid(data) \
	((( data ) != NULL) && \
	 (( data )->id != NULL) && \
	 (( data )->id->klassSize >= sizeof(xmlSecKeyDataKlass)) && \
	 (( data )->id->objSize >= sizeof(xmlSecKeyData)) && \
	 (( data )->id->name != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataCheckId</NAME>
#define xmlSecKeyDataCheckId(data, dataId) \
 	(xmlSecKeyDataIsValid(( data )) && \
	((( data )->id) == ( dataId )))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataCheckUsage</NAME>
#define xmlSecKeyDataCheckUsage(data, usg) \
 	(xmlSecKeyDataIsValid(( data )) && \
	(((( data )->id->usage) & ( usg )) != 0))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataCheckSize</NAME>
#define xmlSecKeyDataCheckSize(data, size) \
 	(xmlSecKeyDataIsValid(( data )) && \
	 (( data )->id->objSize >= size))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataIdUnknown</NAME>
#define xmlSecKeyDataIdUnknown 			NULL
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecKeyDataInitMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataPtr data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataDuplicateMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataPtr dst,
								 xmlSecKeyDataPtr src
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataFinalizeMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecKeyDataPtr data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataXmlReadMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataId id,
								 xmlSecKeyPtr key,
								 xmlNodePtr node,
								 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataXmlWriteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataId id,
								 xmlSecKeyPtr key,
								 xmlNodePtr node,
								 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataBinReadMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataId id,
								 xmlSecKeyPtr key,
								 const unsigned char* buf,
								 size_t bufSize,
								 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataBinWriteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataId id,
								 xmlSecKeyPtr key,
								 unsigned char** buf,
								 size_t* bufSize,
								 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataGenerateMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataPtr data,
								 size_t sizeBits,
								 xmlSecKeyDataType type
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataGetTypeMethod</NAME>
<RETURNS>xmlSecKeyDataType </RETURNS>
xmlSecKeyDataPtr data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataGetSizeMethod</NAME>
<RETURNS>size_t </RETURNS>
xmlSecKeyDataPtr data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataGetIdentifierMethod</NAME>
<RETURNS>const xmlChar *</RETURNS>
xmlSecKeyDataPtr data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataDebugDumpMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecKeyDataPtr data,
								 FILE* output
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeyDataKlass</NAME>
struct xmlSecKeyDataKlass {
    size_t				klassSize;
    size_t				objSize;

    /* data */
    const xmlChar*			name;    
    xmlSecKeyDataUsage			usage;
    const xmlChar*			href;
    const xmlChar*			dataNodeName;
    const xmlChar*			dataNodeNs;
    
    /* constructors/destructor */
    xmlSecKeyDataInitMethod		initialize;
    xmlSecKeyDataDuplicateMethod	duplicate;
    xmlSecKeyDataFinalizeMethod		finalize;
    xmlSecKeyDataGenerateMethod		generate;
    
    /* get info */
    xmlSecKeyDataGetTypeMethod		getType;
    xmlSecKeyDataGetSizeMethod		getSize;
    xmlSecKeyDataGetIdentifierMethod	getIdentifier;

    /* read/write */
    xmlSecKeyDataXmlReadMethod		xmlRead;
    xmlSecKeyDataXmlWriteMethod		xmlWrite;
    xmlSecKeyDataBinReadMethod		binRead;
    xmlSecKeyDataBinWriteMethod		binWrite;

    /* debug */
    xmlSecKeyDataDebugDumpMethod	debugDump;
    xmlSecKeyDataDebugDumpMethod	debugXmlDump;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<MACRO>
<NAME>xmlSecKeyDataKlassGetName</NAME>
#define xmlSecKeyDataKlassGetName(klass) \
	(((klass)) ? ((klass)->name) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataListId</NAME>
#define xmlSecKeyDataListId	xmlSecKeyDataListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataIdListId</NAME>
#define xmlSecKeyDataIdListId	xmlSecKeyDataIdListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataIdListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdListFind</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,xmlSecKeyDataId dataId
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdListFindByNode</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
xmlSecPtrListPtr list,const xmlChar* nodeName,const xmlChar* nodeNs,xmlSecKeyDataUsage usage
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdListFindByHref</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
xmlSecPtrListPtr list,const xmlChar* href,xmlSecKeyDataUsage usage
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataIdListFindByName</NAME>
<RETURNS>xmlSecKeyDataId 	</RETURNS>
xmlSecPtrListPtr list,const xmlChar* name,xmlSecKeyDataUsage usage
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataBinarySize</NAME>
#define xmlSecKeyDataBinarySize	\
    (sizeof(xmlSecKeyData) + sizeof(xmlSecBuffer))
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueDuplicate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataPtr dst,xmlSecKeyDataPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueXmlRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,xmlNodePtr node,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueXmlWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,xmlNodePtr node,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueBinRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,const unsigned char* buf,size_t bufSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueBinWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataId id,xmlSecKeyPtr key,unsigned char** buf,size_t* bufSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataPtr data,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueGetBuffer</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
xmlSecKeyDataPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataBinaryValueSetBuffer</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataPtr data,const unsigned char* buf,size_t bufSize
</FUNCTION>
<STRUCT>
<NAME>xmlSecKeyDataStore</NAME>
struct xmlSecKeyDataStore {
    xmlSecKeyDataStoreId		id;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyDataStoreCreate</NAME>
<RETURNS>xmlSecKeyDataStorePtr  </RETURNS>
xmlSecKeyDataStoreId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataStoreDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyDataStorePtr store
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDataStoreFind</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataStorePtr store,xmlSecKeyPtr key,const xmlChar** params,size_t paramsSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyDataStoreGetName</NAME>
#define xmlSecKeyDataStoreGetName(store) \
    ((xmlSecKeyDataStoreIsValid((store))) ? \
      xmlSecKeyDataStoreKlassGetName((store)->id) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataStoreIsValid</NAME>
#define xmlSecKeyDataStoreIsValid(store) \
	((( store ) != NULL) && ((( store )->id) != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataStoreCheckId</NAME>
#define xmlSecKeyDataStoreCheckId(store, storeId) \
 	(xmlSecKeyDataStoreIsValid(( store )) && \
	((( store )->id) == ( storeId )))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataStoreCheckSize</NAME>
#define xmlSecKeyDataStoreCheckSize(store, size) \
 	(xmlSecKeyDataStoreIsValid(( store )) && \
	 (( store )->id->objSize >= size))
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataStoreIdUnknown</NAME>
#define xmlSecKeyDataStoreIdUnknown 			NULL
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecKeyDataStoreInitializeMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataStorePtr store
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataStoreFinalizeMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecKeyDataStorePtr store
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyDataStoreFindMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyDataStorePtr store,
								 xmlSecKeyPtr key,
								 const xmlChar** params,
								 size_t paramsSize,
								 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeyDataStoreKlass</NAME>
struct xmlSecKeyDataStoreKlass {
    size_t				klassSize;
    size_t				objSize;

    /* data */
    const xmlChar*			name;    
        
    /* constructors/destructor */
    xmlSecKeyDataStoreInitializeMethod	initialize;
    xmlSecKeyDataStoreFinalizeMethod	finalize;
    xmlSecKeyDataStoreFindMethod	find;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<MACRO>
<NAME>xmlSecKeyDataStoreKlassGetName</NAME>
#define xmlSecKeyDataStoreKlassGetName(klass) \
	(((klass)) ? ((klass)->name) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataStorePtrListId</NAME>
#define xmlSecKeyDataStorePtrListId	xmlSecKeyDataStorePtrListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecKeyDataStorePtrListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecSimpleKeysStoreId</NAME>
#define xmlSecSimpleKeysStoreId		xmlSecSimpleKeysStoreGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreGetKlass</NAME>
<RETURNS>xmlSecKeyDataStoreId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreAdoptKey</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataStorePtr store,xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreFindKey</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
xmlSecKeyDataStorePtr store,const xmlChar* name,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreLoad</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataStorePtr store,const char *uri,xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreSave</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyDataStorePtr store,const char *filename,xmlSecKeyDataType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCreate</NAME>
<RETURNS>xmlSecKeysMngrPtr  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeysMngrPtr mngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrFindKey</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrPtr mngr,xmlSecKeyPtr key,const xmlChar* name,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrFindKeyData</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrPtr mngr,xmlSecKeyDataStoreId storeId,xmlSecKeyPtr key,const xmlChar** params,size_t paramsSize,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrAdoptKeysStore</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrPtr mngr,xmlSecKeyDataStorePtr store
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrGetKeysStore</NAME>
<RETURNS>xmlSecKeyDataStorePtr 	</RETURNS>
xmlSecKeysMngrPtr mngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrAdoptDataStore</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrPtr mngr,xmlSecKeyDataStorePtr store
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrGetDataStore</NAME>
<RETURNS>xmlSecKeyDataStorePtr 	</RETURNS>
xmlSecKeysMngrPtr mngr,xmlSecKeyDataStoreId id
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecGetKeyCallback</NAME>
<RETURNS>xmlSecKeyPtr </RETURNS>
xmlNodePtr keyInfoNode,
							 xmlSecKeyInfoCtxPtr keyInfoCtx
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeysMngr</NAME>
struct xmlSecKeysMngr {	
    xmlSecKeyDataStorePtr	keysStore;	/* the keys storage */
    xmlSecPtrListPtr		storesList;	/* list of other key data storages */
    xmlSecGetKeyCallback	getKey;		/* the callback used to read <dsig:KeyInfo> node. */
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeysMngrGetKey</NAME>
<RETURNS>xmlSecKeyPtr  </RETURNS>
xmlNodePtr keyInfoNode,xmlSecKeyInfoCtxPtr keyInfoCtx
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecPtr</NAME>
typedef void*	xmlSecPtr;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecPtrListId</NAME>
typedef const struct _xmlSecPtrListKlass	xmlSecPtrListKlass, *xmlSecPtrListId;
</TYPEDEF>
<STRUCT>
<NAME>xmlSecPtrList</NAME>
struct xmlSecPtrList {
    xmlSecPtrListId		id;        

    xmlSecPtr*			data;
    size_t			use;
    size_t			max;
    xmlSecAllocMode 		allocMode;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecPtrListSetDefaultAllocMode</NAME>
<RETURNS>void 	</RETURNS>
xmlSecAllocMode defAllocMode,size_t defInitialSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,xmlSecPtrListId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecPtrListPtr list
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListCreate</NAME>
<RETURNS>xmlSecPtrListPtr 	</RETURNS>
xmlSecPtrListId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecPtrListPtr list
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListCopy</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr dst,xmlSecPtrListPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListDuplicate</NAME>
<RETURNS>xmlSecPtrListPtr 	</RETURNS>
xmlSecPtrListPtr list
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecPtrListPtr list
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListGetItem</NAME>
<RETURNS>xmlSecPtr 	</RETURNS>
xmlSecPtrListPtr list,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListAdd</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,xmlSecPtr item
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListSet</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,xmlSecPtr item,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListRemove</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecPtrListPtr list,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPtrListDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecPtrListPtr list,FILE* output
</FUNCTION>
<MACRO>
<NAME>xmlSecPtrListGetName</NAME>
#define xmlSecPtrListGetName(list) \
	(((list) != NULL) ? xmlSecPtrListKlassGetName((list)->id) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecPtrListIsValid</NAME>
#define xmlSecPtrListIsValid(list) \
	((( list ) != NULL) && ((( list )->id) != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecPtrListCheckId</NAME>
#define xmlSecPtrListCheckId(list, dataId) \
 	(xmlSecPtrListIsValid(( list )) && \
	((( list )->id) == ( dataId )))
</MACRO>
<MACRO>
<NAME>xmlSecPtrListIdUnknown</NAME>
#define xmlSecPtrListIdUnknown 			NULL
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecPtrDuplicateItemMethod</NAME>
<RETURNS>xmlSecPtr </RETURNS>
xmlSecPtr ptr
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecPtrDestroyItemMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecPtr ptr
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecPtrDebugDumpItemMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecPtr ptr,
								 FILE* output
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecPtrListKlass</NAME>
struct xmlSecPtrListKlass {
    const xmlChar*			name;
    xmlSecPtrDuplicateItemMethod	duplicateItem;
    xmlSecPtrDestroyItemMethod		destroyItem;
    xmlSecPtrDebugDumpItemMethod	debugDumpItem;
    xmlSecPtrDebugDumpItemMethod	debugXmlDumpItem;
};
</STRUCT>
<MACRO>
<NAME>xmlSecPtrListKlassGetName</NAME>
#define xmlSecPtrListKlassGetName(klass) \
	(((klass) != NULL) ? ((klass)->name) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecStaticObjectListId</NAME>
#define xmlSecStaticObjectListId \
	xmlSecStaticObjectListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecStaticObjectListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecStringListId</NAME>
#define xmlSecStringListId \
	xmlSecStringListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecStringListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformMemBufId</NAME>
#define xmlSecTransformMemBufId \
	xmlSecTransformMemBufGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformMemBufGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformMemBufGetBuffer</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<ENUM>
<NAME>xmlSecNodeSetType</NAME>
typedef enum {
    xmlSecNodeSetNormal = 0,
    xmlSecNodeSetInvert,
    xmlSecNodeSetTree,
    xmlSecNodeSetTreeWithoutComments, 
    xmlSecNodeSetTreeInvert,
    xmlSecNodeSetTreeWithoutCommentsInvert,
    xmlSecNodeSetList
} xmlSecNodeSetType;
</ENUM>
<ENUM>
<NAME>xmlSecNodeSetOp</NAME>
typedef enum {
    xmlSecNodeSetIntersection = 0,
    xmlSecNodeSetSubtraction,
    xmlSecNodeSetUnion
} xmlSecNodeSetOp;
</ENUM>
<STRUCT>
<NAME>xmlSecNodeSet</NAME>
struct xmlSecNodeSet {
    xmlNodeSetPtr	nodes;
    xmlDocPtr		doc;
    int			destroyDoc;
    xmlSecNodeSetType	type;
    xmlSecNodeSetOp	op;
    xmlSecNodeSetPtr	next;
    xmlSecNodeSetPtr	prev;
    xmlSecNodeSetPtr	children;
};
</STRUCT>
<USER_FUNCTION>
<NAME>xmlSecNodeSetWalkCallback</NAME>
<RETURNS>int </RETURNS>
xmlSecNodeSetPtr nset,
							 xmlNodePtr cur,
							 xmlNodePtr parent,
							 void* data
</USER_FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetCreate</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlDocPtr doc,xmlNodeSetPtr nodes,xmlSecNodeSetType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecNodeSetPtr nset
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDocDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecNodeSetPtr nset
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetContains</NAME>
<RETURNS>int 	</RETURNS>
xmlSecNodeSetPtr nset,xmlNodePtr node,xmlNodePtr parent
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetAdd</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetPtr newNSet,xmlSecNodeSetOp op
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetAddList</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetPtr newNSet,xmlSecNodeSetOp op
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetGetChildren</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlDocPtr doc,const xmlNodePtr parent,int withComments,int invert
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetWalk</NAME>
<RETURNS>int 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetWalkCallback walkFunc,void* data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDumpTextNodes</NAME>
<RETURNS>int 	</RETURNS>
xmlSecNodeSetPtr nset,xmlOutputBufferPtr out
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecNodeSetPtr nset,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureCreate</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlNodePtr signNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddSignedInfo</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddKeyInfo</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddObject</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signNode,const xmlChar *id,const xmlChar *mimeType,const xmlChar *encoding
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddC14NMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signedInfoNode,xmlSecTransformId c14nMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddSignMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signedInfoNode,xmlSecTransformId signMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddReference</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr signedInfoNode,const xmlChar *id,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReferenceAddDigestMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr refNode,xmlSecTransformId digestMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReferenceAddTransform</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr refNode,xmlSecTransformId transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjectAddSignProperties</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr objectNode,const xmlChar *id,const xmlChar *target
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjectAddManifest</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr objectNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecManifestAddReference</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr manifestNode,const xmlChar *id,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataCreate</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
const xmlChar *id,const xmlChar *type,const xmlChar *mimeType,const xmlChar *encoding
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode,xmlSecTransformId encMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddKeyInfo</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncProperties</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncProperty</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode,const xmlChar *id,const xmlChar *target
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddCipherValue</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddCipherReference</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode,const xmlChar *uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherReferenceAddTransform</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr encNode,xmlSecTransformId transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddKeyName</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddKeyValue</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddX509Data</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddRetrievalMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecRetrievalMethodAddTransform</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr retrMethod,xmlSecTransformId transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddEncryptedKey</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode,const xmlChar *id,const xmlChar *type,const xmlChar *recipient
</FUNCTION>
<FUNCTION>
<NAME>xmlSecHmacAddOutputLength</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,size_t bitsLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncRsaOaepAddParam</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecXsltAddStylesheet</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,const xmlChar *xslt
</FUNCTION>
<FUNCTION>
<NAME>xmlSecC14NExclAddInclNamespaces</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,const xmlChar *prefixList
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPathAdd</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPath2Add</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const xmlChar* type,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPointerAdd</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<MACRO>
<NAME>XMLSEC_TRANSFORM_BINARY_CHUNK</NAME>
#define XMLSEC_TRANSFORM_BINARY_CHUNK			64
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformIdsGet</NAME>
<RETURNS>xmlSecPtrListPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsInit</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsShutdown</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsRegisterDefault</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsRegister</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformId keyId
</FUNCTION>
<ENUM>
<NAME>xmlSecTransformStatus</NAME>
typedef enum  {
    xmlSecTransformStatusNone = 0,
    xmlSecTransformStatusWorking,
    xmlSecTransformStatusFinished,
    xmlSecTransformStatusOk,
    xmlSecTransformStatusFail
} xmlSecTransformStatus;
</ENUM>
<ENUM>
<NAME>xmlSecTransformMode</NAME>
typedef enum  {
    xmlSecTransformModeNone = 0,
    xmlSecTransformModePush,
    xmlSecTransformModePop
} xmlSecTransformMode;
</ENUM>
<ENUM>
<NAME>xmlSecTransformOperation</NAME>
typedef enum  {
    xmlSecTransformOperationNone = 0,
    xmlSecTransformOperationEncode,
    xmlSecTransformOperationDecode,
    xmlSecTransformOperationSign,
    xmlSecTransformOperationVerify,
    xmlSecTransformOperationEncrypt,
    xmlSecTransformOperationDecrypt
} xmlSecTransformOperation;
</ENUM>
<TYPEDEF>
<NAME>xmlSecTransformUriType</NAME>
typedef unsigned int				xmlSecTransformUriType;
</TYPEDEF>
<MACRO>
<NAME>xmlSecTransformUriTypeNone</NAME>
#define xmlSecTransformUriTypeNone		0x0000
</MACRO>
<MACRO>
<NAME>xmlSecTransformUriTypeEmpty</NAME>
#define xmlSecTransformUriTypeEmpty		0x0001
</MACRO>
<MACRO>
<NAME>xmlSecTransformUriTypeSameDocument</NAME>
#define xmlSecTransformUriTypeSameDocument	0x0002		
</MACRO>
<MACRO>
<NAME>xmlSecTransformUriTypeLocal</NAME>
#define xmlSecTransformUriTypeLocal		0x0004
</MACRO>
<MACRO>
<NAME>xmlSecTransformUriTypeRemote</NAME>
#define xmlSecTransformUriTypeRemote		0x0008
</MACRO>
<MACRO>
<NAME>xmlSecTransformUriTypeAny</NAME>
#define xmlSecTransformUriTypeAny		0xFFFF
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformUriTypeCheck</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformUriType type,const xmlChar* uri
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecTransformDataType</NAME>
typedef unsigned char				xmlSecTransformDataType;
</TYPEDEF>
<MACRO>
<NAME>xmlSecTransformDataTypeUnknown</NAME>
#define xmlSecTransformDataTypeUnknown		0x0000
</MACRO>
<MACRO>
<NAME>xmlSecTransformDataTypeBin</NAME>
#define xmlSecTransformDataTypeBin		0x0001
</MACRO>
<MACRO>
<NAME>xmlSecTransformDataTypeXml</NAME>
#define xmlSecTransformDataTypeXml		0x0002
</MACRO>
<TYPEDEF>
<NAME>xmlSecTransformUsage</NAME>
typedef unsigned int				xmlSecTransformUsage;
</TYPEDEF>
<MACRO>
<NAME>xmlSecTransformUsageUnknown</NAME>
#define xmlSecTransformUsageUnknown		0x0000
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageDSigTransform</NAME>
#define xmlSecTransformUsageDSigTransform	0x0001
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageC14NMethod</NAME>
#define xmlSecTransformUsageC14NMethod		0x0002
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageDigestMethod</NAME>
#define xmlSecTransformUsageDigestMethod	0x0004
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageSignatureMethod</NAME>
#define xmlSecTransformUsageSignatureMethod	0x0008
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageEncryptionMethod</NAME>
#define xmlSecTransformUsageEncryptionMethod	0x0010
</MACRO>
<MACRO>
<NAME>xmlSecTransformUsageAny</NAME>
#define xmlSecTransformUsageAny			0xFFFF
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecTransformCtxPreExecuteCallback</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecTransformCtx</NAME>
struct xmlSecTransformCtx {
    /* user settings */
    void*					userData;
    unsigned int				flags;
    unsigned int				flags2;
    xmlSecTransformUriType			enabledUris;
    xmlSecPtrList				enabledTransforms;
    xmlSecTransformCtxPreExecuteCallback	preExecCallback;
    
    /* results */
    xmlSecBufferPtr				result;
    xmlSecTransformStatus			status;
    xmlChar*					uri;
    xmlChar*					xptrExpr;
    xmlSecTransformPtr				first;
    xmlSecTransformPtr				last;

    /* for the future */
    void*					reserved0;
    void*					reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecTransformCtxCreate</NAME>
<RETURNS>xmlSecTransformCtxPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxInitialize</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxReset</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxCopyUserPref</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr dst,xmlSecTransformCtxPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxSetUri</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,const xmlChar* uri,xmlNodePtr hereNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxAppend</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxPrepend</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxCreateAndAppend</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecTransformId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxCreateAndPrepend</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecTransformId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxNodeRead</NAME>
<RETURNS>xmlSecTransformPtr  </RETURNS>
xmlSecTransformCtxPtr ctx,xmlNodePtr node,xmlSecTransformUsage usage
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxNodesListRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlNodePtr node,xmlSecTransformUsage usage
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxPrepare</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecTransformDataType inputDataType
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxBinaryExecute</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,const unsigned char* data,size_t dataSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxUriExecute</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformCtxPtr ctx,const xmlChar* uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxXmlExecute</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlSecNodeSetPtr nodes
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxExecute</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformCtxPtr ctx,xmlDocPtr doc
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformCtxPtr ctx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCtxDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformCtxPtr ctx,FILE* output
</FUNCTION>
<STRUCT>
<NAME>xmlSecTransform</NAME>
struct xmlSecTransform {
    xmlSecTransformId 			id; 
    xmlSecTransformOperation		operation;
    xmlSecTransformStatus		status;
    xmlNodePtr				hereNode;

    /* transforms chain */
    xmlSecTransformPtr			next;
    xmlSecTransformPtr			prev;

    /* binary data */
    xmlSecBuffer			inBuf;
    xmlSecBuffer			outBuf;
        
    /* xml data */
    xmlSecNodeSetPtr			inNodes;
    xmlSecNodeSetPtr			outNodes;

    /* reserved for the future */    
    void*				reserved0;
    void*				reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecTransformCreate</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformNodeRead</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlNodePtr node,xmlSecTransformUsage usage,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformPump</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr left,xmlSecTransformPtr right,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformSetKey</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformSetKeyReq</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlSecKeyReqPtr keyReq
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformVerify</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const unsigned char* data,size_t dataSize,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformVerifyNodeContent</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlNodePtr node,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformGetDataType</NAME>
<RETURNS>xmlSecTransformDataType 	</RETURNS>
xmlSecTransformPtr transform,xmlSecTransformMode mode,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformPushBin</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,const unsigned char* data,size_t dataSize,int final,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformPopBin</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,unsigned char* data,size_t maxDataSize,size_t* dataSize,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformPushXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,xmlSecNodeSetPtr nodes,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformPopXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,xmlSecNodeSetPtr* nodes,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformExecute</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,int last,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform,FILE* output
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformGetName</NAME>
#define xmlSecTransformGetName(transform) \
	((xmlSecTransformIsValid((transform))) ? \
	  xmlSecTransformKlassGetName((transform)->id) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecTransformIsValid</NAME>
#define xmlSecTransformIsValid(transform) \
	((( transform ) != NULL) && \
	 (( transform )->id != NULL) && \
	 (( transform )->id->klassSize >= sizeof(xmlSecTransformKlass)) && \
	 (( transform )->id->objSize >= sizeof(xmlSecTransform)) && \
	 (( transform )->id->name != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecTransformCheckType</NAME>
#define xmlSecTransformCheckType(transform, t) \
 	(xmlSecTransformIsValid(( transform )) && \
	((( transform )->id->type) == ( t )))
</MACRO>
<MACRO>
<NAME>xmlSecTransformCheckId</NAME>
#define xmlSecTransformCheckId(transform, i) \
 	(xmlSecTransformIsValid(( transform )) && \
	((((const xmlSecTransformId) (( transform )->id))) == ( i )))
</MACRO>
<MACRO>
<NAME>xmlSecTransformCheckSize</NAME>
#define xmlSecTransformCheckSize(transform, size) \
 	(xmlSecTransformIsValid(( transform )) && \
	((( transform )->id->objSize) >= ( size )))
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformConnect</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr left,xmlSecTransformPtr right,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformAddAfter</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformPtr curTransform,xmlSecTransformPtr newTransform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformAddBefore</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformPtr curTransform,xmlSecTransformPtr newTransform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformRemove</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDefaultGetDataType</NAME>
<RETURNS>xmlSecTransformDataType 	</RETURNS>
xmlSecTransformPtr transform,xmlSecTransformMode mode,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDefaultPushBin</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,const unsigned char* data,size_t dataSize,int final,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDefaultPopBin</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,unsigned char* data,size_t maxDataSize,size_t* dataSize,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDefaultPushXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,xmlSecNodeSetPtr nodes,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDefaultPopXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,xmlSecNodeSetPtr* nodes,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCreateOutputBuffer</NAME>
<RETURNS>xmlOutputBufferPtr  </RETURNS>
xmlSecTransformPtr transform,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCreateInputBuffer</NAME>
<RETURNS>xmlParserInputBufferPtr  </RETURNS>
xmlSecTransformPtr transform,xmlSecTransformCtxPtr transformCtx
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformInitializeMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformFinalizeMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecTransformPtr transform
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformGetDataTypeMethod</NAME>
<RETURNS>xmlSecTransformDataType </RETURNS>
xmlSecTransformPtr transform,
								 xmlSecTransformMode mode,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformNodeReadMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform,
								 xmlNodePtr node,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformNodeWriteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform,
								 xmlNodePtr node,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformSetKeyRequirements</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 xmlSecKeyReqPtr keyReq
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformSetKeyMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 xmlSecKeyPtr key
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformVerifyMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 const unsigned char* data,
								 size_t dataSize,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformPushBinMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 const unsigned char* data,
								 size_t dataSize,
								 int final,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformPopBinMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 unsigned char* data,
								 size_t maxDataSize,
								 size_t* dataSize,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformPushXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 xmlSecNodeSetPtr nodes,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformPopXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 xmlSecNodeSetPtr* nodes,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformExecuteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform, 
								 int last,
								 xmlSecTransformCtxPtr transformCtx
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecTransformKlass</NAME>
struct xmlSecTransformKlass {
    /* data */
    size_t				klassSize;
    size_t				objSize;
    const xmlChar*			name;
    const xmlChar*			href;
    xmlSecTransformUsage		usage;

    /* methods */
    xmlSecTransformInitializeMethod	initialize;
    xmlSecTransformFinalizeMethod	finalize;

    xmlSecTransformNodeReadMethod	readNode;
    xmlSecTransformNodeWriteMethod	writeNode;

    xmlSecTransformSetKeyRequirements	setKeyReq;
    xmlSecTransformSetKeyMethod		setKey;
    xmlSecTransformVerifyMethod		verify;
    xmlSecTransformGetDataTypeMethod	getDataType;

    xmlSecTransformPushBinMethod	pushBin;
    xmlSecTransformPopBinMethod		popBin;
    xmlSecTransformPushXmlMethod	pushXml;
    xmlSecTransformPopXmlMethod		popXml;
    
    /* low level method */
    xmlSecTransformExecuteMethod	execute;

    /* reserved for future */ 
    void* 				reserved0;
    void* 				reserved1;
};
</STRUCT>
<MACRO>
<NAME>xmlSecTransformKlassGetName</NAME>
#define xmlSecTransformKlassGetName(klass) \
	(((klass)) ? ((klass)->name) : NULL)
</MACRO>
<MACRO>
<NAME>xmlSecTransformIdListId</NAME>
#define xmlSecTransformIdListId	xmlSecTransformIdListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformIdListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdListFind</NAME>
<RETURNS>int 	</RETURNS>
xmlSecPtrListPtr list,xmlSecTransformId transformId
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdListFindByHref</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
xmlSecPtrListPtr list,const xmlChar* href,xmlSecTransformUsage usage
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdListFindByName</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
xmlSecPtrListPtr list,const xmlChar* name,xmlSecTransformUsage usage
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformIdUnknown</NAME>
#define xmlSecTransformIdUnknown			NULL
</MACRO>
<MACRO>
<NAME>xmlSecTransformBase64Id</NAME>
#define xmlSecTransformBase64Id \
	xmlSecTransformBase64GetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformBase64GetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformBase64SetLineSize</NAME>
<RETURNS>void  </RETURNS>
xmlSecTransformPtr transform,size_t lineSize
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformInclC14NId</NAME>
#define xmlSecTransformInclC14NId \
	xmlSecTransformInclC14NGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformInclC14NGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformInclC14NWithCommentsId</NAME>
#define xmlSecTransformInclC14NWithCommentsId \
	xmlSecTransformInclC14NWithCommentsGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformInclC14NWithCommentsGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformExclC14NId</NAME>
#define xmlSecTransformExclC14NId \
	xmlSecTransformExclC14NGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformExclC14NGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformExclC14NWithCommentsId</NAME>
#define xmlSecTransformExclC14NWithCommentsId \
	xmlSecTransformExclC14NWithCommentsGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformExclC14NWithCommentsGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformEnvelopedId</NAME>
#define xmlSecTransformEnvelopedId \
	xmlSecTransformEnvelopedGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformEnvelopedGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformXPathId</NAME>
#define xmlSecTransformXPathId \
	xmlSecTransformXPathGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformXPathGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformXPath2Id</NAME>
#define xmlSecTransformXPath2Id \
	xmlSecTransformXPath2GetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformXPath2GetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformXPointerId</NAME>
#define xmlSecTransformXPointerId \
	xmlSecTransformXPointerGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformXPointerGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPointerSetExpr</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,const xmlChar* expr,xmlSecNodeSetType nodeSetType,xmlNodePtr hereNode
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformXsltId</NAME>
#define xmlSecTransformXsltId \
	xmlSecTransformXsltGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformXsltGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformRemoveXmlTagsC14NId</NAME>
#define xmlSecTransformRemoveXmlTagsC14NId \
	xmlSecTransformRemoveXmlTagsC14NGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformRemoveXmlTagsC14NGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>extern</NAME>
#        define  extern
</MACRO>
<MACRO>
<NAME>XMLSEC_CRYPTO_EXPORT</NAME>
#        define XMLSEC_CRYPTO_EXPORT __declspec(dllexport) 
</MACRO>
<MACRO>
<NAME>XMLSEC_CRYPTO_EXPORT</NAME>
#        define XMLSEC_CRYPTO_EXPORT extern
</MACRO>
<MACRO>
<NAME>XMLSEC_CRYPTO_EXPORT</NAME>
#        define XMLSEC_CRYPTO_EXPORT __declspec(dllimport) 
</MACRO>
<MACRO>
<NAME>XMLSEC_CRYPTO_EXPORT</NAME>
#        define XMLSEC_CRYPTO_EXPORT 
</MACRO>
<MACRO>
<NAME>XMLSEC_CRYPTO_EXPORT</NAME>
#    define XMLSEC_CRYPTO_EXPORT
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern __declspec(dllexport) extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern __declspec(dllimport) 
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#    define extern extern
</MACRO>
<ENUM>
<NAME>xmlSecAllocMode</NAME>
typedef enum {
    xmlSecAllocModeExact = 0,
    xmlSecAllocModeDouble
} xmlSecAllocMode;
</ENUM>
<STRUCT>
<NAME>xmlSecBuffer</NAME>
struct xmlSecBuffer {
    unsigned char* 	data;
    size_t 		size;
    size_t		maxSize;
    xmlSecAllocMode 	allocMode;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecBufferSetDefaultAllocMode</NAME>
<RETURNS>void 	</RETURNS>
xmlSecAllocMode defAllocMode,size_t defInitialSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferCreate</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferGetData</NAME>
<RETURNS>unsigned char *</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferSetData</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferSetSize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferGetMaxSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferSetMaxSize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferEmpty</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferAppend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferPrepend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferRemoveHead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferRemoveTail</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferBase64NodeContentRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferBase64NodeContentWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,xmlNodePtr node,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferCreateOutputBuffer</NAME>
<RETURNS>xmlOutputBufferPtr  </RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<ENUM>
<NAME>xmlSecDSigStatus</NAME>
typedef enum {
    xmlSecDSigStatusUnknown = 0,
    xmlSecDSigStatusSucceeded,
    xmlSecDSigStatusInvalid
} xmlSecDSigStatus;
</ENUM>
<STRUCT>
<NAME>xmlSecDSigCtx</NAME>
struct xmlSecDSigCtx {
    /* these data user can set before performing the operation */
    void*			userData;
    xmlSecKeyInfoCtx		keyInfoReadCtx;
    xmlSecKeyInfoCtx		keyInfoWriteCtx;
    xmlSecTransformCtx		signTransformCtx;
    int				processManifests;
    int				storeSignatures;
    int				storeReferences;
    int				storeManifests;	

    xmlSecTransformUriType	enabledReferenceUris;
    xmlSecPtrListPtr		enabledReferenceTransforms;
    
    /* these data are returned */
    xmlSecTransformOperation	operation;
    xmlSecKeyPtr		signKey;
    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		signMethod;
    xmlSecTransformPtr		c14nMethod;
    xmlSecTransformPtr		preSignMemBufMethod;
    xmlChar*			id;    
    xmlSecPtrList    		references;
    xmlSecPtrList		manifests;
        
    /* these are internal data, nobody should change that except us */
    xmlNodePtr			signValueNode;
    int				dontDestroySignMethod;
    int				dontDestroyC14NMethod;

    /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};						
</STRUCT>
<FUNCTION>
<NAME>xmlSecDSigCtxCreate</NAME>
<RETURNS>xmlSecDSigCtxPtr 	</RETURNS>
xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecDSigCtxPtr dsigCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxAdoptSignatureKey</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxSign</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,xmlNodePtr tmpl
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxVerify</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxPreSignBuffer</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,FILE* output
</FUNCTION>
<ENUM>
<NAME>xmlSecDSigReferenceOrigin</NAME>
typedef enum  {
    xmlSecDSigReferenceOriginSignedInfo,
    xmlSecDSigReferenceOriginManifest
} xmlSecDSigReferenceOrigin;
</ENUM>
<STRUCT>
<NAME>xmlSecDSigReferenceCtx</NAME>
struct xmlSecDSigReferenceCtx {
    xmlSecDSigCtxPtr		dsigCtx;
    xmlSecDSigReferenceOrigin	origin;
    xmlSecTransformCtx		digestTransformCtx;
    xmlSecTransformPtr		digestMethod;

    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		preDigestMemBufMethod;
    xmlChar*			id;
    xmlChar*			uri;
    xmlChar*			type;
    
     /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxCreate</NAME>
<RETURNS>xmlSecDSigReferenceCtxPtr 	</RETURNS>
xmlSecDSigCtxPtr dsigCtx,xmlSecDSigReferenceOrigin origin
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx,xmlSecDSigCtxPtr dsigCtx,xmlSecDSigReferenceOrigin origin
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxProcessNode</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxPreDigestBuffer</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigReferenceCtxPtr dsigRefCtx,FILE* output
</FUNCTION>
<MACRO>
<NAME>xmlSecDSigReferenceCtxListId</NAME>
#define xmlSecDSigReferenceCtxListId \
	xmlSecDSigReferenceCtxListGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecDSigReferenceCtxListGetKlass</NAME>
<RETURNS>xmlSecPtrListId 	</RETURNS>
void
</FUNCTION>
<ENUM>
<NAME>xmlEncCtxMode</NAME>
typedef enum {
    xmlEncCtxModeEncryptedData = 0,
    xmlEncCtxModeEncryptedKey
} xmlEncCtxMode;
</ENUM>
<STRUCT>
<NAME>xmlSecEncCtx</NAME>
struct xmlSecEncCtx {
    /* these data user can set before performing the operation */
    void*			userData;
    unsigned int		flags;
    unsigned int		flags2;    
    xmlEncCtxMode		mode;
    xmlSecTransformId		defEncMethodId;
    xmlSecKeyInfoCtx		keyInfoReadCtx;
    xmlSecKeyInfoCtx		keyInfoWriteCtx;
    xmlSecTransformCtx		encTransformCtx;

    /* these data are returned */
    xmlSecTransformOperation	operation;
    xmlSecBufferPtr		result;
    int				resultBase64Encoded;
    int				resultReplaced;
    xmlSecTransformPtr		encMethod;
    xmlSecKeyPtr		encKey;

    /* attributes from EncryptedData or EncryptedKey */    
    xmlChar*			id;
    xmlChar*			type;
    xmlChar*			mimeType;
    xmlChar*			encoding;
    xmlChar*			recipient;
    xmlChar*			carriedKeyName;

    /* these are internal data, nobody should change that except us */
    xmlNodePtr			encDataNode;
    xmlNodePtr			encMethodNode;
    xmlNodePtr			keyInfoNode;
    xmlNodePtr			cipherValueNode;
    
    /* reserved for future */
    void*			reserved0;
    void*			reserved1;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecEncCtxCreate</NAME>
<RETURNS>xmlSecEncCtxPtr 	</RETURNS>
xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecEncCtxPtr encCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxInitialize</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxFinalize</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncCtxPtr encCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxCopyUserPref</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr dst,xmlSecEncCtxPtr src
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxReset</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncCtxPtr encCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxBinaryEncrypt</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlNodePtr tmpl,const unsigned char* data,size_t dataSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxXmlEncrypt</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlNodePtr tmpl,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxUriEncrypt</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlNodePtr tmpl,const xmlChar *uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDecrypt</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDecryptToBuffer</NAME>
<RETURNS>xmlSecBufferPtr 	</RETURNS>
xmlSecEncCtxPtr encCtx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncCtxPtr encCtx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncCtxPtr encCtx,FILE* output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecInit</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecShutdown</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>ATTRIBUTE_UNUSED</NAME>
#define ATTRIBUTE_UNUSED
</MACRO>
<MACRO>
<NAME>ATTRIBUTE_UNUSED</NAME>
#define ATTRIBUTE_UNUSED
</MACRO>
<MACRO>
<NAME>xmlSecNodeGetName</NAME>
#define xmlSecNodeGetName(node) \
    (((node)) ? ((const char*)((node)->name)) : NULL)
</MACRO>
<FUNCTION>
<NAME>xmlSecGetNodeNsHref</NAME>
<RETURNS>const xmlChar *</RETURNS>
const xmlNodePtr cur
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCheckNodeName</NAME>
<RETURNS>int 	</RETURNS>
const xmlNodePtr cur,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecGetNextElementNode</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr cur
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindChild</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindParent</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr cur,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindNode</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddChild</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddNextSibling</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr node,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddPrevSibling</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr node,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceNode</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,xmlNodePtr newNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceContent</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,xmlNodePtr newNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceNodeBuffer</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddIDs</NAME>
<RETURNS>void 	</RETURNS>
xmlDocPtr doc,xmlNodePtr cur,const xmlChar** ids
</FUNCTION>
<MACRO>
<NAME>xmlSecIsHex</NAME>
#define xmlSecIsHex(c) \
    (( (('0' <= (c)) && ((c) <= '9')) || \
       (('a' <= (c)) && ((c) <= 'f')) || \
       (('A' <= (c)) && ((c) <= 'F')) ) ? 1 : 0)
</MACRO>
<MACRO>
<NAME>xmlSecGetHex</NAME>
#define xmlSecGetHex(c) \
    ( (('0' <= (c)) && ((c) <= '9')) ? (c) - '0' : \
    ( (('a' <= (c)) && ((c) <= 'f')) ? (c) - 'a' + 10 :  \
    ( (('A' <= (c)) && ((c) <= 'F')) ? (c) - 'A' + 10 : 0 )))
</MACRO>
<FUNCTION>
<NAME>xmlSecParseFile</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>xmlSecParseMemory</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const unsigned char *buffer,size_t size,int recovery
</FUNCTION>
<FUNCTION>
<NAME>xmlSecParseMemoryExt</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const unsigned char *prefix,size_t prefixSize,const unsigned char *buffer,size_t bufferSize,const unsigned char *postfix,size_t postfixSize
</FUNCTION>
<MACRO>
<NAME>xmlSecTransformXmlParserId</NAME>
#define xmlSecTransformXmlParserId \
	xmlSecTransformXmlParserGetKlass()
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformXmlParserGetKlass</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecNssKeyDataAesId</NAME>
#define xmlSecNssKeyDataAesId \
	xmlSecNssKeyDataAesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformAes128CbcId</NAME>
#define xmlSecNssTransformAes128CbcId \
	xmlSecNssTransformAes128CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformAes192CbcId</NAME>
#define xmlSecNssTransformAes192CbcId \
	xmlSecNssTransformAes192CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformAes256CbcId</NAME>
#define xmlSecNssTransformAes256CbcId \
	xmlSecNssTransformAes256CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssKeyDataDesId</NAME>
#define xmlSecNssKeyDataDesId \
	xmlSecNssKeyDataDesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformDes3CbcId</NAME>
#define xmlSecNssTransformDes3CbcId \
	xmlSecNssTransformDes3CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssKeyDataHmacId</NAME>
#define xmlSecNssKeyDataHmacId \
	xmlSecNssKeyDataHmacGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformHmacSha1Id</NAME>
#define xmlSecNssTransformHmacSha1Id \
	xmlSecNssTransformHmacSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformHmacRipemd160Id</NAME>
#define xmlSecNssTransformHmacRipemd160Id \
	xmlSecNssTransformHmacRipemd160GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformHmacMd5Id</NAME>
#define xmlSecNssTransformHmacMd5Id \
	xmlSecNssTransformHmacMd5GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecNssTransformSha1Id</NAME>
#define xmlSecNssTransformSha1Id \
	xmlSecNssTransformSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecCryptoInit</NAME>
#define xmlSecCryptoInit			xmlSecNssInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoShutdown</NAME>
#define xmlSecCryptoShutdown			xmlSecNssShutdown
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataAesId</NAME>
#define xmlSecKeyDataAesId			xmlSecNssKeyDataAesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDesId</NAME>
#define xmlSecKeyDataDesId			xmlSecNssKeyDataDesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDsaId</NAME>
#define xmlSecKeyDataDsaId			xmlSecNssKeyDataDsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataHmacId</NAME>
#define xmlSecKeyDataHmacId			xmlSecNssKeyDataHmacId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRsaId</NAME>
#define xmlSecKeyDataRsaId			xmlSecNssKeyDataRsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataX509Id</NAME>
#define xmlSecKeyDataX509Id			xmlSecNssKeyDataX509Id
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRawX509CertId</NAME>
#define xmlSecKeyDataRawX509CertId		xmlSecNssKeyDataRawX509CertId
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreId</NAME>
#define xmlSecX509StoreId			xmlSecNssX509StoreId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes128CbcId</NAME>
#define xmlSecTransformAes128CbcId		xmlSecNssTransformAes128CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes192CbcId</NAME>
#define xmlSecTransformAes192CbcId		xmlSecNssTransformAes192CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes256CbcId</NAME>
#define xmlSecTransformAes256CbcId		xmlSecNssTransformAes256CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes128Id</NAME>
#define xmlSecTransformKWAes128Id		xmlSecNssTransformKWAes128Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes192Id</NAME>
#define xmlSecTransformKWAes192Id		xmlSecNssTransformKWAes192Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes256Id</NAME>
#define xmlSecTransformKWAes256Id		xmlSecNssTransformKWAes256Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDes3CbcId</NAME>
#define xmlSecTransformDes3CbcId		xmlSecNssTransformDes3CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWDes3Id</NAME>
#define xmlSecTransformKWDes3Id			xmlSecNssTransformKWDes3Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDsaSha1Id</NAME>
#define xmlSecTransformDsaSha1Id		xmlSecNssTransformDsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacSha1Id</NAME>
#define xmlSecTransformHmacSha1Id		xmlSecNssTransformHmacSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacRipemd160Id</NAME>
#define xmlSecTransformHmacRipemd160Id		xmlSecNssTransformHmacRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacMd5Id</NAME>
#define xmlSecTransformHmacMd5Id		xmlSecNssTransformHmacMd5Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRipemd160Id</NAME>
#define xmlSecTransformRipemd160Id		xmlSecNssTransformRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaSha1Id</NAME>
#define xmlSecTransformRsaSha1Id		xmlSecNssTransformRsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaPkcs1Id</NAME>
#define xmlSecTransformRsaPkcs1Id		xmlSecNssTransformRsaPkcs1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaOaepId</NAME>
#define xmlSecTransformRsaOaepId		xmlSecNssTransformRsaOaepId
</MACRO>
<MACRO>
<NAME>xmlSecTransformSha1Id</NAME>
#define xmlSecTransformSha1Id			xmlSecNssTransformSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppInit</NAME>
#define xmlSecCryptoAppInit			xmlSecNssAppInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppShutdown</NAME>
#define xmlSecCryptoAppShutdown			xmlSecNssAppShutdown
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrInit</NAME>
#define xmlSecCryptoAppSimpleKeysMngrInit	xmlSecNssAppSimpleKeysMngrInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrAdoptKey</NAME>
#define xmlSecCryptoAppSimpleKeysMngrAdoptKey	xmlSecNssAppSimpleKeysMngrAdoptKey
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrLoad</NAME>
#define xmlSecCryptoAppSimpleKeysMngrLoad	xmlSecNssAppSimpleKeysMngrLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrSave</NAME>
#define xmlSecCryptoAppSimpleKeysMngrSave	xmlSecNssAppSimpleKeysMngrSave
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrPemCertLoad</NAME>
#define xmlSecCryptoAppKeysMngrPemCertLoad	xmlSecNssAppKeysMngrPemCertLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrAddCertsPath</NAME>
#define xmlSecCryptoAppKeysMngrAddCertsPath	xmlSecNssAppKeysMngrAddCertsPath
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPemKeyLoad</NAME>
#define xmlSecCryptoAppPemKeyLoad		xmlSecNssAppPemKeyLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPkcs12Load</NAME>
#define xmlSecCryptoAppPkcs12Load		xmlSecNssAppPkcs12Load
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeyPemCertLoad</NAME>
#define xmlSecCryptoAppKeyPemCertLoad		xmlSecNssAppKeyPemCertLoad
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataAesId</NAME>
#define xmlSecOpenSSLKeyDataAesId \
	xmlSecOpenSSLKeyDataAesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformAes128CbcId</NAME>
#define xmlSecOpenSSLTransformAes128CbcId \
	xmlSecOpenSSLTransformAes128CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformAes192CbcId</NAME>
#define xmlSecOpenSSLTransformAes192CbcId \
	xmlSecOpenSSLTransformAes192CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformAes256CbcId</NAME>
#define xmlSecOpenSSLTransformAes256CbcId \
	xmlSecOpenSSLTransformAes256CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformKWAes128Id</NAME>
#define xmlSecOpenSSLTransformKWAes128Id \
	xmlSecOpenSSLTransformKWAes128GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformKWAes192Id</NAME>
#define xmlSecOpenSSLTransformKWAes192Id \
	xmlSecOpenSSLTransformKWAes192GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformKWAes256Id</NAME>
#define xmlSecOpenSSLTransformKWAes256Id \
	xmlSecOpenSSLTransformKWAes256GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataDesId</NAME>
#define xmlSecOpenSSLKeyDataDesId \
	xmlSecOpenSSLKeyDataDesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformDes3CbcId</NAME>
#define xmlSecOpenSSLTransformDes3CbcId \
	xmlSecOpenSSLTransformDes3CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformKWDes3Id</NAME>
#define xmlSecOpenSSLTransformKWDes3Id \
	xmlSecOpenSSLTransformKWDes3GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataDsaId</NAME>
#define xmlSecOpenSSLKeyDataDsaId \
	xmlSecOpenSSLKeyDataDsaGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformDsaSha1Id</NAME>
#define xmlSecOpenSSLTransformDsaSha1Id \
	xmlSecOpenSSLTransformDsaSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataHmacId</NAME>
#define xmlSecOpenSSLKeyDataHmacId \
	xmlSecOpenSSLKeyDataHmacGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformHmacSha1Id</NAME>
#define xmlSecOpenSSLTransformHmacSha1Id \
	xmlSecOpenSSLTransformHmacSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformHmacRipemd160Id</NAME>
#define xmlSecOpenSSLTransformHmacRipemd160Id \
	xmlSecOpenSSLTransformHmacRipemd160GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformHmacMd5Id</NAME>
#define xmlSecOpenSSLTransformHmacMd5Id \
	xmlSecOpenSSLTransformHmacMd5GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformRipemd160Id</NAME>
#define xmlSecOpenSSLTransformRipemd160Id \
	xmlSecOpenSSLTransformRipemd160GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataRsaId</NAME>
#define xmlSecOpenSSLKeyDataRsaId \
	xmlSecOpenSSLKeyDataRsaGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformRsaSha1Id</NAME>
#define xmlSecOpenSSLTransformRsaSha1Id	\
	xmlSecOpenSSLTransformRsaSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformRsaPkcs1Id</NAME>
#define xmlSecOpenSSLTransformRsaPkcs1Id \
	xmlSecOpenSSLTransformRsaPkcs1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformRsaOaepId</NAME>
#define xmlSecOpenSSLTransformRsaOaepId \
	xmlSecOpenSSLTransformRsaOaepGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLTransformSha1Id</NAME>
#define xmlSecOpenSSLTransformSha1Id \
	xmlSecOpenSSLTransformSha1GetKlass()
</MACRO>
<MACRO>
<NAME>XMLSEC_OPENSSL_ERRORS_LIB</NAME>
#define XMLSEC_OPENSSL_ERRORS_LIB			(ERR_LIB_USER + 57)
</MACRO>
<MACRO>
<NAME>XMLSEC_OPENSSL_ERRORS_FUNCTION</NAME>
#define XMLSEC_OPENSSL_ERRORS_FUNCTION			0
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataX509Id</NAME>
#define xmlSecOpenSSLKeyDataX509Id \
	xmlSecOpenSSLKeyDataX509GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLKeyDataRawX509CertId</NAME>
#define xmlSecOpenSSLKeyDataRawX509CertId \
	xmlSecOpenSSLKeyDataRawX509CertGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreId</NAME>
#define xmlSecOpenSSLX509StoreId \
	xmlSecOpenSSLX509StoreGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecCryptoInit</NAME>
#define xmlSecCryptoInit			xmlSecOpenSSLInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoShutdown</NAME>
#define xmlSecCryptoShutdown			xmlSecOpenSSLShutdown
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataAesId</NAME>
#define xmlSecKeyDataAesId			xmlSecOpenSSLKeyDataAesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDesId</NAME>
#define xmlSecKeyDataDesId			xmlSecOpenSSLKeyDataDesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDsaId</NAME>
#define xmlSecKeyDataDsaId			xmlSecOpenSSLKeyDataDsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataHmacId</NAME>
#define xmlSecKeyDataHmacId			xmlSecOpenSSLKeyDataHmacId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRsaId</NAME>
#define xmlSecKeyDataRsaId			xmlSecOpenSSLKeyDataRsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataX509Id</NAME>
#define xmlSecKeyDataX509Id			xmlSecOpenSSLKeyDataX509Id
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRawX509CertId</NAME>
#define xmlSecKeyDataRawX509CertId		xmlSecOpenSSLKeyDataRawX509CertId
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreId</NAME>
#define xmlSecX509StoreId			xmlSecOpenSSLX509StoreId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes128CbcId</NAME>
#define xmlSecTransformAes128CbcId		xmlSecOpenSSLTransformAes128CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes192CbcId</NAME>
#define xmlSecTransformAes192CbcId		xmlSecOpenSSLTransformAes192CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes256CbcId</NAME>
#define xmlSecTransformAes256CbcId		xmlSecOpenSSLTransformAes256CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes128Id</NAME>
#define xmlSecTransformKWAes128Id		xmlSecOpenSSLTransformKWAes128Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes192Id</NAME>
#define xmlSecTransformKWAes192Id		xmlSecOpenSSLTransformKWAes192Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes256Id</NAME>
#define xmlSecTransformKWAes256Id		xmlSecOpenSSLTransformKWAes256Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDes3CbcId</NAME>
#define xmlSecTransformDes3CbcId		xmlSecOpenSSLTransformDes3CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWDes3Id</NAME>
#define xmlSecTransformKWDes3Id			xmlSecOpenSSLTransformKWDes3Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDsaSha1Id</NAME>
#define xmlSecTransformDsaSha1Id		xmlSecOpenSSLTransformDsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacSha1Id</NAME>
#define xmlSecTransformHmacSha1Id		xmlSecOpenSSLTransformHmacSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacRipemd160Id</NAME>
#define xmlSecTransformHmacRipemd160Id		xmlSecOpenSSLTransformHmacRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacMd5Id</NAME>
#define xmlSecTransformHmacMd5Id		xmlSecOpenSSLTransformHmacMd5Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRipemd160Id</NAME>
#define xmlSecTransformRipemd160Id		xmlSecOpenSSLTransformRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaSha1Id</NAME>
#define xmlSecTransformRsaSha1Id		xmlSecOpenSSLTransformRsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaPkcs1Id</NAME>
#define xmlSecTransformRsaPkcs1Id		xmlSecOpenSSLTransformRsaPkcs1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaOaepId</NAME>
#define xmlSecTransformRsaOaepId		xmlSecOpenSSLTransformRsaOaepId
</MACRO>
<MACRO>
<NAME>xmlSecTransformSha1Id</NAME>
#define xmlSecTransformSha1Id			xmlSecOpenSSLTransformSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppInit</NAME>
#define xmlSecCryptoAppInit			xmlSecOpenSSLAppInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppShutdown</NAME>
#define xmlSecCryptoAppShutdown			xmlSecOpenSSLAppShutdown
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrInit</NAME>
#define xmlSecCryptoAppSimpleKeysMngrInit	xmlSecOpenSSLAppSimpleKeysMngrInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrAdoptKey</NAME>
#define xmlSecCryptoAppSimpleKeysMngrAdoptKey	xmlSecOpenSSLAppSimpleKeysMngrAdoptKey
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrLoad</NAME>
#define xmlSecCryptoAppSimpleKeysMngrLoad	xmlSecOpenSSLAppSimpleKeysMngrLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrSave</NAME>
#define xmlSecCryptoAppSimpleKeysMngrSave	xmlSecOpenSSLAppSimpleKeysMngrSave
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrPemCertLoad</NAME>
#define xmlSecCryptoAppKeysMngrPemCertLoad	xmlSecOpenSSLAppKeysMngrPemCertLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrAddCertsPath</NAME>
#define xmlSecCryptoAppKeysMngrAddCertsPath	xmlSecOpenSSLAppKeysMngrAddCertsPath
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPemKeyLoad</NAME>
#define xmlSecCryptoAppPemKeyLoad		xmlSecOpenSSLAppPemKeyLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPkcs12Load</NAME>
#define xmlSecCryptoAppPkcs12Load		xmlSecOpenSSLAppPkcs12Load
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeyPemCertLoad</NAME>
#define xmlSecCryptoAppKeyPemCertLoad		xmlSecOpenSSLAppKeyPemCertLoad
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSKeyDataAesId</NAME>
#define xmlSecGnuTLSKeyDataAesId \
	xmlSecGnuTLSKeyDataAesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformAes128CbcId</NAME>
#define xmlSecGnuTLSTransformAes128CbcId \
	xmlSecGnuTLSTransformAes128CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformAes192CbcId</NAME>
#define xmlSecGnuTLSTransformAes192CbcId \
	xmlSecGnuTLSTransformAes192CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformAes256CbcId</NAME>
#define xmlSecGnuTLSTransformAes256CbcId \
	xmlSecGnuTLSTransformAes256CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSKeyDataDesId</NAME>
#define xmlSecGnuTLSKeyDataDesId \
	xmlSecGnuTLSKeyDataDesGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformDes3CbcId</NAME>
#define xmlSecGnuTLSTransformDes3CbcId \
	xmlSecGnuTLSTransformDes3CbcGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSKeyDataHmacId</NAME>
#define xmlSecGnuTLSKeyDataHmacId \
	xmlSecGnuTLSKeyDataHmacGetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformHmacSha1Id</NAME>
#define xmlSecGnuTLSTransformHmacSha1Id \
	xmlSecGnuTLSTransformHmacSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformHmacRipemd160Id</NAME>
#define xmlSecGnuTLSTransformHmacRipemd160Id \
	xmlSecGnuTLSTransformHmacRipemd160GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformHmacMd5Id</NAME>
#define xmlSecGnuTLSTransformHmacMd5Id \
	xmlSecGnuTLSTransformHmacMd5GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecGnuTLSTransformSha1Id</NAME>
#define xmlSecGnuTLSTransformSha1Id \
	xmlSecGnuTLSTransformSha1GetKlass()
</MACRO>
<MACRO>
<NAME>xmlSecCryptoInit</NAME>
#define xmlSecCryptoInit			xmlSecGnuTLSInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoShutdown</NAME>
#define xmlSecCryptoShutdown			xmlSecGnuTLSShutdown
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataAesId</NAME>
#define xmlSecKeyDataAesId			xmlSecGnuTLSKeyDataAesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDesId</NAME>
#define xmlSecKeyDataDesId			xmlSecGnuTLSKeyDataDesId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataDsaId</NAME>
#define xmlSecKeyDataDsaId			xmlSecGnuTLSKeyDataDsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataHmacId</NAME>
#define xmlSecKeyDataHmacId			xmlSecGnuTLSKeyDataHmacId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRsaId</NAME>
#define xmlSecKeyDataRsaId			xmlSecGnuTLSKeyDataRsaId
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataX509Id</NAME>
#define xmlSecKeyDataX509Id			xmlSecGnuTLSKeyDataX509Id
</MACRO>
<MACRO>
<NAME>xmlSecKeyDataRawX509CertId</NAME>
#define xmlSecKeyDataRawX509CertId		xmlSecGnuTLSKeyDataRawX509CertId
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreId</NAME>
#define xmlSecX509StoreId			xmlSecGnuTLSX509StoreId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes128CbcId</NAME>
#define xmlSecTransformAes128CbcId		xmlSecGnuTLSTransformAes128CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes192CbcId</NAME>
#define xmlSecTransformAes192CbcId		xmlSecGnuTLSTransformAes192CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformAes256CbcId</NAME>
#define xmlSecTransformAes256CbcId		xmlSecGnuTLSTransformAes256CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes128Id</NAME>
#define xmlSecTransformKWAes128Id		xmlSecGnuTLSTransformKWAes128Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes192Id</NAME>
#define xmlSecTransformKWAes192Id		xmlSecGnuTLSTransformKWAes192Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWAes256Id</NAME>
#define xmlSecTransformKWAes256Id		xmlSecGnuTLSTransformKWAes256Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDes3CbcId</NAME>
#define xmlSecTransformDes3CbcId		xmlSecGnuTLSTransformDes3CbcId
</MACRO>
<MACRO>
<NAME>xmlSecTransformKWDes3Id</NAME>
#define xmlSecTransformKWDes3Id			xmlSecGnuTLSTransformKWDes3Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformDsaSha1Id</NAME>
#define xmlSecTransformDsaSha1Id		xmlSecGnuTLSTransformDsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacSha1Id</NAME>
#define xmlSecTransformHmacSha1Id		xmlSecGnuTLSTransformHmacSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacRipemd160Id</NAME>
#define xmlSecTransformHmacRipemd160Id		xmlSecGnuTLSTransformHmacRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformHmacMd5Id</NAME>
#define xmlSecTransformHmacMd5Id		xmlSecGnuTLSTransformHmacMd5Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRipemd160Id</NAME>
#define xmlSecTransformRipemd160Id		xmlSecGnuTLSTransformRipemd160Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaSha1Id</NAME>
#define xmlSecTransformRsaSha1Id		xmlSecGnuTLSTransformRsaSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaPkcs1Id</NAME>
#define xmlSecTransformRsaPkcs1Id		xmlSecGnuTLSTransformRsaPkcs1Id
</MACRO>
<MACRO>
<NAME>xmlSecTransformRsaOaepId</NAME>
#define xmlSecTransformRsaOaepId		xmlSecGnuTLSTransformRsaOaepId
</MACRO>
<MACRO>
<NAME>xmlSecTransformSha1Id</NAME>
#define xmlSecTransformSha1Id			xmlSecGnuTLSTransformSha1Id
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppInit</NAME>
#define xmlSecCryptoAppInit			xmlSecGnuTLSAppInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppShutdown</NAME>
#define xmlSecCryptoAppShutdown			xmlSecGnuTLSAppShutdown
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrInit</NAME>
#define xmlSecCryptoAppSimpleKeysMngrInit	xmlSecGnuTLSAppSimpleKeysMngrInit
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrAdoptKey</NAME>
#define xmlSecCryptoAppSimpleKeysMngrAdoptKey	xmlSecGnuTLSAppSimpleKeysMngrAdoptKey
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrLoad</NAME>
#define xmlSecCryptoAppSimpleKeysMngrLoad	xmlSecGnuTLSAppSimpleKeysMngrLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppSimpleKeysMngrSave</NAME>
#define xmlSecCryptoAppSimpleKeysMngrSave	xmlSecGnuTLSAppSimpleKeysMngrSave
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrPemCertLoad</NAME>
#define xmlSecCryptoAppKeysMngrPemCertLoad	xmlSecGnuTLSAppKeysMngrPemCertLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeysMngrAddCertsPath</NAME>
#define xmlSecCryptoAppKeysMngrAddCertsPath	xmlSecGnuTLSAppKeysMngrAddCertsPath
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPemKeyLoad</NAME>
#define xmlSecCryptoAppPemKeyLoad		xmlSecGnuTLSAppPemKeyLoad
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppPkcs12Load</NAME>
#define xmlSecCryptoAppPkcs12Load		xmlSecGnuTLSAppPkcs12Load
</MACRO>
<MACRO>
<NAME>xmlSecCryptoAppKeyPemCertLoad</NAME>
#define xmlSecCryptoAppKeyPemCertLoad		xmlSecGnuTLSAppKeyPemCertLoad
</MACRO>
