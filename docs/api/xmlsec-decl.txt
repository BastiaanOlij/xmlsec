<FUNCTION>
<NAME>xmlSecBase64CtxCreate</NAME>
<RETURNS>xmlSecBase64CtxPtr  </RETURNS>
int encode,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBase64CtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxInit</NAME>
<RETURNS>int  </RETURNS>
xmlSecBase64CtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxUpdate</NAME>
<RETURNS>int  </RETURNS>
xmlSecBase64CtxPtr ctx,const unsigned char *in,size_t inLen,unsigned char *out,size_t outLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64CtxFinal</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBase64CtxPtr ctx,unsigned char *out,size_t outLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64Encode</NAME>
<RETURNS>xmlChar *</RETURNS>
const unsigned char *buf,size_t len,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBase64Decode</NAME>
<RETURNS>int 	</RETURNS>
const xmlChar* str,unsigned char *buf,size_t len
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecBufferedTransformId</NAME>
typedef const struct _xmlSecBufferedTransformIdStruct	*xmlSecBufferedTransformId;
</TYPEDEF>
<USER_FUNCTION>
<NAME>xmlSecBufferedProcessMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecBufferedTransformPtr transform,
						 xmlBufferPtr buffer
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecBufferedTransformIdStruct</NAME>
struct xmlSecBufferedTransformIdStruct {
    /* same as xmlSecTransformId */    
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;
    
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;
    
    /* xmlSecBinTransform data/methods */
    xmlSecKeyValueId			keyId;
    xmlSecKeyValueType			encryption;
    xmlSecKeyValueType			decryption;
    xmlSecBinTransformSubType		binSubType;
            
    xmlSecBinTransformAddKeyMethod	addBinKey;
    xmlSecBinTransformReadMethod	readBin;
    xmlSecBinTransformWriteMethod	writeBin;
    xmlSecBinTransformFlushMethod	flushBin;    
    
    /* xmlSecBufferedTransform data/methods */
    xmlSecBufferedProcessMethod		bufferedProcess;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecBufferedTransform</NAME>
struct xmlSecBufferedTransform {	
    /* same as for xmlSecTransform but id type changed */
    xmlSecBufferedTransformId		id;    
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
    
    /* xmlSecBinTransform specific */
    int					encode;
    xmlSecBinTransformPtr		next;
    xmlSecBinTransformPtr		prev;   
    void				*binData;
    
    /* xmlSecBufferedTransform specific */
    xmlBufferPtr			buffer;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecBufferedTransformRead</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferedTransformWrite</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferedTransformFlush</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferedDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecBufferedTransformPtr buffered
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferedProcess</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,xmlBufferPtr buffer
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecCipherTransformId</NAME>
typedef const struct _xmlSecCipherTransformIdStruct	*xmlSecCipherTransformId;
</TYPEDEF>
<USER_FUNCTION>
<NAME>xmlSecCipherGenerateIvMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecCipherTransformPtr transform
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecCipherInitMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecCipherTransformPtr transform
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecCipherUpdateMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecCipherTransformPtr transform,
						 const unsigned char *buffer,
						 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecCipherFinalMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecCipherTransformPtr transform
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecCipherTransformIdStruct</NAME>
struct xmlSecCipherTransformIdStruct {
    /* same as xmlSecTransformId */    
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;
    
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;
    
    /* xmlSecBinTransform data/methods */
    xmlSecKeyValueId			keyId;
    xmlSecKeyValueType			encryption;
    xmlSecKeyValueType			decryption;
    xmlSecBinTransformSubType		binSubType;
            
    xmlSecBinTransformAddKeyMethod	addBinKey;
    xmlSecBinTransformReadMethod	readBin;
    xmlSecBinTransformWriteMethod	writeBin;
    xmlSecBinTransformFlushMethod	flushBin;    
    
    /* xmlSecCipherTransform data/methods */
    xmlSecCipherGenerateIvMethod	cipherGenerateIv;
    xmlSecCipherInitMethod		cipherInit;
    xmlSecCipherUpdateMethod		cipherUpdate;
    xmlSecCipherFinalMethod		cipherFinal;
    size_t				keySize;
    size_t				ivSize;
    size_t				bufInSize;
    size_t				bufOutSize;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecCipherTransform</NAME>
struct xmlSecCipherTransform {	
    /* same as for xmlSecTransform but id type changed */
    xmlSecCipherTransformId		id;    
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
    
    /* xmlSecBinTransform specific */
    int					encode;
    xmlSecCipherTransformPtr		next;
    xmlSecCipherTransformPtr		prev;   
    void				*binData;
    
    /* xmlSecCipherTransform specific */
    unsigned char			*bufIn;
    unsigned char			*bufOut;
    unsigned char			*iv;
    size_t				ivPos;
    void				*cipherData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecCipherTransformRead</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherTransformWrite</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherTransformFlush</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherGenerateIv</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherInit</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherUpdate</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherFinal</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCryptoInit</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCryptoShutdown</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCryptoAppInit</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCryptoAppShutdown</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCryptoAppKeysMngrCreate</NAME>
<RETURNS>xmlSecKeysMngrPtr  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysMngrLoadPemKey</NAME>
<RETURNS>xmlSecKeyPtr  </RETURNS>
xmlSecKeysMngrPtr mngr,const char *keyfile,const char *keyPwd,int privateKey
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTimerInit</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTimerStart</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTimerEnd</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTimerGet</NAME>
<RETURNS>double  </RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecDigestTransformId</NAME>
typedef const struct _xmlSecDigestTransformIdStruct	*xmlSecDigestTransformId;
</TYPEDEF>
<USER_FUNCTION>
<NAME>xmlSecDigestUpdateMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecDigestTransformPtr transform,
						 const unsigned char *buffer,
						 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecDigestSignMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecDigestTransformPtr transform,
						 unsigned char **buffer,
						 size_t *size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecDigestVerifyMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecDigestTransformPtr transform,
						 const unsigned char *buffer,
						 size_t size
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecDigestTransformIdStruct</NAME>
struct xmlSecDigestTransformIdStruct {
    /* same as xmlSecTransformId */    
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;
    
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;
    
    /* xmlSecBinTransform data/methods */
    xmlSecKeyValueId			keyId;
    xmlSecKeyValueType			encryption;
    xmlSecKeyValueType			decryption;
    xmlSecBinTransformSubType		binSubType;
            
    xmlSecBinTransformAddKeyMethod	addBinKey;
    xmlSecBinTransformReadMethod	readBin;
    xmlSecBinTransformWriteMethod	writeBin;
    xmlSecBinTransformFlushMethod	flushBin;    
    
    /* xmlSecDigestTransform data/methods */
    xmlSecDigestUpdateMethod		digestUpdate;
    xmlSecDigestSignMethod		digestSign;
    xmlSecDigestVerifyMethod		digestVerify;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecDigestTransform</NAME>
struct xmlSecDigestTransform {	
    /* same as for xmlSecTransform but id type changed */
    xmlSecDigestTransformId		id;    
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
    
    /* xmlSecBinTransform specific */
    int					encode;
    xmlSecDigestTransformPtr		next;
    xmlSecDigestTransformPtr		prev;   
    void				*binData;
    
    /* xmlSecDigestTransform specific */
    int					pushModeEnabled;
    unsigned char			*digest;
    size_t				digestSize;
    void 				*digestData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecDigestSignNode</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlNodePtr valueNode,int removeOldContent
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestVerifyNode</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const xmlNodePtr valueNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestSetPushMode</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform,int enabled
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestUpdate</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestSign</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,unsigned char **buffer,size_t *size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestVerify</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestTransformRead</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestTransformWrite</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDigestTransformFlush</NAME>
<RETURNS>int  </RETURNS>
xmlSecBinTransformPtr transform
</FUNCTION>
<MACRO>
<NAME>XMLSEC_ERRORS_R_MALLOC_FAILED</NAME>
#define XMLSEC_ERRORS_R_MALLOC_FAILED		 1 	
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XMLSEC_FAILED</NAME>
#define XMLSEC_ERRORS_R_XMLSEC_FAILED		 2
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CRYPTO_FAILED</NAME>
#define XMLSEC_ERRORS_R_CRYPTO_FAILED		 3
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XML_FAILED</NAME>
#define XMLSEC_ERRORS_R_XML_FAILED		 4
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XSLT_FAILED</NAME>
#define XMLSEC_ERRORS_R_XSLT_FAILED		 5
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_IO_FAILED</NAME>
#define XMLSEC_ERRORS_R_IO_FAILED		 6
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_XMLSEC_OBJECT_FAILED</NAME>
#define XMLSEC_ERRORS_R_XMLSEC_OBJECT_FAILED	 7
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM	 10
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM_DATA	 11
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TRANSFORM_OR_KEY</NAME>
#define XMLSEC_ERRORS_R_INVALID_TRANSFORM_OR_KEY 12
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY		 13
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_DATA	 14
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_SIZE</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_SIZE	 15
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_KEY_ORIGIN</NAME>
#define XMLSEC_ERRORS_R_INVALID_KEY_ORIGIN	 16
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_KEY_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_KEY_NOT_FOUND		 17
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_SIZE</NAME>
#define XMLSEC_ERRORS_R_INVALID_SIZE		 18
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_DATA</NAME>
#define XMLSEC_ERRORS_R_INVALID_DATA		 19
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_ID</NAME>
#define XMLSEC_ERRORS_R_INVALID_ID		 20
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_TYPE</NAME>
#define XMLSEC_ERRORS_R_INVALID_TYPE		 21
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_USAGE</NAME>
#define XMLSEC_ERRORS_R_INVALID_USAGE		 22
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE	 	 23
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODESET</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODESET	 	 24
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE_CONTENT</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE_CONTENT	 25
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_INVALID_NODE_ATTRIBUTE</NAME>
#define XMLSEC_ERRORS_R_INVALID_NODE_ATTRIBUTE	 26
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_NODE_ALREADY_PRESENT</NAME>
#define XMLSEC_ERRORS_R_NODE_ALREADY_PRESENT	 27
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_SAME_DOCUMENT_REQUIRED</NAME>
#define XMLSEC_ERRORS_R_SAME_DOCUMENT_REQUIRED	 28
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_NODE_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_NODE_NOT_FOUND 	 	 29
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_MAX_RETRIEVALS_LEVEL</NAME>
#define XMLSEC_ERRORS_R_MAX_RETRIEVALS_LEVEL	 30
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_VERIFY_FAILED</NAME>
#define XMLSEC_ERRORS_R_CERT_VERIFY_FAILED	 41
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_NOT_FOUND</NAME>
#define XMLSEC_ERRORS_R_CERT_NOT_FOUND		 42
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_REVOKED</NAME>
#define XMLSEC_ERRORS_R_CERT_REVOKED		 43
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_ISSUER_FAILED</NAME>
#define XMLSEC_ERRORS_R_CERT_ISSUER_FAILED	 44
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_NOT_YET_VALID</NAME>
#define XMLSEC_ERRORS_R_CERT_NOT_YET_VALID	 45
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_CERT_HAS_EXPIRED</NAME>
#define XMLSEC_ERRORS_R_CERT_HAS_EXPIRED	 46
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_DSIG_INVALID_REFERENCE</NAME>
#define XMLSEC_ERRORS_R_DSIG_INVALID_REFERENCE 	 51
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_ASSERTION</NAME>
#define XMLSEC_ERRORS_R_ASSERTION		 100
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_R_DISABLED</NAME>
#define XMLSEC_ERRORS_R_DISABLED		 101
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecErrorsCallback</NAME>
<RETURNS>void </RETURNS>
const char* file, int line, 
				    		 const char* func,
						 int reason, const char* msg
</USER_FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsSetCallback</NAME>
<RETURNS>void  </RETURNS>
xmlSecErrorsCallback callback
</FUNCTION>
<FUNCTION>
<NAME>xmlSecErrorsDefaultCallback</NAME>
<RETURNS>void  </RETURNS>
const char* file, int line,const char* func,int reason, const char* msg
</FUNCTION>
<VARIABLE>
<NAME>xmlSecPrintErrorMessages</NAME>
extern int xmlSecPrintErrorMessages;
</VARIABLE>
<MACRO>
<NAME>XMLSEC_ERRORS_HERE</NAME>
#define XMLSEC_ERRORS_HERE			__FILE__,__LINE__,__FUNCTION__
</MACRO>
<FUNCTION>
<NAME>xmlSecError</NAME>
<RETURNS>void  </RETURNS>
const char* file, int line,const char* func,int reason, const char* msg,...
</FUNCTION>
<MACRO>
<NAME>xmlSecAssert</NAME>
#define xmlSecAssert( p ) \
	if(!( p ) ) { \
	    xmlSecError(XMLSEC_ERRORS_HERE, \
			XMLSEC_ERRORS_R_ASSERTION, \
			"%s", #p); \
	    return; \
	} 
</MACRO>
<MACRO>
<NAME>xmlSecAssert2</NAME>
#define xmlSecAssert2( p, ret ) \
	if(!( p ) ) { \
	    xmlSecError(XMLSEC_ERRORS_HERE, \
			XMLSEC_ERRORS_R_ASSERTION, \
			"%s", #p); \
	    return(ret); \
	} 
</MACRO>
<MACRO>
<NAME>XMLSEC_ERRORS_BUFFER_SIZE</NAME>
#define XMLSEC_ERRORS_BUFFER_SIZE	1024
</MACRO>
<VARIABLE>
<NAME>xmlSecInputUri</NAME>
extern xmlSecTransformId xmlSecInputUri;
</VARIABLE>
<FUNCTION>
<NAME>xmlSecIOInit</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecIOShutdown</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecInputUriTransformOpen</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,const char *uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCleanupInputCallbacks</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecRegisterDefaultInputCallbacks</NAME>
<RETURNS>void 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecRegisterInputCallbacks</NAME>
<RETURNS>int  </RETURNS>
xmlInputMatchCallback matchFunc,xmlInputOpenCallback openFunc,xmlInputReadCallback readFunc,xmlInputCloseCallback closeFunc
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoNodeRead</NAME>
<RETURNS>xmlSecKeyPtr  </RETURNS>
xmlNodePtr keyInfoNode,xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoNodeWrite</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr keyInfoNode,xmlSecKeysMngrCtxPtr keysMngrCtx,xmlSecKeyPtr key,xmlSecKeyValueType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddKeyName</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddKeyValue</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddX509Data</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddRetrievalMethod</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecRetrievalMethodAddTransform</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr retrMethod,xmlSecTransformId transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoAddEncryptedKey</NAME>
<RETURNS>xmlNodePtr  </RETURNS>
xmlNodePtr keyInfoNode,const xmlChar *id,const xmlChar *type,const xmlChar *recipient
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoReadAESKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** key,size_t* keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoWriteAESKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* key,size_t keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoReadDESKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** key,size_t* keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoWriteDESKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* key,size_t keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoReadHMACKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** key,size_t* keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoWriteHMACKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* key,size_t keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoReadDSAKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** pValue, size_t* pSize,unsigned char** qValue, size_t* qSize,unsigned char** gValue, size_t* gSize,unsigned char** xValue, size_t* xSize,unsigned char** yValue, size_t* ySize,unsigned char** jValue, size_t* jSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoWriteDSAKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* pValue, size_t pSize,const unsigned char* qValue, size_t qSize,const unsigned char* gValue, size_t gSize,const unsigned char* xValue, size_t xSize,const unsigned char* yValue, size_t ySize,const unsigned char* jValue, size_t jSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoReadRSAKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** modValue, size_t* modSize,unsigned char** expValue, size_t* expSize,unsigned char** privExpValue, size_t* privExpSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyInfoWriteRSAKeyValueNode</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* modValue, size_t modSize,const unsigned char* expValue, size_t expSize,const unsigned char* privExpValue, size_t privExpSize
</FUNCTION>
<MACRO>
<NAME>xmlSecKeysStoreKlassId</NAME>
#define xmlSecKeysStoreKlassId 				xmlSecKeysStoreKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecKeysStoreKlassCast</NAME>
#define xmlSecKeysStoreKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecKeysStoreKlassId, xmlSecKeysStoreKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysStoreKlassCheckCast</NAME>
#define xmlSecKeysStoreKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecKeysStoreKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecKeysStoreCast</NAME>
#define xmlSecKeysStoreCast(obj) 			xmlSecObjCastMacro((obj), xmlSecKeysStoreKlassId, xmlSecKeysStorePtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysStoreCheckCast</NAME>
#define xmlSecKeysStoreCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecKeysStoreKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecKeysStoreFindMethod</NAME>
<RETURNS>xmlSecKeyPtr </RETURNS>
xmlSecKeysStorePtr store, 
								 xmlSecKeysMngrCtxPtr keysMngrCtx
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeysStoreKlass</NAME>
struct xmlSecKeysStoreKlass {
    xmlSecObjKlass			parent;
    
    xmlSecKeysStoreFindMethod		find;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecKeysStore</NAME>
struct xmlSecKeysStore {
    xmlSecObj				parent;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeysStoreKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysStoreFind</NAME>
<RETURNS>xmlSecKeyPtr  </RETURNS>
xmlSecKeysStorePtr store,xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<MACRO>
<NAME>xmlSecSimpleKeysStoreKlassId</NAME>
#define xmlSecSimpleKeysStoreKlassId 			xmlSecSimpleKeysStoreKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecSimpleKeysStoreKlassCast</NAME>
#define xmlSecSimpleKeysStoreKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecSimpleKeysStoreKlassId, xmlSecSimpleKeysStoreKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecSimpleKeysStoreKlassCheckCast</NAME>
#define xmlSecSimpleKeysStoreKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecSimpleKeysStoreKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecSimpleKeysStoreCast</NAME>
#define xmlSecSimpleKeysStoreCast(obj) 			xmlSecObjCastMacro((obj), xmlSecSimpleKeysStoreKlassId, xmlSecSimpleKeysStorePtr)
</MACRO>
<MACRO>
<NAME>xmlSecSimpleKeysStoreCheckCast</NAME>
#define xmlSecSimpleKeysStoreCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecSimpleKeysStoreKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecSimpleKeysStoreKlass</NAME>
struct xmlSecSimpleKeysStoreKlass {
    xmlSecKeysStoreKlass		parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecSimpleKeysStore</NAME>
struct xmlSecSimpleKeysStore {
    xmlSecKeysStore			parent;
    
    xmlSecListPtr			keys;    
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreAddKey</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSimpleKeysStorePtr keysMngr,xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreLoad</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSimpleKeysStorePtr keysMngr,const char *uri,int strict
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSimpleKeysStoreSave</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSimpleKeysStorePtr keysMngr,const char *filename
</FUNCTION>
<ENUM>
<NAME>xmlSecKeyUsages</NAME>
typedef enum  {
    xmlSecKeyUsageUnknown		= 0x0000,
    xmlSecKeyUsageSign			= 0x0001,
    xmlSecKeyUsageVerify		= 0x0002,
    xmlSecKeyUsageEncrypt		= 0x0004,
    xmlSecKeyUsageDecrypt		= 0x0008,
    xmlSecKeyUsageAny			= 0xFFFF
} xmlSecKeyUsages;
</ENUM>
<TYPEDEF>
<NAME>xmlSecKeyUsage</NAME>
typedef unsigned long			xmlSecKeyUsage;
</TYPEDEF>
<ENUM>
<NAME>xmlSecKeyOrigins</NAME>
typedef enum {
    xmlSecKeyOriginDefault		= 0x0000,
    xmlSecKeyOriginKeyManager		= 0x0001,
    xmlSecKeyOriginKeyName		= 0x0002,
    xmlSecKeyOriginKeyValue		= 0x0004,
    xmlSecKeyOriginRetrievalDocument	= 0x0008,
    xmlSecKeyOriginRetrievalRemote	= 0x0010,
    xmlSecKeyOriginX509			= 0x0020,
    xmlSecKeyOriginPGP			= 0x0040,
    xmlSecKeyOriginEncryptedKey		= 0x0080,
    xmlSecKeyOriginAll			= 0xFFFF
} xmlSecKeyOrigins;
</ENUM>
<TYPEDEF>
<NAME>xmlSecKeyOrigin</NAME>
typedef long				xmlSecKeyOrigin;
</TYPEDEF>
<STRUCT>
<NAME>xmlSecKey</NAME>
struct xmlSecKey {
    xmlSecKeyValuePtr		value;
    xmlChar*			name;
    xmlSecKeyUsage		usage;
    xmlSecKeyOrigin		origin;

    xmlSecX509DataPtr		x509Data;
    xmlSecPgpDataPtr		pgpData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyCreate</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
xmlSecKeyValuePtr value,const xmlChar* name
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDuplicate</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
xmlSecKeyPtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyCheck</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,const xmlChar *name,xmlSecKeyValueId id,xmlSecKeyValueType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyPtr key,FILE *output
</FUNCTION>
<MACRO>
<NAME>xmlSecKeysMngrKlassId</NAME>
#define xmlSecKeysMngrKlassId 				xmlSecKeysMngrKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrKlassCast</NAME>
#define xmlSecKeysMngrKlassCast(klass) 			xmlSecObjKlassCastMacro((klass), xmlSecKeysMngrKlassId, xmlSecKeysMngrKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrKlassCheckCast</NAME>
#define xmlSecKeysMngrKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecKeysMngrKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCast</NAME>
#define xmlSecKeysMngrCast(obj) 			xmlSecObjCastMacro((obj), xmlSecKeysMngrKlassId, xmlSecKeysMngrPtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCheckCast</NAME>
#define xmlSecKeysMngrCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecKeysMngrKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecKeysMngrGetKeyMethod</NAME>
<RETURNS>xmlSecKeyPtr </RETURNS>
xmlSecKeysMngrPtr keysMngr, 
								 xmlSecKeysMngrCtxPtr keysMngrCtx,
								 xmlNodePtr keyInfoNode
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeysMngrKlass</NAME>
struct xmlSecKeysMngrKlass {
    xmlSecObjKlass			parent;

    xmlSecKeysMngrGetKeyMethod		getKey;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecKeysMngr</NAME>
struct xmlSecKeysMngr {
    xmlSecObj				parent;

    xmlSecKeysStorePtr			keysStore;
    xmlSecX509StorePtr			x509Store;
    xmlSecPgpStorePtr			pgpStore;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeysMngrKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrGetKey</NAME>
<RETURNS>xmlSecKeyPtr  </RETURNS>
xmlSecKeysMngrPtr keysMngr,xmlSecKeysMngrCtxPtr keysMngrCtx,xmlNodePtr keyInfoNode
</FUNCTION>
<MACRO>
<NAME>xmlSecKeysMngrCtxKlassId</NAME>
#define xmlSecKeysMngrCtxKlassId 			xmlSecKeysMngrCtxKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCtxKlassCast</NAME>
#define xmlSecKeysMngrCtxKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecKeysMngrCtxKlassId, xmlSecKeysMngrCtxKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCtxKlassCheckCast</NAME>
#define xmlSecKeysMngrCtxKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecKeysMngrCtxKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCtxCast</NAME>
#define xmlSecKeysMngrCtxCast(obj) 			xmlSecObjCastMacro((obj), xmlSecKeysMngrCtxKlassId, xmlSecKeysMngrCtxPtr)
</MACRO>
<MACRO>
<NAME>xmlSecKeysMngrCtxCheckCast</NAME>
#define xmlSecKeysMngrCtxCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecKeysMngrCtxKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecKeysMngrCtxKlass</NAME>
struct xmlSecKeysMngrCtxKlass {
    xmlSecObjKlass			parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecKeysMngrCtx</NAME>
struct xmlSecKeysMngrCtx {
    xmlSecObj				parent;
    
    xmlSecKeysMngrPtr			keysMngr;

    /* restrictions */
    xmlSecKeyOrigin 			allowedOrigins;
    int 				maxRetrievalsLevel;
    int					maxEncKeysLevel; 
    time_t				certsVerificationTime;

    /* desired key */
    xmlSecKeyValueId			keyId;
    xmlSecKeyValueType			keyType;
    xmlSecKeyUsage			keyUsage;
    xmlChar*				keyName;
    
    /* current state */
    int 				curRetrievalsLevel;
    int					curEncKeysLevel; 
    xmlSecKeyPtr			curKey;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxCreate</NAME>
<RETURNS>xmlSecKeysMngrCtxPtr  </RETURNS>
xmlSecKeysMngrPtr keysMngr
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxCheckOrigin</NAME>
<RETURNS>int  </RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx,xmlSecKeyOrigin origin
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxCheckRetrievalsLevel</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxCheckEncKeysLevel</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeysMngrCtxSetCurKey</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx,xmlSecKeyPtr key
</FUNCTION>
<VARIABLE>
<NAME>xmlSecMemBuf</NAME>
extern xmlSecTransformId xmlSecMemBuf;
</VARIABLE>
<FUNCTION>
<NAME>xmlSecMemBufTransformGetBuffer</NAME>
<RETURNS>xmlBufferPtr 	</RETURNS>
xmlSecTransformPtr transform,int removeBuffer
</FUNCTION>
<ENUM>
<NAME>xmlSecNodeSetType</NAME>
typedef enum {
    xmlSecNodeSetNormal = 0,
    xmlSecNodeSetInvert,
    xmlSecNodeSetTree,
    xmlSecNodeSetTreeWithoutComments, 
    xmlSecNodeSetTreeInvert,
    xmlSecNodeSetTreeWithoutCommentsInvert,
    xmlSecNodeSetList
} xmlSecNodeSetType;
</ENUM>
<ENUM>
<NAME>xmlSecNodeSetOp</NAME>
typedef enum {
    xmlSecNodeSetIntersection = 0,
    xmlSecNodeSetSubtraction,
    xmlSecNodeSetUnion
} xmlSecNodeSetOp;
</ENUM>
<STRUCT>
<NAME>xmlSecNodeSet</NAME>
struct xmlSecNodeSet {
    xmlNodeSetPtr	nodes;
    xmlDocPtr		doc;
    xmlSecNodeSetType	type;
    xmlSecNodeSetOp	op;
    xmlSecNodeSetPtr	next;
    xmlSecNodeSetPtr	prev;
    xmlSecNodeSetPtr	children;
};
</STRUCT>
<USER_FUNCTION>
<NAME>xmlSecNodeSetWalkCallback</NAME>
<RETURNS>int </RETURNS>
xmlSecNodeSetPtr nset,
							 xmlNodePtr cur,
							 xmlNodePtr parent,
							 void* data
</USER_FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetCreate</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlDocPtr doc,xmlNodeSetPtr nodes,xmlSecNodeSetType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecNodeSetPtr nset
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetContains</NAME>
<RETURNS>int 	</RETURNS>
xmlSecNodeSetPtr nset,xmlNodePtr node,xmlNodePtr parent
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetAdd</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetPtr newNSet,xmlSecNodeSetOp op
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetAddList</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetPtr newNSet,xmlSecNodeSetOp op
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetGetChildren</NAME>
<RETURNS>xmlSecNodeSetPtr 	</RETURNS>
xmlDocPtr doc,const xmlNodePtr parent,int withComments,int invert
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetWalk</NAME>
<RETURNS>int 	</RETURNS>
xmlSecNodeSetPtr nset,xmlSecNodeSetWalkCallback walkFunc,void* data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecNodeSetDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecNodeSetPtr nset,FILE *output
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecTransformId</NAME>
typedef const struct _xmlSecTransformIdStruct xmlSecTransformIdStruct, *xmlSecTransformId;
</TYPEDEF>
<MACRO>
<NAME>xmlSecTransformUnknown</NAME>
#define xmlSecTransformUnknown			NULL
</MACRO>
<ENUM>
<NAME>xmlSecTransformStatus</NAME>
typedef enum  {
    xmlSecTransformStatusNone = 0,
    xmlSecTransformStatusOk,
    xmlSecTransformStatusFail
} xmlSecTransformStatus;
</ENUM>
<VARIABLE>
<NAME>xmlSecEncAes128Cbc</NAME>
extern xmlSecTransformId 		xmlSecEncAes128Cbc;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecEncAes192Cbc</NAME>
extern xmlSecTransformId 		xmlSecEncAes192Cbc;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecEncAes256Cbc</NAME>
extern xmlSecTransformId 		xmlSecEncAes256Cbc;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecKWAes128</NAME>
extern xmlSecTransformId 		xmlSecKWAes128;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecKWAes192</NAME>
extern xmlSecTransformId 		xmlSecKWAes192;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecKWAes256</NAME>
extern xmlSecTransformId 		xmlSecKWAes256;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecAesKeyValue</NAME>
extern xmlSecKeyValueId 	 	xmlSecAesKeyValue;
</VARIABLE>
<MACRO>
<NAME>XMLSEC_BASE64_LINESIZE</NAME>
#define XMLSEC_BASE64_LINESIZE			64
</MACRO>
<VARIABLE>
<NAME>xmlSecEncBase64Encode</NAME>
extern xmlSecTransformId 		xmlSecEncBase64Encode;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecEncBase64Decode</NAME>
extern xmlSecTransformId 		xmlSecEncBase64Decode;
</VARIABLE>
<FUNCTION>
<NAME>xmlSecBase64EncodeSetLineSize</NAME>
<RETURNS>void  </RETURNS>
xmlSecTransformPtr transform,size_t lineSize
</FUNCTION>
<VARIABLE>
<NAME>xmlSecC14NInclusive</NAME>
extern xmlSecTransformId 		xmlSecC14NInclusive;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecC14NInclusiveWithComments</NAME>
extern xmlSecTransformId 		xmlSecC14NInclusiveWithComments;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecC14NExclusive</NAME>
extern xmlSecTransformId 		xmlSecC14NExclusive;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecC14NExclusiveWithComments</NAME>
extern xmlSecTransformId 		xmlSecC14NExclusiveWithComments;
</VARIABLE>
<FUNCTION>
<NAME>xmlSecC14NExclAddInclNamespaces</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr transformNode,const xmlChar *prefixList
</FUNCTION>
<VARIABLE>
<NAME>xmlSecEncDes3Cbc</NAME>
extern xmlSecTransformId 		xmlSecEncDes3Cbc;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecKWDes3Cbc</NAME>
extern xmlSecTransformId 		xmlSecKWDes3Cbc;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecDesKeyValue</NAME>
extern xmlSecKeyValueId 			xmlSecDesKeyValue;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecSignDsaSha1</NAME>
extern xmlSecTransformId 		xmlSecSignDsaSha1;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecDsaKeyValue</NAME>
extern xmlSecKeyValueId 			xmlSecDsaKeyValue;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecTransformEnveloped</NAME>
extern xmlSecTransformId 		xmlSecTransformEnveloped;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecMacHmacSha1</NAME>
extern xmlSecTransformId 		xmlSecMacHmacSha1;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecMacHmacRipeMd160</NAME>
extern xmlSecTransformId 		xmlSecMacHmacRipeMd160;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecMacHmacMd5</NAME>
extern xmlSecTransformId 		xmlSecMacHmacMd5;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecHmacKeyValue</NAME>
extern xmlSecKeyValueId 			xmlSecHmacKeyValue;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecDigestRipemd160</NAME>
extern xmlSecTransformId 		xmlSecDigestRipemd160;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecSignRsaSha1</NAME>
extern xmlSecTransformId 		xmlSecSignRsaSha1;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecEncRsaPkcs1</NAME>
extern xmlSecTransformId 		xmlSecEncRsaPkcs1;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecEncRsaOaep</NAME>
extern xmlSecTransformId 		xmlSecEncRsaOaep;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecRsaKeyValue</NAME>
extern xmlSecKeyValueId		xmlSecRsaKeyValue;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecDigestSha1</NAME>
extern xmlSecTransformId 		xmlSecDigestSha1;
</VARIABLE>
<ENUM>
<NAME>xmlSecXPath2TransformType</NAME>
typedef enum {
    xmlSecXPathTransformIntersect = 0,
    xmlSecXPathTransformSubtract,
    xmlSecXPathTransformUnion
} xmlSecXPath2TransformType;
</ENUM>
<VARIABLE>
<NAME>xmlSecTransformXPath</NAME>
extern xmlSecTransformId 		xmlSecTransformXPath;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecTransformXPath2</NAME>
extern xmlSecTransformId 		xmlSecTransformXPath2;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecTransformXPointer</NAME>
extern xmlSecTransformId 		xmlSecTransformXPointer;
</VARIABLE>
<VARIABLE>
<NAME>xmlSecTransformXslt</NAME>
extern xmlSecTransformId 		xmlSecTransformXslt;
</VARIABLE>
<FUNCTION>
<NAME>xmlSecTransformHmacAddOutputLength</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr transformNode,size_t bitsLen
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformRsaOaepAddParam</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr transformNode,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPathAdd</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr transformNode,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPath2Add</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr transformNode,xmlSecXPath2TransformType type,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXPointerAdd</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr transformNode,const xmlChar *expression,const xmlChar **namespaces
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformXsltAdd</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr transformNode,const xmlChar *xslt
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsRegister</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsRegisterDefault</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsUnregisterAll</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformIdsFindByHref</NAME>
<RETURNS>xmlSecTransformId 	</RETURNS>
const xmlChar *href
</FUNCTION>
<MACRO>
<NAME>xmlSecUsageAny</NAME>
#define xmlSecUsageAny				0
</MACRO>
<MACRO>
<NAME>xmlSecUsageDSigC14N</NAME>
#define xmlSecUsageDSigC14N			1
</MACRO>
<MACRO>
<NAME>xmlSecUsageDSigTransform</NAME>
#define xmlSecUsageDSigTransform		2
</MACRO>
<MACRO>
<NAME>xmlSecUsageDSigDigest</NAME>
#define xmlSecUsageDSigDigest			4
</MACRO>
<MACRO>
<NAME>xmlSecUsageDSigSignature</NAME>
#define xmlSecUsageDSigSignature		8
</MACRO>
<MACRO>
<NAME>xmlSecUsageEncryptionMethod</NAME>
#define xmlSecUsageEncryptionMethod		16
</MACRO>
<TYPEDEF>
<NAME>xmlSecTransformUsage</NAME>
typedef unsigned long 				xmlSecTransformUsage;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecBinTransformId</NAME>
typedef const struct _xmlSecBinTransformIdStruct *xmlSecBinTransformId;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecXmlTransformId</NAME>
typedef const struct _xmlSecXmlTransformIdStruct *xmlSecXmlTransformId;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecC14NTransformId</NAME>
typedef const struct _xmlSecC14NTransformIdStruct *xmlSecC14NTransformId;
</TYPEDEF>
<ENUM>
<NAME>xmlSecTransformType</NAME>
typedef enum  {
    xmlSecTransformTypeBinary,
    xmlSecTransformTypeXml,
    xmlSecTransformTypeC14N
} xmlSecTransformType;
</ENUM>
<ENUM>
<NAME>xmlSecBinTransformSubType</NAME>
typedef enum {
    xmlSecBinTransformSubTypeNone = 0,
    xmlSecBinTransformSubTypeDigest,
    xmlSecBinTransformSubTypeCipher,
    xmlSecBinTransformSubTypeBuffered
} xmlSecBinTransformSubType;
</ENUM>
<ENUM>
<NAME>xmlSecTransformResult</NAME>
typedef enum {
    xmlSecTransformResultBinary,
    xmlSecTransformResultXml
} xmlSecTransformResult;
</ENUM>
<STRUCT>
<NAME>xmlSecTransformState</NAME>
struct xmlSecTransformState {
    /* initial state */
    xmlDocPtr				initDoc;
    xmlSecNodeSetPtr			initNodeSet;
    char				*initUri;

    /* current state: xml */    
    xmlDocPtr				curDoc;	
    xmlSecNodeSetPtr			curNodeSet;
    
    /* current state: binary */
    xmlBufferPtr			curBuf;	
    xmlSecTransformPtr			curFirstBinTransform; 
    xmlSecTransformPtr			curLastBinTransform; 

    /*  optimization: special case for c14n transforms */
    xmlSecTransformPtr			curC14NTransform; 
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecTransformStateCreate</NAME>
<RETURNS>xmlSecTransformStatePtr 	</RETURNS>
xmlDocPtr doc,xmlSecNodeSetPtr nodeSet,const char *uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformStateDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformStatePtr state
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformStateUpdate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformStatePtr state,xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformStateFinal</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformStatePtr state,xmlSecTransformResult type
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformCreateMethod</NAME>
<RETURNS>xmlSecTransformPtr </RETURNS>
xmlSecTransformId id
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformDestroyMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecTransformPtr transform
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecTransformReadNodeMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecTransformPtr transform,
							   xmlNodePtr transformNode
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecTransformIdStruct</NAME>
struct xmlSecTransformIdStruct {
    /* data */
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;

    /* methods */
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecTransform</NAME>
struct xmlSecTransform {
    xmlSecTransformId 			id; 
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
};
</STRUCT>
<MACRO>
<NAME>xmlSecTransformIsValid</NAME>
#define xmlSecTransformIsValid(transform) \
	((( transform ) != NULL) && ((( transform )->id) != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecTransformCheckType</NAME>
#define xmlSecTransformCheckType(transform, t) \
 	(xmlSecTransformIsValid(( transform )) && \
	((( transform )->id->type) == ( t )))
</MACRO>
<MACRO>
<NAME>xmlSecTransformCheckId</NAME>
#define xmlSecTransformCheckId(transform, i) \
 	(xmlSecTransformIsValid(( transform )) && \
	((((const xmlSecTransformId) (( transform )->id))) == ( i )))
</MACRO>
<FUNCTION>
<NAME>xmlSecTransformsNodeRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformStatePtr state,xmlNodePtr transformsNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformNodeRead</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlNodePtr transformNode,xmlSecTransformUsage usage,int dontDestroy
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformNodeWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr transformNode,xmlSecTransformId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformCreate</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformId id,xmlSecTransformUsage usage,int dontDestroy
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform,int forceDestroy
</FUNCTION>
<FUNCTION>
<NAME>xmlSecTransformRead</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlNodePtr transformNode
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecBinTransformAddKeyMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecBinTransformPtr transform, 
							 xmlSecKeyValuePtr key
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecBinTransformReadMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecBinTransformPtr transform, 
							 unsigned char *buf, 
							 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecBinTransformWriteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecBinTransformPtr transform, 
                                        		 const unsigned char *buf, 
							 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecBinTransformFlushMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecBinTransformPtr transform
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecBinTransformIdStruct</NAME>
struct xmlSecBinTransformIdStruct {
    /* same as xmlSecTransformId */    
    /* data */
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;

    /* methods */
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;

    /* xmlSecBinTransform data/methods */
    /* data */
    xmlSecKeyValueId			keyId;
    xmlSecKeyValueType			encryption;
    xmlSecKeyValueType			decryption;
    xmlSecBinTransformSubType		binSubType;
    
    /* methods */        
    xmlSecBinTransformAddKeyMethod	addBinKey; 
    xmlSecBinTransformReadMethod	readBin; 
    xmlSecBinTransformWriteMethod	writeBin;
    xmlSecBinTransformFlushMethod	flushBin;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecBinTransform</NAME>
struct xmlSecBinTransform {	
    /* same as for xmlSecTransform but id type changed */
    xmlSecBinTransformId 		id; 
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;

    /* xmlSecBinTransform specific */
    int					encode;
    xmlSecBinTransformPtr		next;
    xmlSecBinTransformPtr		prev;
    void				*binData;
};
</STRUCT>
<MACRO>
<NAME>xmlSecBinTransformIdCheckKeyId</NAME>
#define xmlSecBinTransformIdCheckKeyId(id, kId) \
	(((id) != NULL) && \
	 ((id)->type == xmlSecTransformTypeBinary) && \
	 (((xmlSecBinTransformId)(id))->keyId == kId))
</MACRO>
<MACRO>
<NAME>xmlSecBinTransformIdGetKeyId</NAME>
#define xmlSecBinTransformIdGetKeyId(id) \
	((((id) != NULL) && \
	 ((id)->type == xmlSecTransformTypeBinary)) ? \
	  ((xmlSecBinTransformId)(id))->keyId : \
	  xmlSecKeyValueIdUnknown)
</MACRO>
<MACRO>
<NAME>xmlSecBinTransformCheckSubType</NAME>
#define xmlSecBinTransformCheckSubType(transform, t) \
	(xmlSecTransformCheckType(( transform ), xmlSecTransformTypeBinary) && \
	((((xmlSecBinTransformId)(( transform )->id))->binSubType) == ( t )))
</MACRO>
<MACRO>
<NAME>xmlSecBinTransformIdGetEncKeyType</NAME>
#define xmlSecBinTransformIdGetEncKeyType(id) \
	((((id) != NULL) && \
	 ((id)->type == xmlSecTransformTypeBinary)) ? \
	  ((xmlSecBinTransformId)(id))->encryption : \
	  xmlSecKeyValueTypeAny)
</MACRO>
<MACRO>
<NAME>xmlSecBinTransformIdGetDecKeyType</NAME>
#define xmlSecBinTransformIdGetDecKeyType(id) \
	((((id) != NULL) && \
	 ((id)->type == xmlSecTransformTypeBinary)) ? \
	  ((xmlSecBinTransformId)(id))->decryption : \
	  xmlSecKeyValueTypeAny)
</MACRO>
<FUNCTION>
<NAME>xmlSecBinTransformAddKey</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlSecKeyValuePtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformRead</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformWrite</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformFlush</NAME>
<RETURNS>int 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformAddAfter</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformPtr curTransform,xmlSecTransformPtr newTransform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformAddBefore</NAME>
<RETURNS>xmlSecTransformPtr 	</RETURNS>
xmlSecTransformPtr curTransform,xmlSecTransformPtr newTransform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformRemove</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformDestroyAll</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBinTransformSetEncrypt</NAME>
<RETURNS>void 	</RETURNS>
xmlSecTransformPtr transform,int encrypt
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecXmlTransformExecuteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecXmlTransformPtr transform,
							 xmlDocPtr ctxDoc,
							 xmlDocPtr *doc,
							 xmlSecNodeSetPtr *nodes
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecXmlTransformIdStruct</NAME>
struct xmlSecXmlTransformIdStruct {
    /* same as xmlSecTransformId */    
    /* data */
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;

    /* methods */
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;

    
    /* xmlTransform info */
    /* method */
    xmlSecXmlTransformExecuteMethod	executeXml;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecXmlTransform</NAME>
struct xmlSecXmlTransform {
    /* same as for xmlSecTransform but id type changed */
    xmlSecXmlTransformId 		id; 
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;

    /* xmlSecXmlTransform specific */
    xmlNodePtr				here;
    void				*xmlData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecXmlTransformExecute</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlDocPtr ctxDoc,xmlDocPtr *doc,xmlSecNodeSetPtr *nodes
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecC14NTransformExecuteMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecC14NTransformPtr transform,
							 xmlDocPtr doc,
							 xmlSecNodeSetPtr nodes,
							 xmlOutputBufferPtr buffer
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecC14NTransformIdStruct</NAME>
struct xmlSecC14NTransformIdStruct {
    /* same as xmlSecTransformId */    
    /* data */
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;

    /* methods */
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;

    /* xmlC14nTransform specific */
    xmlSecC14NTransformExecuteMethod	executeC14N;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecC14NTransform</NAME>
struct xmlSecC14NTransform {
    /* same as for xmlSecTransform but id type changed */
    xmlSecC14NTransformId 		id; 
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
    
    /* xmlSecC14NTransform specific */ 
    void				*c14nData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecC14NTransformExecute</NAME>
<RETURNS>int  </RETURNS>
xmlSecTransformPtr transform,xmlDocPtr doc,xmlSecNodeSetPtr nodes,xmlOutputBufferPtr buffer
</FUNCTION>
<MACRO>
<NAME>XMLSEC_VERSION</NAME>
#define XMLSEC_VERSION			"0.0.10"
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_MAJOR</NAME>
#define XMLSEC_VERSION_MAJOR		0
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_MINOR</NAME>
#define XMLSEC_VERSION_MINOR		0
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_SUBMINOR</NAME>
#define XMLSEC_VERSION_SUBMINOR		10
</MACRO>
<MACRO>
<NAME>XMLSEC_VERSION_INFO</NAME>
#define XMLSEC_VERSION_INFO		"0:10:0"
</MACRO>
<ENUM>
<NAME>xmlSecX509ObjectType</NAME>
typedef enum {
    xmlSecX509ObjectTypeCert,
    xmlSecX509ObjectTypeVerifiedCert,
    xmlSecX509ObjectTypeTrustedCert,
    xmlSecX509ObjectTypeCrl
} xmlSecX509ObjectType;
</ENUM>
<MACRO>
<NAME>xmlSecX509DataKlassId</NAME>
#define xmlSecX509DataKlassId 				xmlSecX509DataKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecX509DataKlassCast</NAME>
#define xmlSecX509DataKlassCast(klass) 			xmlSecObjKlassCastMacro((klass), xmlSecX509DataKlassId, xmlSecX509DataKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509DataKlassCheckCast</NAME>
#define xmlSecX509DataKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecX509DataKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecX509DataCast</NAME>
#define xmlSecX509DataCast(obj) 			xmlSecObjCastMacro((obj), xmlSecX509DataKlassId, xmlSecX509DataPtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509DataCheckCast</NAME>
#define xmlSecX509DataCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecX509DataKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecX509DataAddObjectMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509DataPtr data,
								 const unsigned char* buf,
								 size_t size,
								 xmlSecX509ObjectType type
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecX509DataGetObjectMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509DataPtr data,
								 unsigned char** buf,
								 size_t* size,
								 xmlSecX509ObjectType type,
								 size_t pos
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecX509DataGetObjectNameMethod</NAME>
<RETURNS>xmlChar *</RETURNS>
xmlSecX509DataPtr data,
								 xmlSecX509ObjectType type,
								 size_t pos
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecX509DataKlass</NAME>
struct xmlSecX509DataKlass {
    xmlSecSObjKlass			parent;
    
    xmlSecX509DataAddObjectMethod	addObject;
    xmlSecX509DataGetObjectMethod	getObject;
    xmlSecX509DataGetObjectNameMethod	getObjectName;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecX509Data</NAME>
struct xmlSecX509Data {
    xmlSecSObj				parent;

};
</STRUCT>
<FUNCTION>
<NAME>xmlSecX509DataKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509DataAddObject</NAME>
<RETURNS>int  </RETURNS>
xmlSecX509DataPtr data,const unsigned char* buf,size_t size,xmlSecX509ObjectType type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509DataGetObject</NAME>
<RETURNS>int 	</RETURNS>
xmlSecX509DataPtr data,unsigned char** buf,size_t* size,xmlSecX509ObjectType type,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509DataGetObjectName</NAME>
<RETURNS>xmlChar *</RETURNS>
xmlSecX509DataPtr data,xmlSecX509ObjectType type,size_t pos
</FUNCTION>
<MACRO>
<NAME>xmlSecX509StoreKlassId</NAME>
#define xmlSecX509StoreKlassId 				xmlSecX509StoreKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreKlassCast</NAME>
#define xmlSecX509StoreKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecX509StoreKlassId, xmlSecX509StoreKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreKlassCheckCast</NAME>
#define xmlSecX509StoreKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecX509StoreKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreCast</NAME>
#define xmlSecX509StoreCast(obj) 			xmlSecObjCastMacro((obj), xmlSecX509StoreKlassId, xmlSecX509StorePtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509StoreCheckCast</NAME>
#define xmlSecX509StoreCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecX509StoreKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecX509StoreFindMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509StorePtr store, 
								 xmlSecX509DataPtr data,
								 xmlSecKeysMngrCtxPtr keysMngrCtx,
								 xmlChar *subjectName,
								 xmlChar *issuerName,
								 xmlChar *issuerSerial,
								 xmlChar *ski
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecX509StoreVerifyMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509StorePtr store, 
								 xmlSecX509DataPtr data, 
								 xmlSecKeysMngrCtxPtr keysMngrCtx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecX509StoreSetLookupFolderMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509StorePtr store,
								 const char* folder
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecX509StoreLoadPemFileMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecX509StorePtr store,
								 const char* filename,
								 xmlSecX509ObjectType type
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecX509StoreKlass</NAME>
struct xmlSecX509StoreKlass {
    xmlSecObjKlass			parent;
    
    xmlSecX509StoreFindMethod		find;
    xmlSecX509StoreVerifyMethod		verify;
    xmlSecX509StoreSetLookupFolderMethod setLookupFolder;
    xmlSecX509StoreLoadPemFileMethod	loadPemFile;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecX509Store</NAME>
struct xmlSecX509Store {
    xmlSecObj				parent;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecX509StoreKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509StoreFind</NAME>
<RETURNS>int 	</RETURNS>
xmlSecX509StorePtr store,xmlSecX509DataPtr data,xmlSecKeysMngrCtxPtr keysMngrCtx,xmlChar *subjectName,xmlChar *issuerName,xmlChar *issuerSerial,xmlChar *ski
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509StoreVerify</NAME>
<RETURNS>int 	</RETURNS>
xmlSecX509StorePtr store,xmlSecX509DataPtr data,xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509StoreSetLookupFolder</NAME>
<RETURNS>int 	</RETURNS>
xmlSecX509StorePtr store,const char* folder
</FUNCTION>
<FUNCTION>
<NAME>xmlSecX509StoreLoadPemFile</NAME>
<RETURNS>int 	</RETURNS>
xmlSecX509StorePtr store,const char* filename,xmlSecX509ObjectType type
</FUNCTION>
<MACRO>
<NAME>xmlSecX509CertificateKlassId</NAME>
#define xmlSecX509CertificateKlassId 			xmlSecX509CertificateKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecX509CertificateKlassCast</NAME>
#define xmlSecX509CertificateKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecX509CertificateKlassId, xmlSecX509CertificateKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509CertificateKlassCheckCast</NAME>
#define xmlSecX509CertificateKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecX509CertificateKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecX509CertificateCast</NAME>
#define xmlSecX509CertificateCast(obj) 			xmlSecObjCastMacro((obj), xmlSecX509CertificateKlassId, xmlSecX509CertificatePtr)
</MACRO>
<MACRO>
<NAME>xmlSecX509CertificateCheckCast</NAME>
#define xmlSecX509CertificateCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecX509CertificateKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecX509CertificateKlass</NAME>
struct xmlSecX509CertificateKlass {
    xmlSecSObjKlass			parent;
    xmlSecObjKlassPtr			x509DataKlass;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecX509Certificate</NAME>
struct xmlSecX509Certificate {
    xmlSecSObj				parent;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecX509CertificateKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecX509StorePtr</NAME>
typedef void*					*xmlSecX509StorePtr;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecX509DataPtr</NAME>
typedef void*					*xmlSecX509DataPtr;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecX509CertificatePtr</NAME>
typedef void*					*xmlSecX509CertificatePtr;
</TYPEDEF>
<STRUCT>
<NAME>xmlSecDSigCtx</NAME>
struct xmlSecDSigCtx {
    xmlSecKeysMngrCtxPtr 	keysMngrCtx;
    int				processManifests;
    int				storeSignatures;
    int				storeReferences;
    int				storeManifests;	
    int				fakeSignatures;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecDSigResult</NAME>
struct xmlSecDSigResult {
    xmlSecDSigCtxPtr		ctx;
    xmlNodePtr			self;
    int				sign;
    xmlSecTransformStatus	result;
    xmlSecTransformId		signMethod;
    xmlSecKeyPtr		key;
    xmlSecReferenceResultPtr	firstSignRef;
    xmlSecReferenceResultPtr	lastSignRef;
    xmlSecReferenceResultPtr	firstManifestRef;
    xmlSecReferenceResultPtr	lastManifestRef; 
    xmlBufferPtr		buffer;
};
</STRUCT>
<ENUM>
<NAME>xmlSecReferenceType</NAME>
typedef enum  {
    xmlSecSignedInfoReference,
    xmlSecManifestReference
} xmlSecReferenceType;
</ENUM>
<STRUCT>
<NAME>xmlSecReferenceResult</NAME>
struct xmlSecReferenceResult {
    xmlSecDSigCtxPtr		ctx;
    xmlNodePtr			self;
    xmlSecReferenceType		refType;
    xmlSecTransformStatus	result;
    xmlSecReferenceResultPtr	next;
    xmlSecReferenceResultPtr	prev;
    xmlChar			*uri;
    xmlChar			*id;
    xmlChar			*type;
    xmlSecTransformId		digestMethod;
    xmlBufferPtr		buffer;
}; 
</STRUCT>
<FUNCTION>
<NAME>xmlSecDSigCtxCreate</NAME>
<RETURNS>xmlSecDSigCtxPtr 	</RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigCtxDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecDSigCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureCreate</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlNodePtr signNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddSignedInfo</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddKeyInfo</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignatureAddObject</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signNode,const xmlChar *id,const xmlChar *mimeType,const xmlChar *encoding
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddC14NMethod</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signedInfoNode,xmlSecTransformId c14nMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddSignMethod</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signedInfoNode,xmlSecTransformId signMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSignedInfoAddReference</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr signedInfoNode,const xmlChar *id,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReferenceAddDigestMethod</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr refNode,xmlSecTransformId digestMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReferenceAddTransform</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr refNode,xmlSecTransformId transform
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjectAddSignProperties</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr objectNode,const xmlChar *id,const xmlChar *target
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjectAddManifest</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr objectNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecManifestAddReference</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr manifestNode,const xmlChar *id,const xmlChar *uri,const xmlChar *type
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigValidate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr signNode,xmlSecDSigResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigGenerate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecDSigCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr signNode,xmlSecDSigResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigResultCreate</NAME>
<RETURNS>xmlSecDSigResultPtr  </RETURNS>
xmlSecDSigCtxPtr ctx,xmlNodePtr signNode,int sign
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigResultDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigResultPtr result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigResultDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigResultPtr result,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDSigResultDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecDSigResultPtr result,FILE *output
</FUNCTION>
<STRUCT>
<NAME>xmlSecEncCtx</NAME>
struct xmlSecEncCtx {
    xmlSecKeysMngrCtxPtr 	keysMngrCtx;
    xmlSecTransformId		encryptionMethod;
    int				ignoreType;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecEncResult</NAME>
struct xmlSecEncResult {
    xmlSecEncCtxPtr		ctx;
    xmlNodePtr			self;
    int				encrypt;
    xmlChar			*id;
    xmlChar			*type;
    xmlChar			*mimeType;
    xmlChar			*encoding;
    xmlSecTransformId		encryptionMethod;
    xmlSecKeyPtr		key;
    xmlBufferPtr		buffer;
    int				replaced;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecEncCtxCreate</NAME>
<RETURNS>xmlSecEncCtxPtr 	</RETURNS>
xmlSecKeysMngrCtxPtr keysMngrCtx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncCtxDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecEncCtxPtr ctx
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncryptMemory</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr encNode,const unsigned char *buf,size_t size,xmlSecEncResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncryptUri</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr encNode,const char *uri,xmlSecEncResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncryptXmlNode</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr encNode,xmlNodePtr src,xmlSecEncResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecDecrypt</NAME>
<RETURNS>int 	</RETURNS>
xmlSecEncCtxPtr ctx,xmlSecKeyPtr key,xmlNodePtr encNode,xmlSecEncResultPtr *result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncResultCreate</NAME>
<RETURNS>xmlSecEncResultPtr  </RETURNS>
xmlSecEncCtxPtr ctx,int encrypt,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncResultDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlSecEncResultPtr result
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncResultDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncResultPtr result,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncResultDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecEncResultPtr result,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataCreate</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlChar *id,const xmlChar *type,const xmlChar *mimeType,const xmlChar *encoding
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataDestroy</NAME>
<RETURNS>void  </RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncMethod</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode,xmlSecTransformId encMethod
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddKeyInfo</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncProperties</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode,const xmlChar *id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddEncProperty</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode,const xmlChar *id,const xmlChar *target
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddCipherValue</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecEncDataAddCipherReference</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode,const xmlChar *uri
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCipherReferenceAddTransform</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr encNode,xmlSecTransformId transform
</FUNCTION>
<MACRO>
<NAME>extern</NAME>
#        define extern __declspec(dllexport) extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define  extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern __declspec(dllimport) extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#        define extern extern
</MACRO>
<MACRO>
<NAME>extern</NAME>
#    define extern extern
</MACRO>
<FUNCTION>
<NAME>xmlSecInit</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecShutdown</NAME>
<RETURNS>int 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>ATTRIBUTE_UNUSED</NAME>
#define ATTRIBUTE_UNUSED
</MACRO>
<MACRO>
<NAME>ATTRIBUTE_UNUSED</NAME>
#define ATTRIBUTE_UNUSED
</MACRO>
<FUNCTION>
<NAME>xmlSecParseFile</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const char *filename
</FUNCTION>
<FUNCTION>
<NAME>xmlSecParseMemory</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const unsigned char *buffer,size_t size,int recovery
</FUNCTION>
<FUNCTION>
<NAME>xmlSecParseMemoryExt</NAME>
<RETURNS>xmlDocPtr 	</RETURNS>
const unsigned char *prefix,size_t prefixSize,const unsigned char *buffer,size_t bufferSize,const unsigned char *postfix,size_t postfixSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecCheckNodeName</NAME>
<RETURNS>int 	</RETURNS>
const xmlNodePtr cur,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecGetNextElementNode</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr cur
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindChild</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindParent</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr cur,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecFindNode</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
const xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddChild</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr parent,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddNextSibling</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr node,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddPrevSibling</NAME>
<RETURNS>xmlNodePtr 	</RETURNS>
xmlNodePtr node,const xmlChar *name,const xmlChar *ns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceNode</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,xmlNodePtr newNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceContent</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,xmlNodePtr newNode
</FUNCTION>
<FUNCTION>
<NAME>xmlSecReplaceNodeBuffer</NAME>
<RETURNS>int 	</RETURNS>
xmlNodePtr node,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecGetBase64NodeContent</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,unsigned char** data,size_t* dataSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSetBase64NodeContent</NAME>
<RETURNS>int  </RETURNS>
xmlNodePtr node,const unsigned char* data,size_t dataSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecAddIDs</NAME>
<RETURNS>void 	</RETURNS>
xmlDocPtr doc,xmlNodePtr cur,const xmlChar** ids
</FUNCTION>
<MACRO>
<NAME>xmlSecIsHex</NAME>
#define xmlSecIsHex(c) \
    (( (('0' <= (c)) && ((c) <= '9')) || \
       (('a' <= (c)) && ((c) <= 'f')) || \
       (('A' <= (c)) && ((c) <= 'F')) ) ? 1 : 0)
</MACRO>
<MACRO>
<NAME>xmlSecGetHex</NAME>
#define xmlSecGetHex(c) \
    ( (('0' <= (c)) && ((c) <= '9')) ? (c) - '0' : \
    ( (('a' <= (c)) && ((c) <= 'f')) ? (c) - 'a' + 10 :  \
    ( (('A' <= (c)) && ((c) <= 'F')) ? (c) - 'A' + 10 : 0 )))
</MACRO>
<TYPEDEF>
<NAME>xmlSecKeyValueId</NAME>
typedef const struct _xmlSecKeyValueIdStruct	*xmlSecKeyValueId; 
</TYPEDEF>
<ENUM>
<NAME>xmlSecKeyValueType</NAME>
typedef enum  {
    xmlSecKeyValueTypePublic = 0,
    xmlSecKeyValueTypePrivate,
    xmlSecKeyValueTypeAny
} xmlSecKeyValueType;
</ENUM>
<MACRO>
<NAME>xmlSecKeyValueIdUnknown</NAME>
#define xmlSecKeyValueIdUnknown		NULL
</MACRO>
<STRUCT>
<NAME>xmlSecKeyValue</NAME>
struct xmlSecKeyValue {
    xmlSecKeyValueId			id;
    xmlSecKeyValueType			type;
    void				*keyData;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyValueCreate</NAME>
<RETURNS>xmlSecKeyValuePtr 	</RETURNS>
xmlSecKeyValueId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueDestroy</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyValuePtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueGenerate</NAME>
<RETURNS>xmlSecKeyValuePtr 	</RETURNS>
xmlSecKeyValueId id,int keySize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueDuplicate</NAME>
<RETURNS>xmlSecKeyValuePtr 	</RETURNS>
xmlSecKeyValuePtr key
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueSet</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyValuePtr key,void* data,int dataSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueCheck</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyValuePtr key,xmlSecKeyValueId keyId,xmlSecKeyValueType keyType
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyValuePtr key,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecKeyValuePtr key,FILE *output
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueReadXml</NAME>
<RETURNS>xmlSecKeyValuePtr 	</RETURNS>
xmlSecKeyValueId id,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueWriteXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyValuePtr key,xmlSecKeyValueType type,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueReadBin</NAME>
<RETURNS>xmlSecKeyValuePtr 	</RETURNS>
xmlSecKeyValueId id,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueWriteBin</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyValuePtr key,xmlSecKeyValueType type,unsigned char **buf,size_t *size
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyInifiteRetrivals</NAME>
#define xmlSecKeyInifiteRetrivals		99999
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecKeyValueCreateMethod</NAME>
<RETURNS>xmlSecKeyValuePtr </RETURNS>
xmlSecKeyValueId id
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueDuplicateMethod</NAME>
<RETURNS>xmlSecKeyValuePtr </RETURNS>
xmlSecKeyValuePtr key
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueDestroyMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecKeyValuePtr key
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueGenerateMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key, int keySize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueSetMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key, void* data, int dataSize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueReadXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key,
									 xmlNodePtr node
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueWriteXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key,
									 xmlSecKeyValueType type,
									 xmlNodePtr parent
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueReadBinaryMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key,
									 const unsigned char *buf,
									 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecKeyValueWriteBinaryMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecKeyValuePtr key,
									 xmlSecKeyValueType type,
									 unsigned char **buf,
									 size_t *size
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecKeyValueIdStruct</NAME>
struct xmlSecKeyValueIdStruct {
    /* xlmlSecKeyId data */
    const xmlChar 			*keyValueNodeName;
    const xmlChar			*keyValueNodeNs;
    
    /* xmlSecKeyValueId methods */
    xmlSecKeyValueCreateMethod		create;
    xmlSecKeyValueDestroyMethod		destroy;
    xmlSecKeyValueDuplicateMethod	duplicate;
    xmlSecKeyValueGenerateMethod	generate;
    xmlSecKeyValueSetMethod		setValue;
    xmlSecKeyValueReadXmlMethod		read;
    xmlSecKeyValueWriteXmlMethod	write;
    xmlSecKeyValueReadBinaryMethod	readBin;
    xmlSecKeyValueWriteBinaryMethod	writeBin;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecKeyValueIdsRegister</NAME>
<RETURNS>int  </RETURNS>
xmlSecKeyValueId id
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueIdsRegisterDefault</NAME>
<RETURNS>int  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueIdsUnregisterAll</NAME>
<RETURNS>void  </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyValueIdsFindByNode</NAME>
<RETURNS>xmlSecKeyValueId  </RETURNS>
xmlSecKeyValueId desiredKeyId,xmlNodePtr cur
</FUNCTION>
<MACRO>
<NAME>xmlSecKeyValueIsValid</NAME>
#define xmlSecKeyValueIsValid(key) \
	((( key ) != NULL) && ((( key )->id) != NULL))
</MACRO>
<MACRO>
<NAME>xmlSecKeyValueCheckId</NAME>
#define xmlSecKeyValueCheckId(key, keyId) \
 	(xmlSecKeyValueIsValid(( key )) && \
	((( key )->id) == ( keyId )))
</MACRO>
<MACRO>
<NAME>xmlSecKeyValueCheckTransform</NAME>
#define xmlSecKeyValueCheckTransform(key, tr) \
 	(xmlSecValueKeyIsValid(( key )) && \
	((((const xmlSecKeyValueId) (( key )->id->transformId))) == ( tr )))
</MACRO>
<TYPEDEF>
<NAME>xmlSecPtr</NAME>
typedef void*						xmlSecPtr;
</TYPEDEF>
<MACRO>
<NAME>xmlSecObjKlassCastMacro</NAME>
#define xmlSecObjKlassCastMacro(klass, dstKlass, dstKlassName) \
	((dstKlassName)(xmlSecObjKlassCheckCastFunc(((xmlSecObjKlassPtr)(klass)), (dstKlass))))
</MACRO>
<MACRO>
<NAME>xmlSecObjKlassCheckCastMacro</NAME>
#define xmlSecObjKlassCheckCastMacro(klass, dstKlass) \
	(xmlSecObjKlassCastMacro((klass), (dstKlass), xmlSecPtr) != (xmlSecPtr)NULL)
</MACRO>
<MACRO>
<NAME>xmlSecObjCastMacro</NAME>
#define xmlSecObjCastMacro(obj, dstKlass, dstObjName) \
	((xmlSecObjKlassCheckCastMacro(xmlSecObjGetKlass((obj)), (dstKlass))) ? \
	(dstObjName)obj : (dstObjName)NULL)
</MACRO>
<MACRO>
<NAME>xmlSecObjCheckCastMacro</NAME>
#define xmlSecObjCheckCastMacro(obj, dstKlass) \
	(xmlSecObjCastMacro((obj), (dstKlass), xmlSecPtr) != (xmlSecPtr)NULL) 
</MACRO>
<MACRO>
<NAME>xmlSecObjKlassGetKlassInfo</NAME>
#define xmlSecObjKlassGetKlassInfo(klass) \
	(((klass) != NULL) ? ((xmlSecObjKlassPtr)(klass))->klassInfo : (xmlSecObjKlassInfoPtr)NULL)
</MACRO>
<MACRO>
<NAME>xmlSecObjGetKlass</NAME>
#define xmlSecObjGetKlass(obj) \
	(((obj) != NULL) ? ((xmlSecObjPtr)(obj))->klass : (xmlSecObjKlassPtr)NULL)
</MACRO>
<MACRO>
<NAME>xmlSecObjGetKlassInfo</NAME>
#define xmlSecObjGetKlassInfo(obj) \
	xmlSecObjKlassGetKlassInfo(xmlSecObjGetKlass((obj)))
</MACRO>
<FUNCTION>
<NAME>xmlSecObjKlassRegister</NAME>
<RETURNS>xmlSecObjKlassPtr  </RETURNS>
xmlSecPtr buf,size_t size,xmlSecObjKlassInfoPtr klassInfo,xmlSecObjKlassPtr parent
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjKlassCheckCastFunc</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
const xmlSecObjKlassPtr klass,const xmlSecObjKlassPtr dst
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjKlassGetKlassName</NAME>
<RETURNS>const char *</RETURNS>
const xmlSecObjKlassPtr klass
</FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecObjKlassInitMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecObjKlassPtr klass
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecObjKlassFinalizeMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecObjKlassPtr klass
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecObjKlassConstructorMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecObjKlassPtr klass,
								 xmlSecObjPtr obj
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecObjKlassDuplicatorMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecObjKlassPtr klass,
						    	         xmlSecObjPtr dst, 
								 xmlSecObjPtr src
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecObjKlassDestructorMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecObjKlassPtr klass,
						    		 xmlSecObjPtr dst
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecObjKlassInfo</NAME>
struct xmlSecObjKlassInfo {
    /* klass data */
    size_t				klassSize;
    const char*				klassName;
    xmlSecObjKlassInitMethod		klassInit;
    xmlSecObjKlassFinalizeMethod	klassFinalize;
    
    /* obj info */  
    size_t				objSize;
    xmlSecObjKlassConstructorMethod 	objConstructor;
    xmlSecObjKlassDuplicatorMethod	objDuplicator;
    xmlSecObjKlassDestructorMethod  	objDestructor;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecObjNew</NAME>
<RETURNS>xmlSecObjPtr 	</RETURNS>
xmlSecObjKlassPtr klass
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjDuplicate</NAME>
<RETURNS>xmlSecObjPtr 	</RETURNS>
xmlSecObjPtr obj
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjDelete</NAME>
<RETURNS>void 	</RETURNS>
xmlSecObjPtr obj
</FUNCTION>
<MACRO>
<NAME>xmlSecObjKlassId</NAME>
#define xmlSecObjKlassId 		xmlSecObjKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecObjKlassCast</NAME>
#define xmlSecObjKlassCast(klass) 	xmlSecObjKlassCastMacro((klass), xmlSecObjKlassId, xmlSecObjKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecObjKlassCheckCast</NAME>
#define xmlSecObjKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecObjKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecObjCast</NAME>
#define xmlSecObjCast(obj) 		xmlSecObjCastMacro((obj), xmlSecObjKlassId, xmlSecObjPtr)
</MACRO>
<MACRO>
<NAME>xmlSecObjCheckCast</NAME>
#define xmlSecObjCheckCast(obj) 	xmlSecObjCheckCastMacro((obj), xmlSecObjKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecObjDebugDumpMethod</NAME>
<RETURNS>void </RETURNS>
xmlSecObjPtr obj,
								 FILE* output,
								 size_t level
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecObjKlass</NAME>
struct xmlSecObjKlass {
    xmlSecObjKlassInfoPtr		klassInfo;
    xmlSecObjKlassPtr			klassParent;

    xmlSecObjDebugDumpMethod		debugDump;
    xmlSecObjDebugDumpMethod		debugXmlDump;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecObj</NAME>
struct xmlSecObj {
    xmlSecObjKlassPtr			klass;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecObjKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjDebugDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecObjPtr obj,FILE* output,size_t level
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjDebugXmlDump</NAME>
<RETURNS>void 	</RETURNS>
xmlSecObjPtr obj,FILE* output,size_t level
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjDebugIndent</NAME>
<RETURNS>void 	</RETURNS>
FILE* output,size_t level
</FUNCTION>
<MACRO>
<NAME>xmlSecListKlassId</NAME>
#define xmlSecListKlassId 				xmlSecListKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecListKlassCast</NAME>
#define xmlSecListKlassCast(klass) 			xmlSecObjKlassCastMacro((klass), xmlSecListKlassId, xmlSecListKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecListKlassCheckCast</NAME>
#define xmlSecListKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecListKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecListCast</NAME>
#define xmlSecListCast(obj) 				xmlSecObjCastMacro((obj), xmlSecListKlassId, xmlSecListPtr)
</MACRO>
<MACRO>
<NAME>xmlSecListCheckCast</NAME>
#define xmlSecListCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecListKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecListKlass</NAME>
struct xmlSecListKlass {
    xmlSecBaseBufferKlass		parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecList</NAME>
struct xmlSecList {
    xmlSecBaseBuffer			parent;
};
</STRUCT>
<MACRO>
<NAME>xmlSecListNew</NAME>
#define xmlSecListNew()			((xmlSecListPtr)xmlSecObjNew(xmlSecListKlassId))
</MACRO>
<FUNCTION>
<NAME>xmlSecListKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListGetData</NAME>
<RETURNS>xmlSecPtr 	</RETURNS>
xmlSecListPtr list,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecListPtr list
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListFind</NAME>
<RETURNS>int 	</RETURNS>
xmlSecListPtr list,xmlSecPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListAppend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecListPtr list,xmlSecPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListPrepend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecListPtr list,xmlSecPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListInsert</NAME>
<RETURNS>int 	</RETURNS>
xmlSecListPtr list,size_t pos,xmlSecPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListRemove</NAME>
<RETURNS>void 	</RETURNS>
xmlSecListPtr list,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecListEmpty</NAME>
<RETURNS>void 	</RETURNS>
xmlSecListPtr list
</FUNCTION>
<TYPEDEF>
<NAME>XMLSEC_BYTE</NAME>
typedef unsigned char 		XMLSEC_BYTE;
</TYPEDEF>
<MACRO>
<NAME>xmlSecSObjKlassId</NAME>
#define xmlSecSObjKlassId 		xmlSecSObjKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecSObjKlassCast</NAME>
#define xmlSecSObjKlassCast(klass) 	xmlSecObjKlassCastMacro((klass), xmlSecSObjKlassId, xmlSecSObjKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecSObjKlassCheckCast</NAME>
#define xmlSecSObjKlassCheckCast(klass) xmlSecObjKlassCheckCastMacro((klass), xmlSecSObjKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecSObjCast</NAME>
#define xmlSecSObjCast(obj) 		xmlSecObjCastMacro((obj), xmlSecSObjKlassId, xmlSecSObjPtr)
</MACRO>
<MACRO>
<NAME>xmlSecSObjCheckCast</NAME>
#define xmlSecSObjCheckCast(obj) 	xmlSecObjCheckCastMacro((obj), xmlSecSObjKlassId)
</MACRO>
<USER_FUNCTION>
<NAME>xmlSecSObjReadXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecSObjPtr sobj,
								 xmlSecObjPtr ctx,
								 xmlNodePtr node
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecSObjWriteXmlMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecSObjPtr sobj,
								 xmlSecObjPtr ctx,
								 xmlNodePtr parent
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecSObjReadBinaryMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecSObjPtr sobj,
								 xmlSecObjPtr ctx,
								 const unsigned char *buf,
								 size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>xmlSecSObjWriteBinaryMethod</NAME>
<RETURNS>int </RETURNS>
xmlSecSObjPtr sobj,
								 xmlSecObjPtr ctx,
								 xmlSecBufferPtr buf
</USER_FUNCTION>
<STRUCT>
<NAME>xmlSecSObjKlass</NAME>
struct xmlSecSObjKlass {
    xmlSecObjKlass			parent;

    const xmlChar*			nodeName;
    const xmlChar*			nodeNs;
    const xmlChar*			typeHref;

    xmlSecSObjReadXmlMethod		readXml;
    xmlSecSObjWriteXmlMethod		writeXml;
    xmlSecSObjReadBinaryMethod		readBinary;
    xmlSecSObjWriteBinaryMethod		writeBinary;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecSObj</NAME>
struct xmlSecSObj {
    xmlSecObj				parent;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecSObjKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSObjReadXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSObjPtr sobj,xmlSecObjPtr ctx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSObjReadBinary</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSObjPtr sobj,xmlSecObjPtr ctx,const unsigned char *buf,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSObjWriteXml</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSObjPtr sobj,xmlSecObjPtr ctx,xmlNodePtr node
</FUNCTION>
<FUNCTION>
<NAME>xmlSecSObjWriteBinary</NAME>
<RETURNS>int 	</RETURNS>
xmlSecSObjPtr sobj,xmlSecObjPtr ctx,xmlSecBufferPtr
</FUNCTION>
<MACRO>
<NAME>xmlSecBaseBufferKlassId</NAME>
#define xmlSecBaseBufferKlassId 		xmlSecBaseBufferKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecBaseBufferKlassCast</NAME>
#define xmlSecBaseBufferKlassCast(klass) 	xmlSecObjKlassCastMacro((klass), xmlSecBaseBufferKlassId, xmlSecBaseBufferKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecBaseBufferKlassCheckCast</NAME>
#define xmlSecBaseBufferKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecBaseBufferKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecBaseBufferCast</NAME>
#define xmlSecBaseBufferCast(obj) 		xmlSecObjCastMacro((obj), xmlSecBaseBufferKlassId, xmlSecBaseBufferPtr)
</MACRO>
<MACRO>
<NAME>xmlSecBaseBufferCheckCast</NAME>
#define xmlSecBaseBufferCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecBaseBufferKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecBaseBufferKlass</NAME>
struct xmlSecBaseBufferKlass {
    xmlSecSObjKlass			parent;
    
    size_t				itemSize;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecBaseBuffer</NAME>
struct xmlSecBaseBuffer {
    xmlSecSObj				parent;
    
    /* private data */
    XMLSEC_BYTE*			data;
    size_t				size;
    size_t				maxSize;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecBaseBufferKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecBaseBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferGetMaxSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecBaseBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferGetData</NAME>
<RETURNS>xmlSecPtr 	</RETURNS>
xmlSecBaseBufferPtr buf,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferInsert</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBaseBufferPtr buf,size_t pos,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferRemove</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBaseBufferPtr buf,size_t pos,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferEmpty</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBaseBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBaseBufferAllocate</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBaseBufferPtr buf,size_t size
</FUNCTION>
<MACRO>
<NAME>xmlSecBufferKlassId</NAME>
#define xmlSecBufferKlassId 		xmlSecBufferKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecBufferKlassCast</NAME>
#define xmlSecBufferKlassCast(klass) 	xmlSecObjKlassCastMacro((klass), xmlSecBufferKlassId, xmlSecBufferKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecBufferKlassCheckCast</NAME>
#define xmlSecBufferKlassCheckCast(klass) xmlSecObjKlassCheckCastMacro((klass), xmlSecBufferKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecBufferCast</NAME>
#define xmlSecBufferCast(obj) 		xmlSecObjCastMacro((obj), xmlSecBufferKlassId, xmlSecBufferPtr)
</MACRO>
<MACRO>
<NAME>xmlSecBufferCheckCast</NAME>
#define xmlSecBufferCheckCast(obj) 	xmlSecObjCheckCastMacro((obj), xmlSecBufferKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecBufferKlass</NAME>
struct xmlSecBufferKlass {
    xmlSecBaseBufferKlass		parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecBuffer</NAME>
struct xmlSecBuffer {
    xmlSecBaseBuffer			parent;
};
</STRUCT>
<MACRO>
<NAME>xmlSecBufferNew</NAME>
#define xmlSecBufferNew()		((xmlSecBufferPtr)xmlSecObjNew(xmlSecBufferKlassId))
</MACRO>
<FUNCTION>
<NAME>xmlSecBufferKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferGetBuffer</NAME>
<RETURNS>unsigned char *</RETURNS>
xmlSecBufferPtr buf
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferSet</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferAppend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferPrepend</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferInsert</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,size_t pos,const unsigned char* data,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferRemove</NAME>
<RETURNS>void 	</RETURNS>
xmlSecBufferPtr buf,size_t pos,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferBase64Encode</NAME>
<RETURNS>xmlChar *</RETURNS>
xmlSecBufferPtr buf,int columns
</FUNCTION>
<FUNCTION>
<NAME>xmlSecBufferBase64Decode</NAME>
<RETURNS>int 	</RETURNS>
xmlSecBufferPtr buf,const xmlChar* str
</FUNCTION>
<MACRO>
<NAME>xmlSecObjMapKlassId</NAME>
#define xmlSecObjMapKlassId 				xmlSecObjMapKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecObjMapKlassCast</NAME>
#define xmlSecObjMapKlassCast(klass) 			xmlSecObjKlassCastMacro((klass), xmlSecObjMapKlassId, xmlSecObjMapKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecObjMapKlassCheckCast</NAME>
#define xmlSecObjMapKlassCheckCast(klass) 		xmlSecObjKlassCheckCastMacro((klass), xmlSecObjMapKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecObjMapCast</NAME>
#define xmlSecObjMapCast(obj) 				xmlSecObjCastMacro((obj), xmlSecObjMapKlassId, xmlSecObjMapPtr)
</MACRO>
<MACRO>
<NAME>xmlSecObjMapCheckCast</NAME>
#define xmlSecObjMapCheckCast(obj) 			xmlSecObjCheckCastMacro((obj), xmlSecObjMapKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecObjMapKlass</NAME>
struct xmlSecObjMapKlass {
    xmlSecObjKlass			parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecObjMap</NAME>
struct xmlSecObjMap {
    xmlSecObj				parent;
    
    /* private data */
    xmlSecObjMapItem*		data;
    size_t				size;
    size_t				maxSize;
};
</STRUCT>
<MACRO>
<NAME>xmlSecObjMapNew</NAME>
#define xmlSecObjMapNew()	((xmlSecObjMapPtr)xmlSecObjNew(xmlSecObjMapKlassId))
</MACRO>
<FUNCTION>
<NAME>xmlSecObjMapKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapGet</NAME>
<RETURNS>xmlSecObjPtr 	</RETURNS>
xmlSecObjMapPtr map,const xmlChar* name
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapSet</NAME>
<RETURNS>int 	</RETURNS>
xmlSecObjMapPtr map,const xmlChar* name,xmlSecObjPtr data
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapRemove</NAME>
<RETURNS>void 	</RETURNS>
xmlSecObjMapPtr map,const xmlChar* name
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapEmpty</NAME>
<RETURNS>void 	</RETURNS>
xmlSecObjMapPtr map
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapGetSize</NAME>
<RETURNS>size_t 	</RETURNS>
xmlSecObjMapPtr map
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapGetData</NAME>
<RETURNS>xmlSecObjPtr 	</RETURNS>
xmlSecObjMapPtr map,size_t pos
</FUNCTION>
<FUNCTION>
<NAME>xmlSecObjMapGetName</NAME>
<RETURNS>const xmlChar *</RETURNS>
xmlSecObjMapPtr map,size_t pos
</FUNCTION>
<TYPEDEF>
<NAME>xmlSecPgpStorePtr</NAME>
typedef void*					xmlSecPgpStorePtr;
</TYPEDEF>
<TYPEDEF>
<NAME>xmlSecPgpDataPtr</NAME>
typedef void*					xmlSecPgpDataPtr;
</TYPEDEF>
<FUNCTION>
<NAME>xmlSecOpenSSLBnToCryptoBinary</NAME>
<RETURNS>int 	</RETURNS>
const BIGNUM *a,unsigned char** value,size_t* valueSize
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLBnFromCryptoBinary</NAME>
<RETURNS>BIGNUM *</RETURNS>
const unsigned char* value,size_t valueSize,BIGNUM **a
</FUNCTION>
<MACRO>
<NAME>XMLSEC_OPENSSL_ERRORS_LIB</NAME>
#define XMLSEC_OPENSSL_ERRORS_LIB		(ERR_LIB_USER + 57)
</MACRO>
<MACRO>
<NAME>XMLSEC_OPENSSL_ERRORS_FUNCTION</NAME>
#define XMLSEC_OPENSSL_ERRORS_FUNCTION			0
</MACRO>
<STRUCT>
<NAME>xmlSecOpenSSLEvpCipherTransform</NAME>
struct xmlSecOpenSSLEvpCipherTransform {	
    /* same as for xmlSecTransform but id type changed */
    xmlSecCipherTransformId		id;    
    xmlSecTransformStatus		status;
    int					dontDestroy;
    void				*data;
    
    /* xmlSecBinTransform specific */
    int					encode;
    xmlSecCipherTransformPtr		next;
    xmlSecCipherTransformPtr		prev;   
    void				*binData;
    
    /* xmlSecCipherTransform specific */
    unsigned char			*bufIn;
    unsigned char			*bufOut;
    unsigned char			*iv;
    size_t				ivPos;
    void				*cipherData;
    
    /* xmlSecOpenSSLEvpCipherTransform specific */
    EVP_CIPHER_CTX 			cipherCtx;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpCipherGenerateIv</NAME>
<RETURNS>int  </RETURNS>
xmlSecCipherTransformPtr cipher
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpCipherInit</NAME>
<RETURNS>int  </RETURNS>
xmlSecCipherTransformPtr cipher
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpCipherUpdate</NAME>
<RETURNS>int  </RETURNS>
xmlSecCipherTransformPtr cipher,const unsigned char *buffer,size_t size
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpCipherFinal</NAME>
<RETURNS>int  </RETURNS>
xmlSecCipherTransformPtr cipher
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpParseKey</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
EVP_PKEY *pKey
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLEvpLoadPemKey</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
const char *keyfile,const char *keyPwd,int privateKey
</FUNCTION>
<MACRO>
<NAME>xmlSecOpenSSLX509DataKlassId</NAME>
#define xmlSecOpenSSLX509DataKlassId 			xmlSecOpenSSLX509DataKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509DataKlassCast</NAME>
#define xmlSecOpenSSLX509DataKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecOpenSSLX509DataKlassId, xmlSecOpenSSLX509DataKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509DataKlassCheckCast</NAME>
#define xmlSecOpenSSLX509DataKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecOpenSSLX509DataKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509DataCast</NAME>
#define xmlSecOpenSSLX509DataCast(obj) 			xmlSecObjCastMacro((obj), xmlSecOpenSSLX509DataKlassId, xmlSecOpenSSLX509DataPtr)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509DataCheckCast</NAME>
#define xmlSecOpenSSLX509DataCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecOpenSSLX509DataKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecOpenSSLX509DataKlass</NAME>
struct xmlSecOpenSSLX509DataKlass {
    xmlSecX509DataKlass				parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecOpenSSLX509Data</NAME>
struct xmlSecOpenSSLX509Data {
    xmlSecX509Data				parent;

    X509*					verified;
    STACK_OF(X509)*				certs;
    STACK_OF(X509_CRL)*				crls;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecOpenSSLX509DataKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreKlassId</NAME>
#define xmlSecOpenSSLX509StoreKlassId 			xmlSecOpenSSLX509StoreKlassGet()
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreKlassCast</NAME>
#define xmlSecOpenSSLX509StoreKlassCast(klass) 		xmlSecObjKlassCastMacro((klass), xmlSecOpenSSLX509StoreKlassId, xmlSecOpenSSLX509StoreKlassPtr)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreKlassCheckCast</NAME>
#define xmlSecOpenSSLX509StoreKlassCheckCast(klass) 	xmlSecObjKlassCheckCastMacro((klass), xmlSecOpenSSLX509StoreKlassId)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreCast</NAME>
#define xmlSecOpenSSLX509StoreCast(obj) 		xmlSecObjCastMacro((obj), xmlSecOpenSSLX509StoreKlassId, xmlSecOpenSSLX509StorePtr)
</MACRO>
<MACRO>
<NAME>xmlSecOpenSSLX509StoreCheckCast</NAME>
#define xmlSecOpenSSLX509StoreCheckCast(obj) 		xmlSecObjCheckCastMacro((obj), xmlSecOpenSSLX509StoreKlassId)
</MACRO>
<STRUCT>
<NAME>xmlSecOpenSSLX509StoreKlass</NAME>
struct xmlSecOpenSSLX509StoreKlass {
    xmlSecX509StoreKlass			parent;
};
</STRUCT>
<STRUCT>
<NAME>xmlSecOpenSSLX509Store</NAME>
struct xmlSecOpenSSLX509Store {
    xmlSecX509Store				parent;

    X509_STORE*					xst;
    STACK_OF(X509)*				untrusted;
    STACK_OF(X509_CRL)*				crls;
};
</STRUCT>
<FUNCTION>
<NAME>xmlSecOpenSSLX509StoreKlassGet</NAME>
<RETURNS>xmlSecObjKlassPtr 	</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLX509StoreLoadPemCert</NAME>
<RETURNS>int 	</RETURNS>
xmlSecOpenSSLX509StorePtr store,const char *filename,int trusted
</FUNCTION>
<FUNCTION>
<NAME>xmlSecOpenSSLX509StoreAddCertsDir</NAME>
<RETURNS>int 	</RETURNS>
xmlSecOpenSSLX509StorePtr store,const char *path
</FUNCTION>
<FUNCTION>
<NAME>xmlSecPKCS12ReadKey</NAME>
<RETURNS>xmlSecKeyPtr 	</RETURNS>
const char *filename,const char *pwd
</FUNCTION>
<FUNCTION>
<NAME>xmlSecKeyReadPemCert</NAME>
<RETURNS>int 	</RETURNS>
xmlSecKeyPtr key,const char *filename
</FUNCTION>
