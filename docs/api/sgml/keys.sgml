<refentry id="xmlsec-keys">
<refmeta>
<refentrytitle>keys</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>keys</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link>;
#define     <link linkend="xmlSecKeyUsageSign">xmlSecKeyUsageSign</link>
#define     <link linkend="xmlSecKeyUsageVerify">xmlSecKeyUsageVerify</link>
#define     <link linkend="xmlSecKeyUsageEncrypt">xmlSecKeyUsageEncrypt</link>
#define     <link linkend="xmlSecKeyUsageDecrypt">xmlSecKeyUsageDecrypt</link>
#define     <link linkend="xmlSecKeyUsageAny">xmlSecKeyUsageAny</link>
struct      <link linkend="xmlSecKeyReq">xmlSecKeyReq</link>;
int         <link linkend="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize</link>          (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
void        <link linkend="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize</link>            (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
void        <link linkend="xmlSecKeyReqReset">xmlSecKeyReqReset</link>               (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
int         <link linkend="xmlSecKeyReqCopy">xmlSecKeyReqCopy</link>                (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> dst,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> src);
int         <link linkend="xmlSecKeyReqMatchKey">xmlSecKeyReqMatchKey</link>            (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeyReqMatchKeyValue">xmlSecKeyReqMatchKeyValue</link>       (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> value);
struct      <link linkend="xmlSecKey">xmlSecKey</link>;
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyCreate">xmlSecKeyCreate</link>                (void);
void        <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link>                (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
void        <link linkend="xmlSecKeyEmpty">xmlSecKeyEmpty</link>                  (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyDuplicate">xmlSecKeyDuplicate</link>             (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeyCopy">xmlSecKeyCopy</link>                   (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> keyDst,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> keySrc);
const <link linkend="xmlChar">xmlChar</link>* <link linkend="xmlSecKeyGetName">xmlSecKeyGetName</link>             (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeySetName">xmlSecKeySetName</link>                (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name);
<link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> <link linkend="xmlSecKeyGetType">xmlSecKeyGetType</link>          (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyGetValue">xmlSecKeyGetValue</link>          (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeySetValue">xmlSecKeySetValue</link>               (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> value);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyGetData">xmlSecKeyGetData</link>           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyEnsureData">xmlSecKeyEnsureData</link>        (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);
int         <link linkend="xmlSecKeyAdoptData">xmlSecKeyAdoptData</link>              (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> data);
void        <link linkend="xmlSecKeyDebugDump">xmlSecKeyDebugDump</link>              (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecKeyDebugXmlDump">xmlSecKeyDebugXmlDump</link>           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyGenerate">xmlSecKeyGenerate</link>              (const <link linkend="xmlChar">xmlChar</link> *klass,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="size-t">size_t</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecKeyMatch">xmlSecKeyMatch</link>                  (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyReadBinaryFile">xmlSecKeyReadBinaryFile</link>        (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const char *filename);
#define     <link linkend="xmlSecKeyIsValid">xmlSecKeyIsValid</link>                (key)
#define     <link linkend="xmlSecKeyCheckId">xmlSecKeyCheckId</link>                (key, keyId)
#define     <link linkend="xmlSecKeyPtrListId">xmlSecKeyPtrListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecKeyPtrListGetKlass">xmlSecKeyPtrListGetKlass</link>    (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecKeyUsage">xmlSecKeyUsage</title>
<programlisting>typedef unsigned int 			xmlSecKeyUsage;
</programlisting>
<para>
The key usage.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageSign">xmlSecKeyUsageSign</title>
<programlisting>#define	xmlSecKeyUsageSign		0x0001
</programlisting>
<para>
Key can be used in any way.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageVerify">xmlSecKeyUsageVerify</title>
<programlisting>#define	xmlSecKeyUsageVerify		0x0002
</programlisting>
<para>
Key for signing.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageEncrypt">xmlSecKeyUsageEncrypt</title>
<programlisting>#define	xmlSecKeyUsageEncrypt		0x0004
</programlisting>
<para>
Key for signature verification.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageDecrypt">xmlSecKeyUsageDecrypt</title>
<programlisting>#define	xmlSecKeyUsageDecrypt		0x0008
</programlisting>
<para>
An encryption key.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageAny">xmlSecKeyUsageAny</title>
<programlisting>#define	xmlSecKeyUsageAny		0xFFFF
</programlisting>
<para>
A decryption key.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReq">struct xmlSecKeyReq</title>
<programlisting>struct xmlSecKeyReq {
    xmlSecKeyDataId			keyId;
    xmlSecKeyDataType			keyType;
    xmlSecKeyUsage			keyUsage;
    size_t				keyBitsSize;
};
</programlisting>
<para>
The key requirements information.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <structfield>keyId</structfield></entry>
<entry>		the desired key value klass.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> <structfield>keyType</structfield></entry>
<entry>		the desired key type.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link> <structfield>keyUsage</structfield></entry>
<entry>		the desired key usage.
</entry>
</row>
<row>
<entry><link linkend="size-t">size_t</link> <structfield>keyBitsSize</structfield></entry>
<entry>	the desired key size (in bits!).
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize ()</title>
<programlisting>int         xmlSecKeyReqInitialize          (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Initialize key requirements object. Caller is responsible for
cleaning it with <link linkend="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize</link> function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize ()</title>
<programlisting>void        xmlSecKeyReqFinalize            (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Cleans the key requirements object initialized with <link linkend="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize</link>
function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqReset">xmlSecKeyReqReset ()</title>
<programlisting>void        xmlSecKeyReqReset               (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Resets key requirements object for new key search.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqCopy">xmlSecKeyReqCopy ()</title>
<programlisting>int         xmlSecKeyReqCopy                (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> dst,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> src);</programlisting>
<para>
Copies key requirements from <parameter>src</parameter> object to <parameter>dst</parameter> object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dst</parameter>&nbsp;:</entry>
<entry>		the pointer to destination object.
</entry></row>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry>		the pointer to source object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success and a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqMatchKey">xmlSecKeyReqMatchKey ()</title>
<programlisting>int         xmlSecKeyReqMatchKey            (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Checks whether <parameter>key</parameter> matches key requirements <parameter>keyReq</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements object.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>1 if key matches requirements, 0 if not and a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqMatchKeyValue">xmlSecKeyReqMatchKeyValue ()</title>
<programlisting>int         xmlSecKeyReqMatchKeyValue       (<link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> value);</programlisting>
<para>
Checks whether <parameter>keyValue</parameter> matches key requirements <parameter>keyReq</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements.
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>		the pointer to key value.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>1 if key value matches requirements, 0 if not and a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKey">struct xmlSecKey</title>
<programlisting>struct xmlSecKey {
    xmlChar*				name;
    xmlSecKeyDataPtr			value;
    xmlSecPtrListPtr			dataList;
    xmlSecKeyUsage			usage;
    
    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The key.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></entry>
<entry> 		the key name.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <structfield>value</structfield></entry>
<entry>		the key value.
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <structfield>dataList</structfield></entry>
<entry>		the key data list.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link> <structfield>usage</structfield></entry>
<entry>		the key usage.
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>		reserved for future.
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>		reserved for future.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCreate">xmlSecKeyCreate ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyCreate                (void);</programlisting>
<para>
Allocates and initializes new key. Caller is responsible for 
freeing returned object with <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link> function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to newly allocated <parameter>xmlSecKey</parameter> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDestroy">xmlSecKeyDestroy ()</title>
<programlisting>void        xmlSecKeyDestroy                (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Destroys the key created using <link linkend="xmlSecKeyCreate">xmlSecKeyCreate</link> function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> 		the pointer to key.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyEmpty">xmlSecKeyEmpty ()</title>
<programlisting>void        xmlSecKeyEmpty                  (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Clears the <parameter>key</parameter> data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDuplicate">xmlSecKeyDuplicate ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyDuplicate             (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Creates a duplicate of the given <parameter>key</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> 		the pointer to the <link linkend="xmlSecKey">xmlSecKey</link> structure.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to newly allocated <link linkend="xmlSecKey">xmlSecKey</link> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCopy">xmlSecKeyCopy ()</title>
<programlisting>int         xmlSecKeyCopy                   (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> keyDst,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> keySrc);</programlisting>
<para>
Copies key data from <parameter>keySrc</parameter> to <parameter>keyDst</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyDst</parameter>&nbsp;:</entry>
<entry>		the destination key.
</entry></row>
<row><entry align="right"><parameter>keySrc</parameter>&nbsp;:</entry>
<entry>		the source key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetName">xmlSecKeyGetName ()</title>
<programlisting>const <link linkend="xmlChar">xmlChar</link>* xmlSecKeyGetName             (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets key name (see also <link linkend="xmlSecKeySetName">xmlSecKeySetName</link> function).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>key name.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeySetName">xmlSecKeySetName ()</title>
<programlisting>int         xmlSecKeySetName                (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name);</programlisting>
<para>
Sets key name (see also <link linkend="xmlSecKeyGetName">xmlSecKeyGetName</link> function).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>		the new key name.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetType">xmlSecKeyGetType ()</title>
<programlisting><link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> xmlSecKeyGetType          (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets <parameter>key</parameter> type.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>key type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetValue">xmlSecKeyGetValue ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyGetValue          (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets key value (see also <link linkend="xmlSecKeySetValue">xmlSecKeySetValue</link> function).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>key value (crypto material).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeySetValue">xmlSecKeySetValue ()</title>
<programlisting>int         xmlSecKeySetValue               (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> value);</programlisting>
<para>
Sets key value (see also <link linkend="xmlSecKeyGetValue">xmlSecKeyGetValue</link> function).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>value</parameter>&nbsp;:</entry>
<entry>		the new value.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetData">xmlSecKeyGetData ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyGetData           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);</programlisting>
<para>
Gets key's data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>dataId</parameter>&nbsp;:</entry>
<entry>		the requested data klass.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>additional data associated with the <parameter>key</parameter> (see also 
<link linkend="xmlSecKeyAdoptData">xmlSecKeyAdoptData</link> function).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyEnsureData">xmlSecKeyEnsureData ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyEnsureData        (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);</programlisting>
<para>
If necessary, creates key data of <parameter>dataId</parameter> klass and adds to <parameter>key</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>dataId</parameter>&nbsp;:</entry>
<entry>		the requested data klass.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to key data or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyAdoptData">xmlSecKeyAdoptData ()</title>
<programlisting>int         xmlSecKeyAdoptData              (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> data);</programlisting>
<para>
Adds <parameter>data</parameter> to the <parameter>key</parameter>. The <parameter>data</parameter> object will be destroyed
by <parameter>key</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>		the pointer to key data.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDebugDump">xmlSecKeyDebugDump ()</title>
<programlisting>void        xmlSecKeyDebugDump              (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the information about the <parameter>key</parameter> to the <parameter>output</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry> 		the pointer to output FILE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDebugXmlDump">xmlSecKeyDebugXmlDump ()</title>
<programlisting>void        xmlSecKeyDebugXmlDump           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the information about the <parameter>key</parameter> to the <parameter>output</parameter> in XML format.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry> 		the pointer to output FILE.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGenerate">xmlSecKeyGenerate ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyGenerate              (const <link linkend="xmlChar">xmlChar</link> *klass,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="size-t">size_t</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Generates new key of requested <parameter>klass</parameter> and <parameter>type</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>klass</parameter>&nbsp;:</entry>
<entry>		the requested key klass name (rsa, dsa, aes, ...).
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> 		the new key name (may be NULL).
</entry></row>
<row><entry align="right"><parameter>sizeBits</parameter>&nbsp;:</entry>
<entry>		the new key size (in bits!).
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>		the new key type (session, permanent, ...).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to newly created key or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyMatch">xmlSecKeyMatch ()</title>
<programlisting>int         xmlSecKeyMatch                  (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Checks whether the <parameter>key</parameter> matches the given criteria.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> 		the pointer to key.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> 		the pointer to key name (may be NULL).
</entry></row>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>		the pointer to key requirements.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>1 if the key satisfies the given criteria or 0 otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReadBinaryFile">xmlSecKeyReadBinaryFile ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyReadBinaryFile        (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const char *filename);</programlisting>
<para>
Reads the key value of klass <parameter>dataId</parameter> from a binary file <parameter>filename</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dataId</parameter>&nbsp;:</entry>
<entry>		the key value data klass.
</entry></row>
<row><entry align="right"><parameter>filename</parameter>&nbsp;:</entry>
<entry>		the key binary filename.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to newly created key or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyIsValid">xmlSecKeyIsValid()</title>
<programlisting>#define     xmlSecKeyIsValid(key)</programlisting>
<para>
Macro. Returns 1 if <parameter>key</parameter> is not NULL and <parameter>key</parameter>-&gt;id is not NULL
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the pointer to key.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCheckId">xmlSecKeyCheckId()</title>
<programlisting>#define     xmlSecKeyCheckId(key, keyId)</programlisting>
<para>
Macro. Returns 1 if <parameter>key</parameter> is valid and <parameter>key</parameter>'s id is equal to <parameter>keyId</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the pointer to key.
</entry></row>
<row><entry align="right"><parameter>keyId</parameter>&nbsp;:</entry>
<entry> the key Id.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyPtrListId">xmlSecKeyPtrListId</title>
<programlisting>#define xmlSecKeyPtrListId	xmlSecKeyPtrListGetKlass()
</programlisting>
<para>
The keys list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyPtrListGetKlass">xmlSecKeyPtrListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecKeyPtrListGetKlass    (void);</programlisting>
<para>
The keys list klass.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>keys list id.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
