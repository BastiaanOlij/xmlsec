<refentry id="xmlsec-keys">
<refmeta>
<refentrytitle>keys</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>keys</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



typedef     <link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link>;
#define     <link linkend="xmlSecKeyUsageSign">xmlSecKeyUsageSign</link>
#define     <link linkend="xmlSecKeyUsageVerify">xmlSecKeyUsageVerify</link>
#define     <link linkend="xmlSecKeyUsageEncrypt">xmlSecKeyUsageEncrypt</link>
#define     <link linkend="xmlSecKeyUsageDecrypt">xmlSecKeyUsageDecrypt</link>
#define     <link linkend="xmlSecKeyUsageKeyExchange">xmlSecKeyUsageKeyExchange</link>
#define     <link linkend="xmlSecKeyUsageAny">xmlSecKeyUsageAny</link>
int         <link linkend="xmlSecKeyUseWithInitialize">xmlSecKeyUseWithInitialize</link>      (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);
void        <link linkend="xmlSecKeyUseWithFinalize">xmlSecKeyUseWithFinalize</link>        (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);
void        <link linkend="xmlSecKeyUseWithReset">xmlSecKeyUseWithReset</link>           (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);
int         <link linkend="xmlSecKeyUseWithCopy">xmlSecKeyUseWithCopy</link>            (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> dst,
                                             <link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> src);
<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> <link linkend="xmlSecKeyUseWithCreate">xmlSecKeyUseWithCreate</link>  (const <link linkend="xmlChar">xmlChar</link> *application,
                                             const <link linkend="xmlChar">xmlChar</link> *identifier);
<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> <link linkend="xmlSecKeyUseWithDuplicate">xmlSecKeyUseWithDuplicate</link>
                                            (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);
void        <link linkend="xmlSecKeyUseWithDestroy">xmlSecKeyUseWithDestroy</link>         (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);
int         <link linkend="xmlSecKeyUseWithSet">xmlSecKeyUseWithSet</link>             (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             const <link linkend="xmlChar">xmlChar</link> *application,
                                             const <link linkend="xmlChar">xmlChar</link> *identifier);
void        <link linkend="xmlSecKeyUseWithDebugDump">xmlSecKeyUseWithDebugDump</link>       (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecKeyUseWithDebugXmlDump">xmlSecKeyUseWithDebugXmlDump</link>    (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
struct      <link linkend="xmlSecKeyUseWith">xmlSecKeyUseWith</link>;
#define     <link linkend="xmlSecKeyUseWithPtrListId">xmlSecKeyUseWithPtrListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecKeyUseWithPtrListGetKlass">xmlSecKeyUseWithPtrListGetKlass</link>
                                            (void);
struct      <link linkend="xmlSecKeyReq">xmlSecKeyReq</link>;
int         <link linkend="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize</link>          (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);
void        <link linkend="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize</link>            (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);
void        <link linkend="xmlSecKeyReqReset">xmlSecKeyReqReset</link>               (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);
int         <link linkend="xmlSecKeyReqCopy">xmlSecKeyReqCopy</link>                (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> dst,
                                             <link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> src);
int         <link linkend="xmlSecKeyReqMatchKey">xmlSecKeyReqMatchKey</link>            (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeyReqMatchKeyValue">xmlSecKeyReqMatchKeyValue</link>       (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> value);
void        <link linkend="xmlSecKeyReqDebugDump">xmlSecKeyReqDebugDump</link>           (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecKeyReqDebugXmlDump">xmlSecKeyReqDebugXmlDump</link>        (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
struct      <link linkend="xmlSecKey">xmlSecKey</link>;
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyCreate">xmlSecKeyCreate</link>                (void);
void        <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link>                (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
void        <link linkend="xmlSecKeyEmpty">xmlSecKeyEmpty</link>                  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <link linkend="xmlSecKeyDuplicate">xmlSecKeyDuplicate</link>             (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeyCopy">xmlSecKeyCopy</link>                   (<link linkend="xmlSecKey">xmlSecKeyPtr</link> keyDst,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> keySrc);
const <link linkend="xmlChar">xmlChar</link>* <link linkend="xmlSecKeyGetName">xmlSecKeyGetName</link>             (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeySetName">xmlSecKeySetName</link>                (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name);
<link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> <link linkend="xmlSecKeyGetType">xmlSecKeyGetType</link>          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyGetValue">xmlSecKeyGetValue</link>          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecKeySetValue">xmlSecKeySetValue</link>               (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> value);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyGetData">xmlSecKeyGetData</link>           (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);
<link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> <link linkend="xmlSecKeyEnsureData">xmlSecKeyEnsureData</link>        (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);
int         <link linkend="xmlSecKeyAdoptData">xmlSecKeyAdoptData</link>              (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data);
void        <link linkend="xmlSecKeyDebugDump">xmlSecKeyDebugDump</link>              (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecKeyDebugXmlDump">xmlSecKeyDebugXmlDump</link>           (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyGenerate">xmlSecKeyGenerate</link>              (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             <link linkend="xmlSecSize">xmlSecSize</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyGenerateByName">xmlSecKeyGenerateByName</link>        (const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecSize">xmlSecSize</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
int         <link linkend="xmlSecKeyMatch">xmlSecKeyMatch</link>                  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyReadBuffer">xmlSecKeyReadBuffer</link>            (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             <link linkend="xmlSecBuffer">xmlSecBuffer</link> *buffer);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyReadBinaryFile">xmlSecKeyReadBinaryFile</link>        (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const char *filename);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecKeyReadMemory">xmlSecKeyReadMemory</link>            (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);
#define     <link linkend="xmlSecKeyIsValid">xmlSecKeyIsValid</link>                (key)
#define     <link linkend="xmlSecKeyCheckId">xmlSecKeyCheckId</link>                (key, keyId)
#define     <link linkend="xmlSecKeyPtrListId">xmlSecKeyPtrListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecKeyPtrListGetKlass">xmlSecKeyPtrListGetKlass</link>    (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecKeyUsage">xmlSecKeyUsage</title>
<programlisting>typedef unsigned int 			xmlSecKeyUsage;
</programlisting>
<para>
The key usage.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageSign">xmlSecKeyUsageSign</title>
<programlisting>#define	xmlSecKeyUsageSign		0x00000001
</programlisting>
<para>
Key can be used in any way.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageVerify">xmlSecKeyUsageVerify</title>
<programlisting>#define	xmlSecKeyUsageVerify		0x00000002
</programlisting>
<para>
Key for signing.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageEncrypt">xmlSecKeyUsageEncrypt</title>
<programlisting>#define	xmlSecKeyUsageEncrypt		0x00000004
</programlisting>
<para>
Key for signature verification.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageDecrypt">xmlSecKeyUsageDecrypt</title>
<programlisting>#define	xmlSecKeyUsageDecrypt		0x00000008
</programlisting>
<para>
An encryption key.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageKeyExchange">xmlSecKeyUsageKeyExchange</title>
<programlisting>#define	xmlSecKeyUsageKeyExchange	0x00000010
</programlisting>
<para>
The key is used for key exchange.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUsageAny">xmlSecKeyUsageAny</title>
<programlisting>#define	xmlSecKeyUsageAny		0xFFFFFFFF
</programlisting>
<para>
A decryption key.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithInitialize">xmlSecKeyUseWithInitialize ()</title>
<programlisting>int         xmlSecKeyUseWithInitialize      (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);</programlisting>
<para>
Initializes <parameter>keyUseWith</parameter> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithFinalize">xmlSecKeyUseWithFinalize ()</title>
<programlisting>void        xmlSecKeyUseWithFinalize        (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);</programlisting>
<para>
Finalizes <parameter>keyUseWith</parameter> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithReset">xmlSecKeyUseWithReset ()</title>
<programlisting>void        xmlSecKeyUseWithReset           (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);</programlisting>
<para>
Resets the <parameter>keyUseWith</parameter> to its state after initialization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithCopy">xmlSecKeyUseWithCopy ()</title>
<programlisting>int         xmlSecKeyUseWithCopy            (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> dst,
                                             <link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> src);</programlisting>
<para>
Copies information from <parameter>dst</parameter> to <parameter>src</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to destination object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to source object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithCreate">xmlSecKeyUseWithCreate ()</title>
<programlisting><link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> xmlSecKeyUseWithCreate  (const <link linkend="xmlChar">xmlChar</link> *application,
                                             const <link linkend="xmlChar">xmlChar</link> *identifier);</programlisting>
<para>
Creates new xmlSecKeyUseWith object. The caller is responsible for destroying
returned object with <parameter>xmlSecKeyUseWithDestroy</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara>        the application value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>identifier</parameter>&nbsp;:</term>
<listitem><simpara>         the identifier value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created object or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithDuplicate">xmlSecKeyUseWithDuplicate ()</title>
<programlisting><link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> xmlSecKeyUseWithDuplicate
                                            (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);</programlisting>
<para>
Duplicates <parameter>keyUseWith</parameter> object. The caller is responsible for destroying
returned object with <parameter>xmlSecKeyUseWithDestroy</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created object or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithDestroy">xmlSecKeyUseWithDestroy ()</title>
<programlisting>void        xmlSecKeyUseWithDestroy         (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith);</programlisting>
<para>
Destroys <parameter>keyUseWith</parameter> created with <parameter>xmlSecKeyUseWithCreate</parameter> or <parameter>xmlSecKeyUseWithDuplicate</parameter>
functions.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithSet">xmlSecKeyUseWithSet ()</title>
<programlisting>int         xmlSecKeyUseWithSet             (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             const <link linkend="xmlChar">xmlChar</link> *application,
                                             const <link linkend="xmlChar">xmlChar</link> *identifier);</programlisting>
<para>
Sets <parameter>application</parameter> and <parameter>identifier</parameter> in the <parameter>keyUseWith</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>application</parameter>&nbsp;:</term>
<listitem><simpara>        the new application value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>identifier</parameter>&nbsp;:</term>
<listitem><simpara>         the new identifier value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithDebugDump">xmlSecKeyUseWithDebugDump ()</title>
<programlisting>void        xmlSecKeyUseWithDebugDump       (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints xmlSecKeyUseWith debug information to a file <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>             the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithDebugXmlDump">xmlSecKeyUseWithDebugXmlDump ()</title>
<programlisting>void        xmlSecKeyUseWithDebugXmlDump    (<link linkend="xmlSecKeyUseWith">xmlSecKeyUseWithPtr</link> keyUseWith,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints xmlSecKeyUseWith debug information to a file <parameter>output</parameter> in XML format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyUseWith</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to information about key application/user.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>             the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWith">struct xmlSecKeyUseWith</title>
<programlisting>struct xmlSecKeyUseWith {

    xmlChar*                    application;
    xmlChar*                    identifier;

    void*                       reserved1;
    void*                       reserved2;
};
</programlisting>
<para>
Information about application and user of the key.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>application</structfield></term>
<listitem><simpara>        the application.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>identifier</structfield></term>
<listitem><simpara>         the identifier.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved2</structfield></term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithPtrListId">xmlSecKeyUseWithPtrListId</title>
<programlisting>#define xmlSecKeyUseWithPtrListId	xmlSecKeyUseWithPtrListGetKlass()
</programlisting>
<para>
The keys list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyUseWithPtrListGetKlass">xmlSecKeyUseWithPtrListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecKeyUseWithPtrListGetKlass
                                            (void);</programlisting>
<para>
The key data list klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key data list klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReq">struct xmlSecKeyReq</title>
<programlisting>struct xmlSecKeyReq {

    xmlSecKeyDataId	        keyId;
    xmlSecKeyDataType		keyType;
    xmlSecKeyUsage		keyUsage;
    xmlSecSize			keyBitsSize;
    xmlSecPtrList               keyUseWithList;    

    void*                       reserved1;
    void*                       eserved2;
};
</programlisting>
<para>
The key requirements information.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <structfield>keyId</structfield></term>
<listitem><simpara>		the desired key value klass.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> <structfield>keyType</structfield></term>
<listitem><simpara>		the desired key type.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link> <structfield>keyUsage</structfield></term>
<listitem><simpara>		the desired key usage.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>keyBitsSize</structfield></term>
<listitem><simpara>	the desired key size (in bits!).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>keyUseWithList</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>eserved2</structfield></term>
<listitem><simpara>

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize ()</title>
<programlisting>int         xmlSecKeyReqInitialize          (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Initialize key requirements object. Caller is responsible for
cleaning it with <link linkend="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqFinalize">xmlSecKeyReqFinalize ()</title>
<programlisting>void        xmlSecKeyReqFinalize            (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Cleans the key requirements object initialized with <link linkend="xmlSecKeyReqInitialize">xmlSecKeyReqInitialize</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqReset">xmlSecKeyReqReset ()</title>
<programlisting>void        xmlSecKeyReqReset               (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Resets key requirements object for new key search.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqCopy">xmlSecKeyReqCopy ()</title>
<programlisting>int         xmlSecKeyReqCopy                (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> dst,
                                             <link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> src);</programlisting>
<para>
Copies key requirements from <parameter>src</parameter> object to <parameter>dst</parameter> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to destination object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to source object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success and a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqMatchKey">xmlSecKeyReqMatchKey ()</title>
<programlisting>int         xmlSecKeyReqMatchKey            (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Checks whether <parameter>key</parameter> matches key requirements <parameter>keyReq</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>1 if key matches requirements, 0 if not and a negative value
if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqMatchKeyValue">xmlSecKeyReqMatchKeyValue ()</title>
<programlisting>int         xmlSecKeyReqMatchKeyValue       (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> value);</programlisting>
<para>
Checks whether <parameter>keyValue</parameter> matches key requirements <parameter>keyReq</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>1 if key value matches requirements, 0 if not and a negative value
if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqDebugDump">xmlSecKeyReqDebugDump ()</title>
<programlisting>void        xmlSecKeyReqDebugDump           (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>keyReq</parameter> into <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReqDebugXmlDump">xmlSecKeyReqDebugXmlDump ()</title>
<programlisting>void        xmlSecKeyReqDebugXmlDump        (<link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>keyReq</parameter> into <parameter>output</parameter> in XML format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKey">struct xmlSecKey</title>
<programlisting>struct xmlSecKey {

    xmlChar*				name;
    xmlSecKeyDataPtr			value;
    xmlSecPtrListPtr			dataList;
    xmlSecKeyUsage			usage;
    time_t				notValidBefore;
    time_t				notValidAfter;    
};
</programlisting>
<para>
The key.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></term>
<listitem><simpara> 		the key name.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> <structfield>value</structfield></term>
<listitem><simpara>		the key value.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> <structfield>dataList</structfield></term>
<listitem><simpara>		the key data list.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyUsage">xmlSecKeyUsage</link> <structfield>usage</structfield></term>
<listitem><simpara>		the key usage.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="time-t">time_t</link> <structfield>notValidBefore</structfield></term>
<listitem><simpara>	the start key validity interval.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="time-t">time_t</link> <structfield>notValidAfter</structfield></term>
<listitem><simpara>	the end key validity interval.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCreate">xmlSecKeyCreate ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyCreate                (void);</programlisting>
<para>
Allocates and initializes new key. Caller is responsible for 
freeing returned object with <link linkend="xmlSecKeyDestroy">xmlSecKeyDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to newly allocated <parameter>xmlSecKey</parameter> structure
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDestroy">xmlSecKeyDestroy ()</title>
<programlisting>void        xmlSecKeyDestroy                (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Destroys the key created using <link linkend="xmlSecKeyCreate">xmlSecKeyCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyEmpty">xmlSecKeyEmpty ()</title>
<programlisting>void        xmlSecKeyEmpty                  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Clears the <parameter>key</parameter> data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDuplicate">xmlSecKeyDuplicate ()</title>
<programlisting><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> xmlSecKeyDuplicate             (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Creates a duplicate of the given <parameter>key</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to the <link linkend="xmlSecKey">xmlSecKey</link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to newly allocated <link linkend="xmlSecKey">xmlSecKey</link> structure
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCopy">xmlSecKeyCopy ()</title>
<programlisting>int         xmlSecKeyCopy                   (<link linkend="xmlSecKey">xmlSecKeyPtr</link> keyDst,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> keySrc);</programlisting>
<para>
Copies key data from <parameter>keySrc</parameter> to <parameter>keyDst</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyDst</parameter>&nbsp;:</term>
<listitem><simpara>		the destination key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keySrc</parameter>&nbsp;:</term>
<listitem><simpara>		the source key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetName">xmlSecKeyGetName ()</title>
<programlisting>const <link linkend="xmlChar">xmlChar</link>* xmlSecKeyGetName             (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets key name (see also <link linkend="xmlSecKeySetName">xmlSecKeySetName</link> function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>key name.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeySetName">xmlSecKeySetName ()</title>
<programlisting>int         xmlSecKeySetName                (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name);</programlisting>
<para>
Sets key name (see also <link linkend="xmlSecKeyGetName">xmlSecKeyGetName</link> function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>		the new key name.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetType">xmlSecKeyGetType ()</title>
<programlisting><link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> xmlSecKeyGetType          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets <parameter>key</parameter> type.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>key type.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetValue">xmlSecKeyGetValue ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyGetValue          (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Gets key value (see also <link linkend="xmlSecKeySetValue">xmlSecKeySetValue</link> function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>key value (crypto material).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeySetValue">xmlSecKeySetValue ()</title>
<programlisting>int         xmlSecKeySetValue               (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> value);</programlisting>
<para>
Sets key value (see also <link linkend="xmlSecKeyGetValue">xmlSecKeyGetValue</link> function).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&nbsp;:</term>
<listitem><simpara>		the new value.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGetData">xmlSecKeyGetData ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyGetData           (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);</programlisting>
<para>
Gets key's data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the requested data klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>additional data associated with the <parameter>key</parameter> (see also 
<link linkend="xmlSecKeyAdoptData">xmlSecKeyAdoptData</link> function).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyEnsureData">xmlSecKeyEnsureData ()</title>
<programlisting><link linkend="xmlSecKeyDataPtr">xmlSecKeyDataPtr</link> xmlSecKeyEnsureData        (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId);</programlisting>
<para>
If necessary, creates key data of <parameter>dataId</parameter> klass and adds to <parameter>key</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the requested data klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to key data or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyAdoptData">xmlSecKeyAdoptData ()</title>
<programlisting>int         xmlSecKeyAdoptData              (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data);</programlisting>
<para>
Adds <parameter>data</parameter> to the <parameter>key</parameter>. The <parameter>data</parameter> object will be destroyed
by <parameter>key</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDebugDump">xmlSecKeyDebugDump ()</title>
<programlisting>void        xmlSecKeyDebugDump              (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the information about the <parameter>key</parameter> to the <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDebugXmlDump">xmlSecKeyDebugXmlDump ()</title>
<programlisting>void        xmlSecKeyDebugXmlDump           (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the information about the <parameter>key</parameter> to the <parameter>output</parameter> in XML format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGenerate">xmlSecKeyGenerate ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyGenerate              (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             <link linkend="xmlSecSize">xmlSecSize</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Generates new key of requested klass <parameter>dataId</parameter> and <parameter>type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the requested key klass (rsa, dsa, aes, ...).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeBits</parameter>&nbsp;:</term>
<listitem><simpara>		the new key size (in bits!).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>		the new key type (session, permanent, ...).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyGenerateByName">xmlSecKeyGenerateByName ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyGenerateByName        (const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecSize">xmlSecSize</link> sizeBits,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Generates new key of requested <parameter>klass</parameter> and <parameter>type</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara>		the requested key klass name (rsa, dsa, aes, ...).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeBits</parameter>&nbsp;:</term>
<listitem><simpara>		the new key size (in bits!).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>		the new key type (session, permanent, ...).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyMatch">xmlSecKeyMatch ()</title>
<programlisting>int         xmlSecKeyMatch                  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecKeyReq">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Checks whether the <parameter>key</parameter> matches the given criteria.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to key name (may be NULL).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyReq</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key requirements.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>1 if the key satisfies the given criteria or 0 otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReadBuffer">xmlSecKeyReadBuffer ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyReadBuffer            (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             <link linkend="xmlSecBuffer">xmlSecBuffer</link> *buffer);</programlisting>
<para>
Reads the key value of klass <parameter>dataId</parameter> from a buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the key value data klass.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara>		the buffer that contains the binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReadBinaryFile">xmlSecKeyReadBinaryFile ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyReadBinaryFile        (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const char *filename);</programlisting>
<para>
Reads the key value of klass <parameter>dataId</parameter> from a binary file <parameter>filename</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the key value data klass.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the key binary filename.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyReadMemory">xmlSecKeyReadMemory ()</title>
<programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecKeyReadMemory            (<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> dataId,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);</programlisting>
<para>
Reads the key value of klass <parameter>dataId</parameter> from a memory block <parameter>data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara>		the key value data klass.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the memory containing the key
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara> 		the size of the memory block
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyIsValid">xmlSecKeyIsValid()</title>
<programlisting>#define     xmlSecKeyIsValid(key)</programlisting>
<para>
Macro. Returns 1 if <parameter>key</parameter> is not NULL and <parameter>key</parameter>-&gt;id is not NULL
or 0 otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> the pointer to key.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyCheckId">xmlSecKeyCheckId()</title>
<programlisting>#define     xmlSecKeyCheckId(key, keyId)</programlisting>
<para>
Macro. Returns 1 if <parameter>key</parameter> is valid and <parameter>key</parameter>'s id is equal to <parameter>keyId</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara> the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyId</parameter>&nbsp;:</term>
<listitem><simpara> the key Id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyPtrListId">xmlSecKeyPtrListId</title>
<programlisting>#define xmlSecKeyPtrListId	xmlSecKeyPtrListGetKlass()
</programlisting>
<para>
The keys list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyPtrListGetKlass">xmlSecKeyPtrListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecKeyPtrListGetKlass    (void);</programlisting>
<para>
The keys list klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>keys list id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
