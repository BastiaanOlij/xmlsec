<refentry id="xmlsec-ciphers">
<refmeta>
<refentrytitle>ciphers.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>ciphers.h</refname><refpurpose>The ciphers transform.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSecCipherTransformId">xmlSecCipherTransformId</link>;
int         (<link linkend="xmlSecCipherUpdateMethod">*xmlSecCipherUpdateMethod</link>)     (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> transform,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);
int         (<link linkend="xmlSecCipherFinalMethod">*xmlSecCipherFinalMethod</link>)      (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> transform);
struct      <link linkend="xmlSecCipherTransformIdStruct">xmlSecCipherTransformIdStruct</link>;
int         <link linkend="xmlSecCipherTransformRead">xmlSecCipherTransformRead</link>       (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecCipherTransformWrite">xmlSecCipherTransformWrite</link>      (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecCipherTransformFlush">xmlSecCipherTransformFlush</link>      (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform);
int         <link linkend="xmlSecEvpCipherUpdate">xmlSecEvpCipherUpdate</link>           (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> cipher,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecEvpCipherFinal">xmlSecEvpCipherFinal</link>            (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> cipher);
int         <link linkend="xmlSecCipherUpdate">xmlSecCipherUpdate</link>              (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecCipherFinal">xmlSecCipherFinal</link>               (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecCipherTransformId">xmlSecCipherTransformId</title>
<programlisting>typedef const struct _xmlSecCipherTransformIdStruct	*xmlSecCipherTransformId;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherUpdateMethod">xmlSecCipherUpdateMethod ()</title>
<programlisting>int         (*xmlSecCipherUpdateMethod)     (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> transform,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherFinalMethod">xmlSecCipherFinalMethod ()</title>
<programlisting>int         (*xmlSecCipherFinalMethod)      (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> transform);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherTransformIdStruct">struct xmlSecCipherTransformIdStruct</title>
<programlisting>struct xmlSecCipherTransformIdStruct {
/* same as xmlSecTransformId */    
xmlSecTransformType			type;
xmlSecTransformUsage		usage;
const xmlChar			*href;

xmlSecTransformCreateMethod		create;
xmlSecTransformDestroyMethod	destroy;
xmlSecTransformReadNodeMethod	read;

/* xmlSecBinTransform data/methods */
xmlSecKeyId				keyId;
xmlSecKeyType			encryption;
xmlSecKeyType			decryption;
xmlSecBinTransformSubType		binSubType;

xmlSecBinTransformAddKeyMethod	addBinKey;
xmlSecBinTransformReadMethod	readBin;
xmlSecBinTransformWriteMethod	writeBin;
xmlSecBinTransformFlushMethod	flushBin;    

/* xmlSecCipherTransform data/methods */
xmlSecCipherUpdateMethod		cipherUpdate;
xmlSecCipherFinalMethod		cipherFinal;
size_t				keySize;
size_t				ivSize;
size_t				bufInSize;
size_t				bufOutSize;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherTransformRead">xmlSecCipherTransformRead ()</title>
<programlisting>int         xmlSecCipherTransformRead       (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Reads data from previous transform, encrypts or decrypts them 
and returns in the output buffer.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to a cipher transform.
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> the output buffer.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> tje output buffer size.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes in the buffer or negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherTransformWrite">xmlSecCipherTransformWrite ()</title>
<programlisting>int         xmlSecCipherTransformWrite      (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Encrypts or decrypts the input data and writes them 
to the next transform.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the poiter to a cipher transform.
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> the input data buffer.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the input data size.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 if success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherTransformFlush">xmlSecCipherTransformFlush ()</title>
<programlisting>int         xmlSecCipherTransformFlush      (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform);</programlisting>
<para>
Writes the rest of data to previous transform.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to a cipher transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 if success or negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecEvpCipherUpdate">xmlSecEvpCipherUpdate ()</title>
<programlisting>int         xmlSecEvpCipherUpdate           (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> cipher,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Encrypts/decrypts new piece of data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cipher</parameter>&nbsp;:</entry>
<entry> the pointer to EVP_* cipher transform. 
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry> the input buffer.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the input buffer size.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes processed or a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecEvpCipherFinal">xmlSecEvpCipherFinal ()</title>
<programlisting>int         xmlSecEvpCipherFinal            (<link linkend="xmlSecCipherTransformPtr">xmlSecCipherTransformPtr</link> cipher);</programlisting>
<para>
Finalize encryption/decryption.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cipher</parameter>&nbsp;:</entry>
<entry> the pointer to EVP_* cipher transform. 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes processed or a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherUpdate">xmlSecCipherUpdate ()</title>
<programlisting>int         xmlSecCipherUpdate              (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Encrypts/decrypts new piece of data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to cipher transform. 
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry> the input buffer.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the input buffer size.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes processed or a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCipherFinal">xmlSecCipherFinal ()</title>
<programlisting>int         xmlSecCipherFinal               (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Finalize encryption/decryption.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to cipher transform. 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes processed or a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
