<refentry id="xmlsec-bn">
<refmeta>
<refentrytitle role="top_of_page">bn</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bn</refname>
<refpurpose>Big numbers support functions.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



enum        <link linkend="xmlSecBnFormat">xmlSecBnFormat</link>;
<link linkend="xmlSecBn">xmlSecBnPtr</link> <link linkend="xmlSecBnCreate">xmlSecBnCreate</link>                  (<link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="void">void</link>        <link linkend="xmlSecBnDestroy">xmlSecBnDestroy</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnInitialize">xmlSecBnInitialize</link>              (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="void">void</link>        <link linkend="xmlSecBnFinalize">xmlSecBnFinalize</link>                (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="xmlSecByte">xmlSecByte</link>* <link linkend="xmlSecBnGetData">xmlSecBnGetData</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnSetData">xmlSecBnSetData</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="xmlSecSize">xmlSecSize</link>  <link linkend="xmlSecBnGetSize">xmlSecBnGetSize</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="void">void</link>        <link linkend="xmlSecBnZero">xmlSecBnZero</link>                    (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnFromString">xmlSecBnFromString</link>              (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str,
                                             <link linkend="xmlSecSize">xmlSecSize</link> base);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecBnToString">xmlSecBnToString</link>                (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlSecSize">xmlSecSize</link> base);
<link linkend="int">int</link>         <link linkend="xmlSecBnFromHexString">xmlSecBnFromHexString</link>           (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecBnToHexString">xmlSecBnToHexString</link>             (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnFromDecString">xmlSecBnFromDecString</link>           (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecBnToDecString">xmlSecBnToDecString</link>             (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnMul">xmlSecBnMul</link>                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> multiplier);
<link linkend="int">int</link>         <link linkend="xmlSecBnDiv">xmlSecBnDiv</link>                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> divider,
                                             <link linkend="int">int</link> *mod);
<link linkend="int">int</link>         <link linkend="xmlSecBnAdd">xmlSecBnAdd</link>                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> delta);
<link linkend="int">int</link>         <link linkend="xmlSecBnReverse">xmlSecBnReverse</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);
<link linkend="int">int</link>         <link linkend="xmlSecBnCompare">xmlSecBnCompare</link>                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);
<link linkend="int">int</link>         <link linkend="xmlSecBnCompareReverse">xmlSecBnCompareReverse</link>          (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);
<link linkend="int">int</link>         <link linkend="xmlSecBnGetNodeValue">xmlSecBnGetNodeValue</link>            (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse);
<link linkend="int">int</link>         <link linkend="xmlSecBnSetNodeValue">xmlSecBnSetNodeValue</link>            (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse,
                                             <link linkend="int">int</link> addLineBreaks);
<link linkend="int">int</link>         <link linkend="xmlSecBnBlobSetNodeValue">xmlSecBnBlobSetNodeValue</link>        (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse,
                                             <link linkend="int">int</link> addLineBreaks);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Big numbers support functions.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="xmlSecBnFormat" role="enum">enum xmlSecBnFormat</title>
<indexterm><primary>xmlSecBnFormat</primary></indexterm><programlisting>typedef enum {
    xmlSecBnBase64,
    xmlSecBnHex,
    xmlSecBnDec
} xmlSecBnFormat;
</programlisting>
<para>
The big numbers formats.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="xmlSecBnBase64" role="constant"><literal>xmlSecBnBase64</literal></term>
<listitem><simpara>             the base64 decoded binary blob.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="xmlSecBnHex" role="constant"><literal>xmlSecBnHex</literal></term>
<listitem><simpara>                the hex number.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="xmlSecBnDec" role="constant"><literal>xmlSecBnDec</literal></term>
<listitem><simpara>                the decimal number.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnCreate" role="function">xmlSecBnCreate ()</title>
<indexterm><primary>xmlSecBnCreate</primary></indexterm><programlisting><link linkend="xmlSecBn">xmlSecBnPtr</link> xmlSecBnCreate                  (<link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Creates a new BN object. Caller is responsible for destroying it
by calling <parameter>xmlSecBnDestroy</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>       the initial allocated BN size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the newly BN or a NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnDestroy" role="function">xmlSecBnDestroy ()</title>
<indexterm><primary>xmlSecBnDestroy</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecBnDestroy                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Destroys <parameter>bn</parameter> object created with <parameter>xmlSecBnCreate</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnInitialize" role="function">xmlSecBnInitialize ()</title>
<indexterm><primary>xmlSecBnInitialize</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnInitialize              (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Initializes a BN object. Caller is responsible for destroying it
by calling <parameter>xmlSecBnFinalize</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>       the initial allocated BN size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnFinalize" role="function">xmlSecBnFinalize ()</title>
<indexterm><primary>xmlSecBnFinalize</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecBnFinalize                (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Destroys <parameter>bn</parameter> object created with <parameter>xmlSecBnInitialize</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnGetData" role="function">xmlSecBnGetData ()</title>
<indexterm><primary>xmlSecBnGetData</primary></indexterm><programlisting><link linkend="xmlSecByte">xmlSecByte</link>* xmlSecBnGetData                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Gets pointer to the binary <parameter>bn</parameter> representation.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to binary BN data or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnSetData" role="function">xmlSecBnSetData ()</title>
<indexterm><primary>xmlSecBnSetData</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnSetData                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Sets the value of <parameter>bn</parameter> to <parameter>data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>       the pointer to new BN binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>       the size of new BN data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnGetSize" role="function">xmlSecBnGetSize ()</title>
<indexterm><primary>xmlSecBnGetSize</primary></indexterm><programlisting><link linkend="xmlSecSize">xmlSecSize</link>  xmlSecBnGetSize                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Gets the size of binary data in <parameter>bn</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the size of binary data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnZero" role="function">xmlSecBnZero ()</title>
<indexterm><primary>xmlSecBnZero</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecBnZero                    (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Sets the value of <parameter>bn</parameter> to zero.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnFromString" role="function">xmlSecBnFromString ()</title>
<indexterm><primary>xmlSecBnFromString</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnFromString              (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str,
                                             <link linkend="xmlSecSize">xmlSecSize</link> base);</programlisting>
<para>
Reads <parameter>bn</parameter> from string <parameter>str</parameter> assuming it has base <parameter>base</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>        the string with BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>base</parameter>&nbsp;:</term>
<listitem><simpara>       the base for <parameter>str</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnToString" role="function">xmlSecBnToString ()</title>
<indexterm><primary>xmlSecBnToString</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecBnToString                (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlSecSize">xmlSecSize</link> base);</programlisting>
<para>
Writes <parameter>bn</parameter> to string with base <parameter>base</parameter>. Caller is responsible for
freeing returned string with <parameter>xmlFree</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>base</parameter>&nbsp;:</term>
<listitem><simpara>       the base for returned string.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the string represenataion if BN or a NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnFromHexString" role="function">xmlSecBnFromHexString ()</title>
<indexterm><primary>xmlSecBnFromHexString</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnFromHexString           (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str);</programlisting>
<para>
Reads <parameter>bn</parameter> from hex string <parameter>str</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>        the string with BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnToHexString" role="function">xmlSecBnToHexString ()</title>
<indexterm><primary>xmlSecBnToHexString</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecBnToHexString             (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Writes <parameter>bn</parameter> to hex string. Caller is responsible for
freeing returned string with <parameter>xmlFree</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the string represenataion if BN or a NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnFromDecString" role="function">xmlSecBnFromDecString ()</title>
<indexterm><primary>xmlSecBnFromDecString</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnFromDecString           (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlChar">xmlChar</link> *str);</programlisting>
<para>
Reads <parameter>bn</parameter> from decimal string <parameter>str</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>        the string with BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnToDecString" role="function">xmlSecBnToDecString ()</title>
<indexterm><primary>xmlSecBnToDecString</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecBnToDecString             (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Writes <parameter>bn</parameter> to decimal string. Caller is responsible for
freeing returned string with <parameter>xmlFree</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the string represenataion if BN or a NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnMul" role="function">xmlSecBnMul ()</title>
<indexterm><primary>xmlSecBnMul</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnMul                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> multiplier);</programlisting>
<para>
Multiplies <parameter>bn</parameter> with <parameter>multiplier</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>                 the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>multiplier</parameter>&nbsp;:</term>
<listitem><simpara>         the multiplier.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnDiv" role="function">xmlSecBnDiv ()</title>
<indexterm><primary>xmlSecBnDiv</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnDiv                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> divider,
                                             <link linkend="int">int</link> *mod);</programlisting>
<para>
Divides <parameter>bn</parameter> by <parameter>divider</parameter> and places modulus into <parameter>mod</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>divider</parameter>&nbsp;:</term>
<listitem><simpara>    the divider
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mod</parameter>&nbsp;:</term>
<listitem><simpara>        the pointer for modulus result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnAdd" role="function">xmlSecBnAdd ()</title>
<indexterm><primary>xmlSecBnAdd</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnAdd                     (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="int">int</link> delta);</programlisting>
<para>
Adds <parameter>delta</parameter> to <parameter>bn</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>delta</parameter>&nbsp;:</term>
<listitem><simpara>      the delta.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnReverse" role="function">xmlSecBnReverse ()</title>
<indexterm><primary>xmlSecBnReverse</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnReverse                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn);</programlisting>
<para>
Reverses bytes order in <parameter>bn</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnCompare" role="function">xmlSecBnCompare ()</title>
<indexterm><primary>xmlSecBnCompare</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnCompare                 (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);</programlisting>
<para>
Compares the <parameter>bn</parameter> with <parameter>data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>       the data to compare BN to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>   the <parameter>data</parameter> size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if data is equal, negative value if <parameter>bn</parameter> is less or positive value if <parameter>bn</parameter>
is greater than <parameter>data</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnCompareReverse" role="function">xmlSecBnCompareReverse ()</title>
<indexterm><primary>xmlSecBnCompareReverse</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnCompareReverse          (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize);</programlisting>
<para>
Compares the <parameter>bn</parameter> with reverse <parameter>data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>       the data to compare BN to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>   the <parameter>data</parameter> size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 if data is equal, negative value if <parameter>bn</parameter> is less or positive value if <parameter>bn</parameter>
is greater than <parameter>data</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnGetNodeValue" role="function">xmlSecBnGetNodeValue ()</title>
<indexterm><primary>xmlSecBnGetNodeValue</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnGetNodeValue            (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse);</programlisting>
<para>
Converts the node content from <parameter>format</parameter> to <parameter>bn</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>         the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara>        the poitner to an XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>     the BN format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reverse</parameter>&nbsp;:</term>
<listitem><simpara>    if set then reverse read buffer after reading.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success and a negative values if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnSetNodeValue" role="function">xmlSecBnSetNodeValue ()</title>
<indexterm><primary>xmlSecBnSetNodeValue</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnSetNodeValue            (<link linkend="xmlSecBn">xmlSecBnPtr</link> bn,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse,
                                             <link linkend="int">int</link> addLineBreaks);</programlisting>
<para>
Converts the <parameter>bn</parameter> and sets it to node content.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bn</parameter>&nbsp;:</term>
<listitem><simpara>                 the pointer to BN.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara>                the poitner to an XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the BN format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reverse</parameter>&nbsp;:</term>
<listitem><simpara>            the flag that indicates whether to reverse the buffer before writing.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>addLineBreaks</parameter>&nbsp;:</term>
<listitem><simpara>      the flag; it is equal to 1 then linebreaks will be added before and after new buffer content.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success and a negative values if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBnBlobSetNodeValue" role="function">xmlSecBnBlobSetNodeValue ()</title>
<indexterm><primary>xmlSecBnBlobSetNodeValue</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBnBlobSetNodeValue        (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlSecBnFormat">xmlSecBnFormat</link> format,
                                             <link linkend="int">int</link> reverse,
                                             <link linkend="int">int</link> addLineBreaks);</programlisting>
<para>
Converts the <parameter>blob</parameter> and sets it to node content.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>       the pointer to BN blob.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>   the size of BN blob.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara>        the poitner to an XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>     the BN format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reverse</parameter>&nbsp;:</term>
<listitem><simpara>    the flag that indicates whether to reverse the buffer before writing.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>addLineBreaks</parameter>&nbsp;:</term>
<listitem><simpara>  if the flag is equal to 1 then
             linebreaks will be added before and after
             new buffer content.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success and a negative values if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
