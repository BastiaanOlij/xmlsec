<refentry id="xmlsec-keyinfo">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-keyinfo.top_of_page">keyinfo</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keyinfo</refname>
<refpurpose><ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node parser.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-keyinfo.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoNodeRead">xmlSecKeyInfoNodeRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoNodeWrite">xmlSecKeyInfoNodeWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyInfoCtx"><returnvalue>xmlSecKeyInfoCtxPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxCreate">xmlSecKeyInfoCtxCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxDestroy">xmlSecKeyInfoCtxDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxInitialize">xmlSecKeyInfoCtxInitialize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxFinalize">xmlSecKeyInfoCtxFinalize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxReset">xmlSecKeyInfoCtxReset</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxCopyUserPref">xmlSecKeyInfoCtxCopyUserPref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxCreateEncCtx">xmlSecKeyInfoCtxCreateEncCtx</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxDebugDump">xmlSecKeyInfoCtxDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtxDebugXmlDump">xmlSecKeyInfoCtxDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataNameGetKlass">xmlSecKeyDataNameGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataValueGetKlass">xmlSecKeyDataValueGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataRetrievalMethodGetKlass">xmlSecKeyDataRetrievalMethodGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataEncryptedKeyGetKlass">xmlSecKeyDataEncryptedKeyGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-keyinfo.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecKeyInfoMode">xmlSecKeyInfoMode</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-DONT-STOP-ON-KEY-FOUND:CAPS">XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-STOP-ON-UNKNOWN-CHILD:CAPS">XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-KEYNAME-STOP-ON-UNKNOWN:CAPS">XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-KEYVALUE-STOP-ON-UNKNOWN-CHILD:CAPS">XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-UNKNOWN-HREF:CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-MISMATCH-HREF:CAPS">XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CHILD:CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-DONT-VERIFY-CERTS:CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CERT:CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-INVALID-CERT:CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-ENCKEY-DONT-STOP-ON-FAILED-DECRYPTION:CAPS">XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-STOP-ON-EMPTY-NODE:CAPS">XMLSEC_KEYINFO_FLAGS_STOP_ON_EMPTY_NODE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-KEYINFO-FLAGS-X509DATA-SKIP-STRICT-CHECKS:CAPS">XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataNameId">xmlSecKeyDataNameId</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataValueId">xmlSecKeyDataValueId</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataRetrievalMethodId">xmlSecKeyDataRetrievalMethodId</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataEncryptedKeyId">xmlSecKeyDataEncryptedKeyId</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-keyinfo.description" role="desc">
<title role="desc.title">Description</title>
<para>
<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node parser.
</para>

</refsect1>
<refsect1 id="xmlsec-keyinfo.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecKeyInfoNodeRead" role="function">
<title>xmlSecKeyInfoNodeRead&#160;()</title>
<indexterm zone="xmlSecKeyInfoNodeRead"><primary>xmlSecKeyInfoNodeRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyInfoNodeRead (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> keyInfoNode</parameter>,
                       <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                       <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Parses the &lt;dsig:KeyInfo/> element <parameter>keyInfoNode</parameter>
, extracts the key data
and stores into <parameter>key</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoNode</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to result key object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or -1 if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoNodeWrite" role="function">
<title>xmlSecKeyInfoNodeWrite&#160;()</title>
<indexterm zone="xmlSecKeyInfoNodeWrite"><primary>xmlSecKeyInfoNodeWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyInfoNodeWrite (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> keyInfoNode</parameter>,
                        <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                        <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Writes the <parameter>key</parameter>
 into the &lt;dsig:KeyInfo/> element template <parameter>keyInfoNode</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoNode</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to key object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or -1 if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxCreate" role="function">
<title>xmlSecKeyInfoCtxCreate&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxCreate"><primary>xmlSecKeyInfoCtxCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyInfoCtx"><returnvalue>xmlSecKeyInfoCtxPtr</returnvalue></link>
xmlSecKeyInfoCtxCreate (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> keysMngr</parameter>);</programlisting>
<para>Allocates and initializes &lt;dsig:KeyInfo/> element processing context.
Caller is responsible for freeing it by calling <link linkend="xmlSecKeyInfoCtxDestroy"><type>xmlSecKeyInfoCtxDestroy</type></link>
function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keysMngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager (may be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly allocated object or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxDestroy" role="function">
<title>xmlSecKeyInfoCtxDestroy&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxDestroy"><primary>xmlSecKeyInfoCtxDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyInfoCtxDestroy (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Destroys <parameter>keyInfoCtx</parameter>
 object created with <link linkend="xmlSecKeyInfoCtxCreate"><type>xmlSecKeyInfoCtxCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxInitialize" role="function">
<title>xmlSecKeyInfoCtxInitialize&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxInitialize"><primary>xmlSecKeyInfoCtxInitialize</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyInfoCtxInitialize (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>,
                            <parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> keysMngr</parameter>);</programlisting>
<para>Initializes &lt;dsig:KeyInfo/> element processing context. Caller is
responsible for cleaning it up by <link linkend="xmlSecKeyInfoCtxFinalize"><type>xmlSecKeyInfoCtxFinalize</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keysMngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager (may be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success and a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxFinalize" role="function">
<title>xmlSecKeyInfoCtxFinalize&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxFinalize"><primary>xmlSecKeyInfoCtxFinalize</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyInfoCtxFinalize (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Cleans up the <parameter>keyInfoCtx</parameter>
 initialized with <link linkend="xmlSecKeyInfoCtxInitialize"><type>xmlSecKeyInfoCtxInitialize</type></link>
function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxReset" role="function">
<title>xmlSecKeyInfoCtxReset&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxReset"><primary>xmlSecKeyInfoCtxReset</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyInfoCtxReset (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Resets the <parameter>keyInfoCtx</parameter>
 state. User settings are not changed.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxCopyUserPref" role="function">
<title>xmlSecKeyInfoCtxCopyUserPref&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxCopyUserPref"><primary>xmlSecKeyInfoCtxCopyUserPref</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyInfoCtxCopyUserPref (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> dst</parameter>,
                              <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> src</parameter>);</programlisting>
<para>Copies user preferences from <parameter>src</parameter>
 context to <parameter>dst</parameter>
 context.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dst</para></entry>
<entry role="parameter_description"><para>the pointer to destination context object.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>the pointer to source context object.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success and a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxCreateEncCtx" role="function">
<title>xmlSecKeyInfoCtxCreateEncCtx&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxCreateEncCtx"><primary>xmlSecKeyInfoCtxCreateEncCtx</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyInfoCtxCreateEncCtx (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Creates encryption context form processing &lt;enc:EncryptedKey/> child
of &lt;dsig:KeyInfo/> element.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success and a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxDebugDump" role="function">
<title>xmlSecKeyInfoCtxDebugDump&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxDebugDump"><primary>xmlSecKeyInfoCtxDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyInfoCtxDebugDump (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>,
                           <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints user settings and current context state to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the output file pointer.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyInfoCtxDebugXmlDump" role="function">
<title>xmlSecKeyInfoCtxDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecKeyInfoCtxDebugXmlDump"><primary>xmlSecKeyInfoCtxDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyInfoCtxDebugXmlDump (<parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>,
                              <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints user settings and current context state in XML format to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the output file pointer.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataNameGetKlass" role="function">
<title>xmlSecKeyDataNameGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataNameGetKlass"><primary>xmlSecKeyDataNameGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataNameGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The &lt;dsig:KeyName/> element key data klass
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-KeyName"><type>sec-KeyName</type></link>):</para>
<para>The KeyName element contains a string value (in which white space is
significant) which may be used by the signer to communicate a key
identifier to the recipient. Typically, KeyName contains an identifier
related to the key pair used to sign the message, but it may contain
other protocol-related information that indirectly identifies a key pair.
(Common uses of KeyName include simple string names for keys, a key index,
a distinguished name (DN), an email address, etc.)</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the &lt;dsig:KeyName/> element processing key data klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataValueGetKlass" role="function">
<title>xmlSecKeyDataValueGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataValueGetKlass"><primary>xmlSecKeyDataValueGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataValueGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The &lt;dsig:KeyValue/> element key data klass
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-KeyValue"><type>sec-KeyValue</type></link>):</para>
<para>The KeyValue element contains a single public key that may be useful in
validating the signature.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the &lt;dsig:KeyValue/> element processing key data klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataRetrievalMethodGetKlass" role="function">
<title>xmlSecKeyDataRetrievalMethodGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataRetrievalMethodGetKlass"><primary>xmlSecKeyDataRetrievalMethodGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataRetrievalMethodGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The &lt;dsig:RetrievalMethod/> element key data klass
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-RetrievalMethod"><type>sec-RetrievalMethod</type></link>):
A RetrievalMethod element within KeyInfo is used to convey a reference to
KeyInfo information that is stored at another location. For example,
several signatures in a document might use a key verified by an X.509v3
certificate chain appearing once in the document or remotely outside the
document; each signature's KeyInfo can reference this chain using a single
RetrievalMethod element instead of including the entire chain with a
sequence of X509Certificate elements.</para>
<para>RetrievalMethod uses the same syntax and dereferencing behavior as
Reference's URI and The Reference Processing Model.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the &lt;dsig:RetrievalMethod/> element processing key data klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataEncryptedKeyGetKlass" role="function">
<title>xmlSecKeyDataEncryptedKeyGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataEncryptedKeyGetKlass"><primary>xmlSecKeyDataEncryptedKeyGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataEncryptedKeyGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The &lt;enc:EncryptedKey/> element key data klass
(http://www.w3.org/TR/xmlenc-core/<link linkend="sec-EncryptedKey"><type>sec-EncryptedKey</type></link>):</para>
<para>The EncryptedKey element is used to transport encryption keys from
the originator to a known recipient(s). It may be used as a stand-alone
XML document, be placed within an application document, or appear inside
an EncryptedData element as a child of a ds:KeyInfo element. The key value
is always encrypted to the recipient(s). When EncryptedKey is decrypted the
resulting octets are made available to the EncryptionMethod algorithm
without any additional processing.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the &lt;enc:EncryptedKey/> element processing key data klass.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-keyinfo.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecKeyInfoMode" role="enum">
<title>enum xmlSecKeyInfoMode</title>
<indexterm zone="xmlSecKeyInfoMode"><primary>xmlSecKeyInfoMode</primary></indexterm>
<para>The <parameter>xmlSecKeyInfoCtx</parameter>
 operation mode (read or write).</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyInfoModeRead">xmlSecKeyInfoModeRead</para></entry>
<entry role="enum_member_description"><para>read &lt;dsig:KeyInfo /> element.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyInfoModeWrite">xmlSecKeyInfoModeWrite</para></entry>
<entry role="enum_member_description"><para>write &lt;dsig:KeyInfo /> element.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-DONT-STOP-ON-KEY-FOUND:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-DONT-STOP-ON-KEY-FOUND:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_DONT_STOP_ON_KEY_FOUND             0x00000001
</programlisting>
<para>If flag is set then we will continue reading &lt;dsig:KeyInfo />
element even when key is already found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-STOP-ON-UNKNOWN-CHILD:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-STOP-ON-UNKNOWN-CHILD:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_STOP_ON_UNKNOWN_CHILD              0x00000002
</programlisting>
<para>If flag is set then we abort if an unknown &lt;dsig:KeyInfo />
child is found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-KEYNAME-STOP-ON-UNKNOWN:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-KEYNAME-STOP-ON-UNKNOWN:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_KEYNAME_STOP_ON_UNKNOWN            0x00000004
</programlisting>
<para>If flags is set then we abort if an unknown key name
(content of &lt;dsig:KeyName /> element) is found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-KEYVALUE-STOP-ON-UNKNOWN-CHILD:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-KEYVALUE-STOP-ON-UNKNOWN-CHILD:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_KEYVALUE_STOP_ON_UNKNOWN_CHILD     0x00000008
</programlisting>
<para>If flags is set then we abort if an unknown &lt;dsig:KeyValue />
child is found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-UNKNOWN-HREF:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-UNKNOWN-HREF:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_UNKNOWN_HREF    0x00000010
</programlisting>
<para>If flag is set then we abort if an unknown href attribute
of &lt;dsig:RetrievalMethod /> element is found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-MISMATCH-HREF:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-RETRMETHOD-STOP-ON-MISMATCH-HREF:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_RETRMETHOD_STOP_ON_MISMATCH_HREF   0x00000020
</programlisting>
<para>If flag is set then we abort if an href attribute &lt;dsig:RetrievalMethod />
element does not match the real key data type.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CHILD:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CHILD:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CHILD     0x00000100
</programlisting>
<para>If flags is set then we abort if an unknown &lt;dsig:X509Data />
child is found.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-X509DATA-DONT-VERIFY-CERTS:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-X509DATA-DONT-VERIFY-CERTS:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_X509DATA_DONT_VERIFY_CERTS         0x00000200
</programlisting>
<para>If flag is set then we'll load certificates from &lt;dsig:X509Data />
element without verification.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CERT:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-UNKNOWN-CERT:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_UNKNOWN_CERT      0x00000400
</programlisting>
<para>If flag is set then we'll stop when we could not resolve reference
to certificate from &lt;dsig:X509IssuerSerial />, &lt;dsig:X509SKI /> or
&lt;dsig:X509SubjectName /> elements.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-INVALID-CERT:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-X509DATA-STOP-ON-INVALID-CERT:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_X509DATA_STOP_ON_INVALID_CERT      0x00000800
</programlisting>
<para>If the flag is set then we'll stop when &lt;dsig:X509Data /> element
processing does not return a verified certificate.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-ENCKEY-DONT-STOP-ON-FAILED-DECRYPTION:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-ENCKEY-DONT-STOP-ON-FAILED-DECRYPTION:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_ENCKEY_DONT_STOP_ON_FAILED_DECRYPTION 0x00001000
</programlisting>
<para>If the flag is set then we'll stop when &lt;enc:EncryptedKey /> element
processing fails.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-STOP-ON-EMPTY-NODE:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_STOP_ON_EMPTY_NODE</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-STOP-ON-EMPTY-NODE:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_STOP_ON_EMPTY_NODE</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_STOP_ON_EMPTY_NODE                 0x00002000
</programlisting>
<para>If the flag is set then we'll stop when we found an empty node.
Otherwise we just ignore it.</para>
</refsect2>
<refsect2 id="XMLSEC-KEYINFO-FLAGS-X509DATA-SKIP-STRICT-CHECKS:CAPS" role="macro">
<title>XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS</title>
<indexterm zone="XMLSEC-KEYINFO-FLAGS-X509DATA-SKIP-STRICT-CHECKS:CAPS"><primary>XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS</primary></indexterm>
<programlisting language="C">#define XMLSEC_KEYINFO_FLAGS_X509DATA_SKIP_STRICT_CHECKS        0x00004000
</programlisting>
<para>If the flag is set then we'll skip strict checking of certs and CRLs</para>
</refsect2>
<refsect2 id="xmlSecKeyInfoCtx" role="struct">
<title>struct xmlSecKeyInfoCtx</title>
<indexterm zone="xmlSecKeyInfoCtx"><primary>xmlSecKeyInfoCtx</primary></indexterm>
<programlisting language="C">struct xmlSecKeyInfoCtx {
    void*                               userData;
    unsigned int                        flags;
    unsigned int                        flags2;
    xmlSecKeysMngrPtr                   keysMngr;
    xmlSecKeyInfoMode                   mode;
    xmlSecPtrList                       enabledKeyData;
    int                                 base64LineSize;

    /* RetrievalMethod */
    xmlSecTransformCtx                  retrievalMethodCtx;
    int                                 maxRetrievalMethodLevel;


    /* EncryptedKey */
    xmlSecEncCtxPtr                     encCtx;
    int                                 maxEncryptedKeyLevel;



    /* x509 certificates */
    time_t                              certsVerificationTime;
    int                                 certsVerificationDepth;


    /* PGP */
    void*                               pgpReserved;    /* TODO */

    /* internal data */
    int                                 curRetrievalMethodLevel;
    int                                 curEncryptedKeyLevel;
    xmlSecKeyReq                        keyReq;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The &lt;dsig:KeyInfo /> reading or writing context.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyInfoCtx.userData">userData</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to user data (xmlsec and xmlsec-crypto
never touch this).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>unsigned&#160;<link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.flags">flags</structfield>;</para></entry>
<entry role="struct_member_description"><para>the bit mask for flags that control processin.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>unsigned&#160;<link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.flags2">flags2</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.keysMngr">keysMngr</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to current keys manager.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyInfoMode"><type>xmlSecKeyInfoMode</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.mode">mode</structfield>;</para></entry>
<entry role="struct_member_description"><para>do we read or write &lt;dsig:KeyInfo /> element.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecPtrList"><type>xmlSecPtrList</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.enabledKeyData">enabledKeyData</structfield>;</para></entry>
<entry role="struct_member_description"><para>the list of enabled <parameter>xmlSecKeyDataId</parameter>
(if list is
empty then all data ids are enabled).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.base64LineSize">base64LineSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the max columns size for base64 encoding.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformCtx"><type>xmlSecTransformCtx</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.retrievalMethodCtx">retrievalMethodCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the transforms context for &lt;dsig:RetrievalMethod />
element processing.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.maxRetrievalMethodLevel">maxRetrievalMethodLevel</structfield>;</para></entry>
<entry role="struct_member_description"><para>the max recursion level when processing
&lt;dsig:RetrievalMethod /> element; default level is 1
(see also <parameter>curRetrievalMethodLevel</parameter>
).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecEncCtx"><type>xmlSecEncCtxPtr</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.encCtx">encCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the encryption context for &lt;dsig:EncryptedKey /> element
processing.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.maxEncryptedKeyLevel">maxEncryptedKeyLevel</structfield>;</para></entry>
<entry role="struct_member_description"><para>the max recursion level when processing
&lt;enc:EncryptedKey /> element; default level is 1
(see <parameter>curEncryptedKeyLevel</parameter>
).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="time-t"><type>time_t</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.certsVerificationTime">certsVerificationTime</structfield>;</para></entry>
<entry role="struct_member_description"><para>the time to use for X509 certificates verification
("not valid before" and "not valid after" checks);
if <parameter>certsVerificationTime</parameter>
is equal to 0 (default)
then we verify certificates against the system's
clock "now".</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.certsVerificationDepth">certsVerificationDepth</structfield>;</para></entry>
<entry role="struct_member_description"><para>the max certifications chain length (default is 9).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyInfoCtx.pgpReserved">pgpReserved</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for PGP.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.curRetrievalMethodLevel">curRetrievalMethodLevel</structfield>;</para></entry>
<entry role="struct_member_description"><para>the current &lt;dsig:RetrievalMethod /> element
processing level (see <parameter>maxRetrievalMethodLevel</parameter>
).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.curEncryptedKeyLevel">curEncryptedKeyLevel</structfield>;</para></entry>
<entry role="struct_member_description"><para>the current &lt;enc:EncryptedKey /> element
processing level (see <parameter>maxEncryptedKeyLevel</parameter>
).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyReq"><type>xmlSecKeyReq</type></link>&#160;<structfield id="xmlSecKeyInfoCtx.keyReq">keyReq</structfield>;</para></entry>
<entry role="struct_member_description"><para>the current key requirements.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyInfoCtx.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyInfoCtx.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyDataNameId" role="macro">
<title>xmlSecKeyDataNameId</title>
<indexterm zone="xmlSecKeyDataNameId"><primary>xmlSecKeyDataNameId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataNameId             xmlSecKeyDataNameGetKlass()
</programlisting>
<para>The &lt;dsig:KeyName> processing class.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataValueId" role="macro">
<title>xmlSecKeyDataValueId</title>
<indexterm zone="xmlSecKeyDataValueId"><primary>xmlSecKeyDataValueId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataValueId            xmlSecKeyDataValueGetKlass()
</programlisting>
<para>The &lt;dsig:KeyValue> processing class.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataRetrievalMethodId" role="macro">
<title>xmlSecKeyDataRetrievalMethodId</title>
<indexterm zone="xmlSecKeyDataRetrievalMethodId"><primary>xmlSecKeyDataRetrievalMethodId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataRetrievalMethodId  xmlSecKeyDataRetrievalMethodGetKlass()
</programlisting>
<para>The &lt;dsig:RetrievalMethod> processing class.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataEncryptedKeyId" role="macro">
<title>xmlSecKeyDataEncryptedKeyId</title>
<indexterm zone="xmlSecKeyDataEncryptedKeyId"><primary>xmlSecKeyDataEncryptedKeyId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataEncryptedKeyId     xmlSecKeyDataEncryptedKeyGetKlass()
</programlisting>
<para>The &lt;enc:EncryptedKey> processing class.</para>
</refsect2>

</refsect1>

</refentry>
