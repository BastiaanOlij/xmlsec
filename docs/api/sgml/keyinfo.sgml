<refentry id="xmlsec-keyinfo">
<refmeta>
<refentrytitle>keyinfo.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>keyinfo.h</refname><refpurpose>The &lt;dsig:KeyInfo&gt; element manipulation functions.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



int         <link linkend="xmlSecKeyInfoNodeRead">xmlSecKeyInfoNodeRead</link>           (<link linkend="xmlNodePtr">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
int         <link linkend="xmlSecKeyInfoNodeWrite">xmlSecKeyInfoNodeWrite</link>          (<link linkend="xmlNodePtr">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);
#define     <link linkend="xmlSecKeyDataNameId">xmlSecKeyDataNameId</link>
#define     <link linkend="xmlSecKeyDataValueId">xmlSecKeyDataValueId</link>
#define     <link linkend="xmlSecKeyDataRetrievalMethodId">xmlSecKeyDataRetrievalMethodId</link>
#define     <link linkend="xmlSecKeyDataEncryptedKeyId">xmlSecKeyDataEncryptedKeyId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataNameGetKlass">xmlSecKeyDataNameGetKlass</link>   (void);
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataValueGetKlass">xmlSecKeyDataValueGetKlass</link>  (void);
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataRetrievalMethodGetKlass">xmlSecKeyDataRetrievalMethodGetKlass</link>
                                            (void);
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataEncryptedKeyGetKlass">xmlSecKeyDataEncryptedKeyGetKlass</link>
                                            (void);
struct      <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link>;
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecKeyInfoNodeRead">xmlSecKeyInfoNodeRead ()</title>
<programlisting>int         xmlSecKeyInfoNodeRead           (<link linkend="xmlNodePtr">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Parses the &lt;dsig:KeyInfo&gt; element and extracts the key (with required 
id, type and usage).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyInfoNode</parameter>&nbsp;:</entry>
<entry> the pointer to &lt;dsig:KeyInfo&gt; node.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>keyInfoCtx</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> structure.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoNodeWrite">xmlSecKeyInfoNodeWrite ()</title>
<programlisting>int         xmlSecKeyInfoNodeWrite          (<link linkend="xmlNodePtr">xmlNodePtr</link> keyInfoNode,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="xmlSecKeyInfoCtxPtr">xmlSecKeyInfoCtxPtr</link> keyInfoCtx);</programlisting>
<para>
Writes the key into the &lt;dsig:KeyInfo&gt; template <parameter>keyInfoNode</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyInfoNode</parameter>&nbsp;:</entry>
<entry> the pointer to &lt;dsig:KeyInfo&gt; node.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the key.
</entry></row>
<row><entry align="right"><parameter>keyInfoCtx</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> structure.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or -1 if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataNameId">xmlSecKeyDataNameId</title>
<programlisting>#define xmlSecKeyDataNameId 		xmlSecKeyDataNameGetKlass()
</programlisting>
<para>
The &lt;dsig:KeyName&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataValueId">xmlSecKeyDataValueId</title>
<programlisting>#define xmlSecKeyDataValueId		xmlSecKeyDataValueGetKlass()
</programlisting>
<para>
The &lt;dsig:KeyValue&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRetrievalMethodId">xmlSecKeyDataRetrievalMethodId</title>
<programlisting>#define xmlSecKeyDataRetrievalMethodId	xmlSecKeyDataRetrievalMethodGetKlass()
</programlisting>
<para>
The &lt;dsig:RetrievalMethod&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataEncryptedKeyId">xmlSecKeyDataEncryptedKeyId</title>
<programlisting>#define xmlSecKeyDataEncryptedKeyId	xmlSecKeyDataEncryptedKeyGetKlass()
</programlisting>
<para>
The &lt;enc:EncryptedKey&gt; processing class.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataNameGetKlass">xmlSecKeyDataNameGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataNameGetKlass   (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataValueGetKlass">xmlSecKeyDataValueGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataValueGetKlass  (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRetrievalMethodGetKlass">xmlSecKeyDataRetrievalMethodGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataRetrievalMethodGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataEncryptedKeyGetKlass">xmlSecKeyDataEncryptedKeyGetKlass ()</title>
<programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataEncryptedKeyGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyInfoCtx">struct xmlSecKeyInfoCtx</title>
<programlisting>struct xmlSecKeyInfoCtx {
    void*				userData;
    unsigned int			flags;
    unsigned int			flags2;
    xmlSecKeysMngrPtr			keysMngr;
    xmlSecKeyInfoMode			mode;
    xmlSecPtrList			enabledKeyData;
    int					base64LineSize;
        
    /* RetrievalMethod */
    xmlSecTransformCtx			retrievalMethodCtx;
    int 				maxRetrievalMethodLevel;


    /* EncryptedKey */
    xmlSecEncCtxPtr			encCtx;
    int					maxEncryptedKeyLevel; 

	    

    /* x509 certificates */
    time_t				certsVerificationTime;
    int					certsVerificationDepth;


    /* PGP */
    void*				pgpReserved;	/* TODO */
        
    /* internal data */
    int 				curRetrievalMethodLevel;
    int					curEncryptedKeyLevel;                
    xmlSecKeyReq			keyReq;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The &lt;dsig:KeyInfo /&gt; reading or writing context.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry>void *<structfield>userData</structfield></entry>
<entry>		the pointer to user data (xmlsec and xmlsec-crypto 
		never touch this).
</entry>
</row>
<row>
<entry>unsigned int <structfield>flags</structfield></entry>
<entry> 		the bit mask for flags that control processin.
</entry>
</row>
<row>
<entry>unsigned int <structfield>flags2</structfield></entry>
<entry> 		reserved for future.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> <structfield>keysMngr</structfield></entry>
<entry>		the pointer to current keys manager.
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyInfoMode">xmlSecKeyInfoMode</link> <structfield>mode</structfield></entry>
<entry> 		do we read or write &lt;dsig:KeyInfo /&gt; element.
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>enabledKeyData</structfield></entry>
<entry> 	the list of enabled <parameter>xmlSecKeyDataId</parameter> (if list is 
		empty then all data ids are enabled).
</entry>
</row>
<row>
<entry>int <structfield>base64LineSize</structfield></entry>
<entry>	the max columns size for base64 encoding.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link> <structfield>retrievalMethodCtx</structfield></entry>
<entry> the transforms context for &lt;dsig:RetrievalMethod /&gt;
			element processing.
</entry>
</row>
<row>
<entry>int <structfield>maxRetrievalMethodLevel</structfield></entry>
<entry> the max recursion level when processing
		&lt;dsig:RetrievalMethod /&gt; element; default level is 1 
		(see also <parameter>curRetrievalMethodLevel</parameter>).
</entry>
</row>
<row>
<entry><link linkend="xmlSecEncCtxPtr">xmlSecEncCtxPtr</link> <structfield>encCtx</structfield></entry>
<entry>		the encryption context for &lt;dsig:EncryptedKey /&gt; element
		processing.
</entry>
</row>
<row>
<entry>int <structfield>maxEncryptedKeyLevel</structfield></entry>
<entry> the max recursion level when processing 
		&lt;enc:EncryptedKey /&gt; element; default level is 1 
		(see <parameter>curEncryptedKeyLevel</parameter>).
</entry>
</row>
<row>
<entry><link linkend="time-t">time_t</link> <structfield>certsVerificationTime</structfield></entry>
<entry> the time to use for X509 certificates verification
		("not valid before" and "not valid after" checks);
		if <parameter>certsVerificationTime</parameter> is equal to 0 (default) 
		then we verify certificates against the system's 
		clock "now".
</entry>
</row>
<row>
<entry>int <structfield>certsVerificationDepth</structfield></entry>
<entry> the max certifications chain length (default is 9).
</entry>
</row>
<row>
<entry>void *<structfield>pgpReserved</structfield></entry>
<entry>	reserved for PGP.
</entry>
</row>
<row>
<entry>int <structfield>curRetrievalMethodLevel</structfield></entry>
<entry> the current &lt;dsig:RetrievalMethod /&gt; element 
		processing level (see <parameter>maxRetrievalMethodLevel</parameter>).
</entry>
</row>
<row>
<entry>int <structfield>curEncryptedKeyLevel</structfield></entry>
<entry> the current &lt;enc:EncryptedKey /&gt; element
		processing level (see <parameter>maxEncryptedKeyLevel</parameter>).
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyReq">xmlSecKeyReq</link> <structfield>keyReq</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>		reserved for the future.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
