<refentry id="xmlsec-xmldsig">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-xmldsig.top_of_page">xmldsig</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xmldsig</refname>
<refpurpose>XML Digital Signature support.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-xmldsig.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="xmlSecDSigCtx"><returnvalue>xmlSecDSigCtxPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxSign">xmlSecDSigCtxSign</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxEnableReferenceTransform">xmlSecDSigCtxEnableReferenceTransform</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxEnableSignatureTransform">xmlSecDSigCtxEnableSignatureTransform</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxGetPreSignBuffer">xmlSecDSigCtxGetPreSignBuffer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxDebugDump">xmlSecDSigCtxDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigCtxDebugXmlDump">xmlSecDSigCtxDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecDSigReferenceCtx"><returnvalue>xmlSecDSigReferenceCtxPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxProcessNode">xmlSecDSigReferenceCtxProcessNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxGetPreDigestBuffer">xmlSecDSigReferenceCtxGetPreDigestBuffer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxDebugDump">xmlSecDSigReferenceCtxDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxDebugXmlDump">xmlSecDSigReferenceCtxDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxListGetKlass">xmlSecDSigReferenceCtxListGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-xmldsig.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS:CAPS">XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES:CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES:CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE:CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="XMLSEC-DSIG-FLAGS-USE-VISA3D-HACK:CAPS">XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtx</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecDSigReferenceCtxListId">xmlSecDSigReferenceCtxListId</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-xmldsig.description" role="desc">
<title role="desc.title">Description</title>
<para>
XML Digital Signature support.
</para>

</refsect1>
<refsect1 id="xmlsec-xmldsig.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecDSigCtxCreate" role="function">
<title>xmlSecDSigCtxCreate&#160;()</title>
<indexterm zone="xmlSecDSigCtxCreate"><primary>xmlSecDSigCtxCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecDSigCtx"><returnvalue>xmlSecDSigCtxPtr</returnvalue></link>
xmlSecDSigCtxCreate (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> keysMngr</parameter>);</programlisting>
<para>Creates &lt;dsig:Signature/> element processing context.
The caller is responsible for destroying returned object by calling
<link linkend="xmlSecDSigCtxDestroy"><type>xmlSecDSigCtxDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keysMngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly allocated context object or NULL if an error
occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxDestroy" role="function">
<title>xmlSecDSigCtxDestroy&#160;()</title>
<indexterm zone="xmlSecDSigCtxDestroy"><primary>xmlSecDSigCtxDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigCtxDestroy (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>);</programlisting>
<para>Destroy context object created with <link linkend="xmlSecDSigCtxCreate"><type>xmlSecDSigCtxCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxInitialize" role="function">
<title>xmlSecDSigCtxInitialize&#160;()</title>
<indexterm zone="xmlSecDSigCtxInitialize"><primary>xmlSecDSigCtxInitialize</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigCtxInitialize (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                         <parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> keysMngr</parameter>);</programlisting>
<para>Initializes &lt;dsig:Signature/> element processing context.
The caller is responsible for cleaning up returned object by calling
<link linkend="xmlSecDSigCtxFinalize"><type>xmlSecDSigCtxFinalize</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keysMngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxFinalize" role="function">
<title>xmlSecDSigCtxFinalize&#160;()</title>
<indexterm zone="xmlSecDSigCtxFinalize"><primary>xmlSecDSigCtxFinalize</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigCtxFinalize (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>);</programlisting>
<para>Cleans up <parameter>dsigCtx</parameter>
 object initialized with <link linkend="xmlSecDSigCtxInitialize"><type>xmlSecDSigCtxInitialize</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxSign" role="function">
<title>xmlSecDSigCtxSign&#160;()</title>
<indexterm zone="xmlSecDSigCtxSign"><primary>xmlSecDSigCtxSign</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigCtxSign (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                   <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> tmpl</parameter>);</programlisting>
<para>Signs the data as described in <parameter>tmpl</parameter>
 node.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>tmpl</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> node with signature template.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxVerify" role="function">
<title>xmlSecDSigCtxVerify&#160;()</title>
<indexterm zone="xmlSecDSigCtxVerify"><primary>xmlSecDSigCtxVerify</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigCtxVerify (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                     <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>);</programlisting>
<para>Vaidates signature in the <parameter>node</parameter>
. The verification result is returned
in <link linkend="status"><type>status</type></link> member of the <parameter>dsigCtx</parameter>
 object.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer with &lt;dsig:Signature/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success (check <link linkend="status"><type>status</type></link> member of <parameter>dsigCtx</parameter>
to get
signature verification result) or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxEnableReferenceTransform" role="function">
<title>xmlSecDSigCtxEnableReferenceTransform&#160;()</title>
<indexterm zone="xmlSecDSigCtxEnableReferenceTransform"><primary>xmlSecDSigCtxEnableReferenceTransform</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigCtxEnableReferenceTransform (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                                       <parameter><link linkend="xmlSecTransformId"><type>xmlSecTransformId</type></link> transformId</parameter>);</programlisting>
<para>Enables <parameter>transformId</parameter>
 for &lt;dsig:Reference/> elements processing.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>transformId</para></entry>
<entry role="parameter_description"><para>the transform klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxEnableSignatureTransform" role="function">
<title>xmlSecDSigCtxEnableSignatureTransform&#160;()</title>
<indexterm zone="xmlSecDSigCtxEnableSignatureTransform"><primary>xmlSecDSigCtxEnableSignatureTransform</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigCtxEnableSignatureTransform (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                                       <parameter><link linkend="xmlSecTransformId"><type>xmlSecTransformId</type></link> transformId</parameter>);</programlisting>
<para>Enables <parameter>transformId</parameter>
 for &lt;dsig:SignedInfo/> element processing.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>transformId</para></entry>
<entry role="parameter_description"><para>the transform klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxGetPreSignBuffer" role="function">
<title>xmlSecDSigCtxGetPreSignBuffer&#160;()</title>
<indexterm zone="xmlSecDSigCtxGetPreSignBuffer"><primary>xmlSecDSigCtxGetPreSignBuffer</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
xmlSecDSigCtxGetPreSignBuffer (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>);</programlisting>
<para>Gets pointer to the buffer with serialized &lt;dsig:SignedInfo/> element
just before signature claculation (valid if and only if
<link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</type></link> context flag is set.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxDebugDump" role="function">
<title>xmlSecDSigCtxDebugDump&#160;()</title>
<indexterm zone="xmlSecDSigCtxDebugDump"><primary>xmlSecDSigCtxDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigCtxDebugDump (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                        <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints the debug information about <parameter>dsigCtx</parameter>
 to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigCtxDebugXmlDump" role="function">
<title>xmlSecDSigCtxDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecDSigCtxDebugXmlDump"><primary>xmlSecDSigCtxDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigCtxDebugXmlDump (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                           <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints the debug information about <parameter>dsigCtx</parameter>
 to <parameter>output</parameter>
 in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Signature/> processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxCreate" role="function">
<title>xmlSecDSigReferenceCtxCreate&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxCreate"><primary>xmlSecDSigReferenceCtxCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecDSigReferenceCtx"><returnvalue>xmlSecDSigReferenceCtxPtr</returnvalue></link>
xmlSecDSigReferenceCtxCreate (<parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                              <parameter><link linkend="xmlSecDSigReferenceOrigin"><type>xmlSecDSigReferenceOrigin</type></link> origin</parameter>);</programlisting>
<para>Creates new &lt;dsig:Reference/> element processing context. Caller is responsible
for destroying the returned context by calling <link linkend="xmlSecDSigReferenceCtxDestroy"><type>xmlSecDSigReferenceCtxDestroy</type></link>
function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to parent &lt;dsig:Signature/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>origin</para></entry>
<entry role="parameter_description"><para>the reference origin (&lt;dsig:SignedInfo/> or &lt;dsig:Manifest/> node).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly created context or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxDestroy" role="function">
<title>xmlSecDSigReferenceCtxDestroy&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxDestroy"><primary>xmlSecDSigReferenceCtxDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigReferenceCtxDestroy (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>);</programlisting>
<para>Destroy context object created with <link linkend="xmlSecDSigReferenceCtxCreate"><type>xmlSecDSigReferenceCtxCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxInitialize" role="function">
<title>xmlSecDSigReferenceCtxInitialize&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxInitialize"><primary>xmlSecDSigReferenceCtxInitialize</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigReferenceCtxInitialize (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>,
                                  <parameter><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link> dsigCtx</parameter>,
                                  <parameter><link linkend="xmlSecDSigReferenceOrigin"><type>xmlSecDSigReferenceOrigin</type></link> origin</parameter>);</programlisting>
<para>Initializes new &lt;dsig:Reference/> element processing context. Caller is responsible
for cleaning up the returned context by calling <link linkend="xmlSecDSigReferenceCtxFinalize"><type>xmlSecDSigReferenceCtxFinalize</type></link>
function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dsigCtx</para></entry>
<entry role="parameter_description"><para>the pointer to parent &lt;dsig:Signature/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>origin</para></entry>
<entry role="parameter_description"><para>the reference origin (&lt;dsig:SignedInfo/> or &lt;dsig:Manifest/> node).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on succes or aa negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxFinalize" role="function">
<title>xmlSecDSigReferenceCtxFinalize&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxFinalize"><primary>xmlSecDSigReferenceCtxFinalize</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigReferenceCtxFinalize (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>);</programlisting>
<para>Cleans up context object created with <link linkend="xmlSecDSigReferenceCtxInitialize"><type>xmlSecDSigReferenceCtxInitialize</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxProcessNode" role="function">
<title>xmlSecDSigReferenceCtxProcessNode&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxProcessNode"><primary>xmlSecDSigReferenceCtxProcessNode</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecDSigReferenceCtxProcessNode (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>,
                                   <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>);</programlisting>
<para>The Reference Element (http://www.w3.org/TR/xmldsig-core/<link linkend="sec-Reference"><type>sec-Reference</type></link>)</para>
<para>Reference is an element that may occur one or more times. It specifies
a digest algorithm and digest value, and optionally an identifier of the
object being signed, the type of the object, and/or a list of transforms
to be applied prior to digesting. The identification (URI) and transforms
describe how the digested content (i.e., the input to the digest method)
was created. The Type attribute facilitates the processing of referenced
data. For example, while this specification makes no requirements over
external data, an application may wish to signal that the referent is a
Manifest. An optional ID attribute permits a Reference to be referenced
from elsewhere.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on succes or aa negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxGetPreDigestBuffer" role="function">
<title>xmlSecDSigReferenceCtxGetPreDigestBuffer&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxGetPreDigestBuffer"><primary>xmlSecDSigReferenceCtxGetPreDigestBuffer</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
xmlSecDSigReferenceCtxGetPreDigestBuffer
                               (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>);</programlisting>
<para>Gets the results of &lt;dsig:Reference/> node processing just before digesting
(valid only if <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</type></link> or
<link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</type></link> flas of signature context
is set).</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the buffer or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxDebugDump" role="function">
<title>xmlSecDSigReferenceCtxDebugDump&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxDebugDump"><primary>xmlSecDSigReferenceCtxDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigReferenceCtxDebugDump (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>,
                                 <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints debug information about <parameter>dsigRefCtx</parameter>
 to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxDebugXmlDump" role="function">
<title>xmlSecDSigReferenceCtxDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxDebugXmlDump"><primary>xmlSecDSigReferenceCtxDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecDSigReferenceCtxDebugXmlDump (<parameter><link linkend="xmlSecDSigReferenceCtx"><type>xmlSecDSigReferenceCtxPtr</type></link> dsigRefCtx</parameter>,
                                    <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints debug information about <parameter>dsigRefCtx</parameter>
 to <parameter>output</parameter>
 in output format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dsigRefCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:Reference/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtxListGetKlass" role="function">
<title>xmlSecDSigReferenceCtxListGetKlass&#160;()</title>
<indexterm zone="xmlSecDSigReferenceCtxListGetKlass"><primary>xmlSecDSigReferenceCtxListGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
xmlSecDSigReferenceCtxListGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The &lt;dsig:Reference/> element processing contexts list klass.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> &lt;dsig:Reference/> element processing context list klass.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-xmldsig.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecDSigStatus" role="enum">
<title>enum xmlSecDSigStatus</title>
<indexterm zone="xmlSecDSigStatus"><primary>xmlSecDSigStatus</primary></indexterm>
<para>XML Digital signature processing status.</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecDSigStatusUnknown">xmlSecDSigStatusUnknown</para></entry>
<entry role="enum_member_description"><para>the status is unknown.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecDSigStatusSucceeded">xmlSecDSigStatusSucceeded</para></entry>
<entry role="enum_member_description"><para>the processing succeeded.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecDSigStatusInvalid">xmlSecDSigStatusInvalid</para></entry>
<entry role="enum_member_description"><para>the processing failed.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS:CAPS" role="macro">
<title>XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</title>
<indexterm zone="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS:CAPS"><primary>XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</primary></indexterm>
<programlisting language="C">#define XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS                      0x00000001
</programlisting>
<para>If this flag is set then &lt;dsig:Manifests/> nodes will not be processed.</para>
</refsect2>
<refsect2 id="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES:CAPS" role="macro">
<title>XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</title>
<indexterm zone="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES:CAPS"><primary>XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</primary></indexterm>
<programlisting language="C">#define XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES           0x00000002
</programlisting>
<para>If this flag is set then pre-digest buffer for &lt;dsig:Reference/> child
of &lt;dsig:KeyInfo/> element will be stored in <link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtx</type></link>.</para>
</refsect2>
<refsect2 id="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES:CAPS" role="macro">
<title>XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</title>
<indexterm zone="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES:CAPS"><primary>XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</primary></indexterm>
<programlisting language="C">#define XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES             0x00000004
</programlisting>
<para>If this flag is set then pre-digest buffer for &lt;dsig:Reference/> child
of &lt;dsig:Manifest/> element will be stored in <link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtx</type></link>.</para>
</refsect2>
<refsect2 id="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE:CAPS" role="macro">
<title>XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</title>
<indexterm zone="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE:CAPS"><primary>XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</primary></indexterm>
<programlisting language="C">#define XMLSEC_DSIG_FLAGS_STORE_SIGNATURE                       0x00000008
</programlisting>
<para>If this flag is set then pre-signature buffer for &lt;dsig:SignedInfo/>
element processing will be stored in <link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtx</type></link>.</para>
</refsect2>
<refsect2 id="XMLSEC-DSIG-FLAGS-USE-VISA3D-HACK:CAPS" role="macro">
<title>XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK</title>
<indexterm zone="XMLSEC-DSIG-FLAGS-USE-VISA3D-HACK:CAPS"><primary>XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK</primary></indexterm>
<programlisting language="C">#define XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK                       0x00000010
</programlisting>
<para>If this flag is set then URI ID references are resolved directly
without using XPointers. This allows one to sign/verify Visa3D
documents that don't follow XML, XPointer and XML DSig specifications.</para>
</refsect2>
<refsect2 id="xmlSecDSigCtx" role="struct">
<title>struct xmlSecDSigCtx</title>
<indexterm zone="xmlSecDSigCtx"><primary>xmlSecDSigCtx</primary></indexterm>
<programlisting language="C">struct xmlSecDSigCtx {
    /* these data user can set before performing the operation */
    void*                       userData;
    unsigned int                flags;
    unsigned int                flags2;
    xmlSecKeyInfoCtx            keyInfoReadCtx;
    xmlSecKeyInfoCtx            keyInfoWriteCtx;
    xmlSecTransformCtx          transformCtx;
    xmlSecTransformUriType      enabledReferenceUris;
    xmlSecPtrListPtr            enabledReferenceTransforms;
    xmlSecTransformCtxPreExecuteCallback referencePreExecuteCallback;
    xmlSecTransformId           defSignMethodId;
    xmlSecTransformId           defC14NMethodId;
    xmlSecTransformId           defDigestMethodId;

    /* these data are returned */
    xmlSecKeyPtr                signKey;
    xmlSecTransformOperation    operation;
    xmlSecBufferPtr             result;
    xmlSecDSigStatus            status;
    xmlSecTransformPtr          signMethod;
    xmlSecTransformPtr          c14nMethod;
    xmlSecTransformPtr          preSignMemBufMethod;
    xmlNodePtr                  signValueNode;
    xmlChar*                    id;
    xmlSecPtrList               signedInfoReferences;
    xmlSecPtrList               manifestReferences;

    /* reserved for future */
    void*                       reserved0;
    void*                       reserved1;
};
</programlisting>
<para>XML DSig processing context.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigCtx.userData">userData</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to user data (xmlsec and xmlsec-crypto libraries
never touches this).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>unsigned&#160;<link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecDSigCtx.flags">flags</structfield>;</para></entry>
<entry role="struct_member_description"><para>the XML Digital Signature processing flags.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>unsigned&#160;<link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecDSigCtx.flags2">flags2</structfield>;</para></entry>
<entry role="struct_member_description"><para>the XML Digital Signature processing flags.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtx</type></link>&#160;<structfield id="xmlSecDSigCtx.keyInfoReadCtx">keyInfoReadCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the reading key context.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtx</type></link>&#160;<structfield id="xmlSecDSigCtx.keyInfoWriteCtx">keyInfoWriteCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the writing key context (not used for signature verification).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformCtx"><type>xmlSecTransformCtx</type></link>&#160;<structfield id="xmlSecDSigCtx.transformCtx">transformCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the &lt;dsig:SignedInfo/> node processing context.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformUriType"><type>xmlSecTransformUriType</type></link>&#160;<structfield id="xmlSecDSigCtx.enabledReferenceUris">enabledReferenceUris</structfield>;</para></entry>
<entry role="struct_member_description"><para>the URI types allowed for &lt;dsig:Reference/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.enabledReferenceTransforms">enabledReferenceTransforms</structfield>;</para></entry>
<entry role="struct_member_description"><para>the list of transforms allowed in &lt;dsig:Reference/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformCtxPreExecuteCallback"><type>xmlSecTransformCtxPreExecuteCallback</type></link>&#160;<structfield id="xmlSecDSigCtx.referencePreExecuteCallback">referencePreExecuteCallback</structfield>;</para></entry>
<entry role="struct_member_description"><para>the callback for &lt;dsig:Reference/> node processing.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformId"><type>xmlSecTransformId</type></link>&#160;<structfield id="xmlSecDSigCtx.defSignMethodId">defSignMethodId</structfield>;</para></entry>
<entry role="struct_member_description"><para>the default signing method klass.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformId"><type>xmlSecTransformId</type></link>&#160;<structfield id="xmlSecDSigCtx.defC14NMethodId">defC14NMethodId</structfield>;</para></entry>
<entry role="struct_member_description"><para>the default c14n method klass.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformId"><type>xmlSecTransformId</type></link>&#160;<structfield id="xmlSecDSigCtx.defDigestMethodId">defDigestMethodId</structfield>;</para></entry>
<entry role="struct_member_description"><para>the default digest method klass.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.signKey">signKey</structfield>;</para></entry>
<entry role="struct_member_description"><para>the signature key; application may set <link linkend="signKey"><type>signKey</type></link>
before calling <link linkend="xmlSecDSigCtxSign"><type>xmlSecDSigCtxSign</type></link> or <link linkend="xmlSecDSigCtxVerify"><type>xmlSecDSigCtxVerify</type></link>
functions.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformOperation"><type>xmlSecTransformOperation</type></link>&#160;<structfield id="xmlSecDSigCtx.operation">operation</structfield>;</para></entry>
<entry role="struct_member_description"><para>the operation: sign or verify.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecBuffer"><type>xmlSecBufferPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.result">result</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to signature (not valid for signature verification).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecDSigStatus"><type>xmlSecDSigStatus</type></link>&#160;<structfield id="xmlSecDSigCtx.status">status</structfield>;</para></entry>
<entry role="struct_member_description"><para>the &lt;dsig:Signatuire/> processing status.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransform"><type>xmlSecTransformPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.signMethod">signMethod</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to signature transform.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransform"><type>xmlSecTransformPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.c14nMethod">c14nMethod</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to c14n transform.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransform"><type>xmlSecTransformPtr</type></link>&#160;<structfield id="xmlSecDSigCtx.preSignMemBufMethod">preSignMemBufMethod</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to binary buffer right before signature
(valid only if <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</type></link> flag is set).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlNode"><type>xmlNodePtr</type></link>&#160;<structfield id="xmlSecDSigCtx.signValueNode">signValueNode</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to &lt;dsig:SignatureValue/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecDSigCtx.id">id</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to Id attribute of &lt;dsig:Signature/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecPtrList"><type>xmlSecPtrList</type></link>&#160;<structfield id="xmlSecDSigCtx.signedInfoReferences">signedInfoReferences</structfield>;</para></entry>
<entry role="struct_member_description"><para>the list of references in &lt;dsig:SignedInfo/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecPtrList"><type>xmlSecPtrList</type></link>&#160;<structfield id="xmlSecDSigCtx.manifestReferences">manifestReferences</structfield>;</para></entry>
<entry role="struct_member_description"><para>the list of references in &lt;dsig:Manifest/> nodes.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigCtx.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigCtx.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecDSigReferenceOrigin" role="enum">
<title>enum xmlSecDSigReferenceOrigin</title>
<indexterm zone="xmlSecDSigReferenceOrigin"><primary>xmlSecDSigReferenceOrigin</primary></indexterm>
<para>The possible &lt;dsig:Reference/> node locations: in the &lt;dsig:SignedInfo/>
node or in the &lt;dsig:Manifest/> node.</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecDSigReferenceOriginSignedInfo">xmlSecDSigReferenceOriginSignedInfo</para></entry>
<entry role="enum_member_description"><para>reference in &lt;dsig:SignedInfo> node.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecDSigReferenceOriginManifest">xmlSecDSigReferenceOriginManifest</para></entry>
<entry role="enum_member_description"><para>reference &lt;dsig:Manifest> node.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecDSigReferenceCtx" role="struct">
<title>struct xmlSecDSigReferenceCtx</title>
<indexterm zone="xmlSecDSigReferenceCtx"><primary>xmlSecDSigReferenceCtx</primary></indexterm>
<programlisting language="C">struct xmlSecDSigReferenceCtx {
    void*                       userData;
    xmlSecDSigCtxPtr            dsigCtx;
    xmlSecDSigReferenceOrigin   origin;
    xmlSecTransformCtx          transformCtx;
    xmlSecTransformPtr          digestMethod;

    xmlSecBufferPtr             result;
    xmlSecDSigStatus            status;
    xmlSecTransformPtr          preDigestMemBufMethod;
    xmlChar*                    id;
    xmlChar*                    uri;
    xmlChar*                    type;

     /* reserved for future */
    void*                       reserved0;
    void*                       reserved1;
};
</programlisting>
<para>The &lt;dsig:Reference/> processing context.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.userData">userData</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to user data (xmlsec and xmlsec-crypto libraries
never touches this).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecDSigCtx"><type>xmlSecDSigCtxPtr</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.dsigCtx">dsigCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to "parent" &lt;dsig:Signature/> processing context.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecDSigReferenceOrigin"><type>xmlSecDSigReferenceOrigin</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.origin">origin</structfield>;</para></entry>
<entry role="struct_member_description"><para>the signature origin (&lt;dsig:SignedInfo/> or &lt;dsig:Manifest/>).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransformCtx"><type>xmlSecTransformCtx</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.transformCtx">transformCtx</structfield>;</para></entry>
<entry role="struct_member_description"><para>the reference processing transforms context.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransform"><type>xmlSecTransformPtr</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.digestMethod">digestMethod</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to digest transform.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecBuffer"><type>xmlSecBufferPtr</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.result">result</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to digest result.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecDSigStatus"><type>xmlSecDSigStatus</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.status">status</structfield>;</para></entry>
<entry role="struct_member_description"><para>the reference processing status.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecTransform"><type>xmlSecTransformPtr</type></link>&#160;<structfield id="xmlSecDSigReferenceCtx.preDigestMemBufMethod">preDigestMemBufMethod</structfield>;</para></entry>
<entry role="struct_member_description"><para>the pointer to binary buffer right before digest
(valid only if either
<link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</type></link> or
<link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES:CAPS"><type>XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</type></link> flags are set).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.id">id</structfield>;</para></entry>
<entry role="struct_member_description"><para>the &lt;dsig:Reference/> node ID attribute.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.uri">uri</structfield>;</para></entry>
<entry role="struct_member_description"><para>the &lt;dsig:Reference/> node URI attribute.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.type">type</structfield>;</para></entry>
<entry role="struct_member_description"><para>the &lt;dsig:Reference/> node Type attribute.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecDSigReferenceCtx.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecDSigReferenceCtxListId" role="macro">
<title>xmlSecDSigReferenceCtxListId</title>
<indexterm zone="xmlSecDSigReferenceCtxListId"><primary>xmlSecDSigReferenceCtxListId</primary></indexterm>
<programlisting language="C">#define             xmlSecDSigReferenceCtxListId</programlisting>
<para>The references list klass.</para>
</refsect2>

</refsect1>

</refentry>
