<refentry id="xmlsec-xmldsig">
<refmeta>
<refentrytitle>xmldsig</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>xmldsig</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link>;
#define     <link linkend="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS-CAPS">XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-USE-VISA3D-HACK-CAPS">XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK</link>
struct      <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>;
<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link>        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link>            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);
int         <link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link>         (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link>           (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);
int         <link linkend="xmlSecDSigCtxSign">xmlSecDSigCtxSign</link>               (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> tmpl);
int         <link linkend="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify</link>             (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);
int         <link linkend="xmlSecDSigCtxEnableReferenceTransform">xmlSecDSigCtxEnableReferenceTransform</link>
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);
int         <link linkend="xmlSecDSigCtxEnableSignatureTransform">xmlSecDSigCtxEnableSignatureTransform</link>
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);
<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> <link linkend="xmlSecDSigCtxGetPreSignBuffer">xmlSecDSigCtxGetPreSignBuffer</link>
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);
void        <link linkend="xmlSecDSigCtxDebugDump">xmlSecDSigCtxDebugDump</link>          (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecDSigCtxDebugXmlDump">xmlSecDSigCtxDebugXmlDump</link>       (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
enum        <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link>;
struct      <link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtx</link>;
<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> <link linkend="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate</link>
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);
void        <link linkend="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy</link>   (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
int         <link linkend="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize</link>
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);
void        <link linkend="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize</link>  (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
int         <link linkend="xmlSecDSigReferenceCtxProcessNode">xmlSecDSigReferenceCtxProcessNode</link>
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);
<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> <link linkend="xmlSecDSigReferenceCtxGetPreDigestBuffer">xmlSecDSigReferenceCtxGetPreDigestBuffer</link>
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
void        <link linkend="xmlSecDSigReferenceCtxDebugDump">xmlSecDSigReferenceCtxDebugDump</link> (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecDSigReferenceCtxDebugXmlDump">xmlSecDSigReferenceCtxDebugXmlDump</link>
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecDSigReferenceCtxListId">xmlSecDSigReferenceCtxListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecDSigReferenceCtxListGetKlass">xmlSecDSigReferenceCtxListGetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecDSigStatus">enum xmlSecDSigStatus</title>
<programlisting>typedef enum {
    xmlSecDSigStatusUnknown = 0,
    xmlSecDSigStatusSucceeded,
    xmlSecDSigStatusInvalid
} xmlSecDSigStatus;
</programlisting>
<para>
XML Digital signature processing status.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecDSigStatusUnknown</literal></term>
<listitem><simpara> 	the status is unknow.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecDSigStatusSucceeded</literal></term>
<listitem><simpara>	the processing succeeded.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecDSigStatusInvalid</literal></term>
<listitem><simpara>	the processing failed.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS-CAPS">XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS			0x00000001
</programlisting>
<para>
If this flag is set then <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifests">&lt;dsig:Manifests/&gt;</ulink> nodes will not be processed.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES		0x00000002
</programlisting>
<para>
If this flag is set then pre-digest buffer for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> child
of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element will be stored in <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES		0x00000004
</programlisting>
<para>
If this flag is set then pre-digest buffer for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> child
of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink> element will be stored in <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_SIGNATURE			0x00000008
</programlisting>
<para>
If this flag is set then pre-signature buffer for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink>
element processing will be stored in <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-USE-VISA3D-HACK-CAPS">XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_USE_VISA3D_HACK			0x00000010
</programlisting>
<para>
If this flag is set then URI ID references are resolved directly
without using XPointers. This allows one to sign/verify Visa3D
documents that don't follow XML, XPointer and XML DSig specifications.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtx">struct xmlSecDSigCtx</title>
<programlisting>struct xmlSecDSigCtx {

    /* these data user can set before performing the operation */
    void*			userData;
    unsigned int		flags;
    unsigned int		flags2;
    xmlSecKeyInfoCtx		keyInfoReadCtx;
    xmlSecKeyInfoCtx		keyInfoWriteCtx;
    xmlSecTransformCtx		transformCtx;
    xmlSecTransformUriType	enabledReferenceUris;
    xmlSecPtrListPtr		enabledReferenceTransforms;
    xmlSecTransformCtxPreExecuteCallback referencePreExecuteCallback;
    xmlSecTransformId		defSignMethodId;
    xmlSecTransformId		defC14NMethodId;
    xmlSecTransformId		defDigestMethodId;
        
    /* these data are returned */
    xmlSecKeyPtr		signKey;
    xmlSecTransformOperation	operation;
    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		signMethod;
    xmlSecTransformPtr		c14nMethod;
    xmlSecTransformPtr		preSignMemBufMethod;
    xmlNodePtr			signValueNode;
    xmlChar*			id;    
    xmlSecPtrList    		signedInfoReferences;
    xmlSecPtrList		manifestReferences;

    /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};						
</programlisting>
<para>
XML DSig processing context.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>void *<structfield>userData</structfield></term>
<listitem><simpara>			the pointer to user data (xmlsec and xmlsec-crypto libraries
			never touches this).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned int <structfield>flags</structfield></term>
<listitem><simpara>			the XML Digital Signature processing flags.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>unsigned int <structfield>flags2</structfield></term>
<listitem><simpara>			the XML Digital Signature processing flags.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> <structfield>keyInfoReadCtx</structfield></term>
<listitem><simpara>		the reading key context.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> <structfield>keyInfoWriteCtx</structfield></term>
<listitem><simpara>		the writing key context (not used for signature verification).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link> <structfield>transformCtx</structfield></term>
<listitem><simpara>		the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> node processing context.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link> <structfield>enabledReferenceUris</structfield></term>
<listitem><simpara>	the URI types allowed for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> <structfield>enabledReferenceTransforms</structfield></term>
<listitem><simpara>	the list of transforms allowed in <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformCtxPreExecuteCallback">xmlSecTransformCtxPreExecuteCallback</link> <structfield>referencePreExecuteCallback</structfield></term>
<listitem><simpara>the callback for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node processing.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformId">xmlSecTransformId</link> <structfield>defSignMethodId</structfield></term>
<listitem><simpara>		the default signing method klass.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformId">xmlSecTransformId</link> <structfield>defC14NMethodId</structfield></term>
<listitem><simpara>		the default c14n method klass.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformId">xmlSecTransformId</link> <structfield>defDigestMethodId</structfield></term>
<listitem><simpara>		the default digest method klass.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecKey">xmlSecKeyPtr</link> <structfield>signKey</structfield></term>
<listitem><simpara>			the signature key; application may set <link linkend="signKey">signKey</link>
			before calling <link linkend="xmlSecDSigCtxSign">xmlSecDSigCtxSign</link> or <link linkend="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify</link>
			functions.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformOperation">xmlSecTransformOperation</link> <structfield>operation</structfield></term>
<listitem><simpara>			the operation: sign or verify.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecBuffer">xmlSecBufferPtr</link> <structfield>result</structfield></term>
<listitem><simpara>			the pointer to signature (not valid for signature verificaction).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link> <structfield>status</structfield></term>
<listitem><simpara>			the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signatuire">&lt;dsig:Signatuire/&gt;</ulink> procesisng status.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransform">xmlSecTransformPtr</link> <structfield>signMethod</structfield></term>
<listitem><simpara>			the pointer to signature transform.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransform">xmlSecTransformPtr</link> <structfield>c14nMethod</structfield></term>
<listitem><simpara>			the pointer to c14n transform.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransform">xmlSecTransformPtr</link> <structfield>preSignMemBufMethod</structfield></term>
<listitem><simpara>	the pointer to binary buffer right before signature
			(valid only if <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</link> flag is set).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlNode">xmlNodePtr</link> <structfield>signValueNode</structfield></term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignatureValue">&lt;dsig:SignatureValue/&gt;</ulink> node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>id</structfield></term>
<listitem><simpara>				the pointer to Id attribute of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>signedInfoReferences</structfield></term>
<listitem><simpara>	the list of references in <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> node.		
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>manifestReferences</structfield></term>
<listitem><simpara>		the list of references in <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink> nodes.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved0</structfield></term>
<listitem><simpara>			reserved for the future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>			reserved for the future.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate ()</title>
<programlisting><link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> xmlSecDSigCtxCreate        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>
Creates <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> element processing context.
The caller is responsible for destroying returend object by calling 
<link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keysMngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated context object or NULL if an error
occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy ()</title>
<programlisting>void        xmlSecDSigCtxDestroy            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>
Destroy context object created with <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize ()</title>
<programlisting>int         xmlSecDSigCtxInitialize         (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>
Initializes <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> element processing context.
The caller is responsible for cleaing up returend object by calling 
<link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keysMngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize ()</title>
<programlisting>void        xmlSecDSigCtxFinalize           (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>
Cleans up <parameter>dsigCtx</parameter> object initialized with <link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxSign">xmlSecDSigCtxSign ()</title>
<programlisting>int         xmlSecDSigCtxSign               (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> tmpl);</programlisting>
<para>
Signs the data as described in <parameter>tmpl</parameter> node.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tmpl</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> node with signature template.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify ()</title>
<programlisting>int         xmlSecDSigCtxVerify             (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);</programlisting>
<para>
Vaidates signature in the <parameter>node</parameter>. The verification result is returned
in <link linkend="status">status</link> member of the <parameter>dsigCtx</parameter> object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer with <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success (check <link linkend="status">status</link> member of <parameter>dsigCtx</parameter> to get 
signature verification result) or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxEnableReferenceTransform">xmlSecDSigCtxEnableReferenceTransform ()</title>
<programlisting>int         xmlSecDSigCtxEnableReferenceTransform
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);</programlisting>
<para>
Enables <parameter>transformId</parameter> for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> elements processing.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>transformId</parameter>&nbsp;:</term>
<listitem><simpara>	the transform klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxEnableSignatureTransform">xmlSecDSigCtxEnableSignatureTransform ()</title>
<programlisting>int         xmlSecDSigCtxEnableSignatureTransform
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);</programlisting>
<para>
Enables <parameter>transformId</parameter> for <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> element processing.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>transformId</parameter>&nbsp;:</term>
<listitem><simpara>	the transform klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxGetPreSignBuffer">xmlSecDSigCtxGetPreSignBuffer ()</title>
<programlisting><link linkend="xmlSecBuffer">xmlSecBufferPtr</link> xmlSecDSigCtxGetPreSignBuffer
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>
Gets pointer to the buffer with serialized <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> element
just before signature claculation (valid if and only if 
<link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</link> context flag is set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDebugDump">xmlSecDSigCtxDebugDump ()</title>
<programlisting>void        xmlSecDSigCtxDebugDump          (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the debug information about <parameter>dsigCtx</parameter> to <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDebugXmlDump">xmlSecDSigCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecDSigCtxDebugXmlDump       (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints the debug information about <parameter>dsigCtx</parameter> to <parameter>output</parameter> in XML format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceOrigin">enum xmlSecDSigReferenceOrigin</title>
<programlisting>typedef enum  {
    xmlSecDSigReferenceOriginSignedInfo,
    xmlSecDSigReferenceOriginManifest
} xmlSecDSigReferenceOrigin;
</programlisting>
<para>
The possible <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node locations: in the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> 
node or in the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink> node.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecDSigReferenceOriginSignedInfo</literal></term>
<listitem><simpara>reference in &lt;dsig:SignedInfo&gt; node.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecDSigReferenceOriginManifest</literal></term>
<listitem><simpara> 	reference &lt;dsig:Manifest&gt; node.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtx">struct xmlSecDSigReferenceCtx</title>
<programlisting>struct xmlSecDSigReferenceCtx {

    void*			userData;
    xmlSecDSigCtxPtr		dsigCtx;
    xmlSecDSigReferenceOrigin	origin;
    xmlSecTransformCtx		transformCtx;
    xmlSecTransformPtr		digestMethod;

    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		preDigestMemBufMethod;
    xmlChar*			id;
    xmlChar*			uri;
    xmlChar*			type;
    
     /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};
</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> processing context.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>void *<structfield>userData</structfield></term>
<listitem><simpara>			the pointer to user data (xmlsec and xmlsec-crypto libraries
			never touches this).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> <structfield>dsigCtx</structfield></term>
<listitem><simpara>			the pointer to "parent" <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> processing context.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> <structfield>origin</structfield></term>
<listitem><simpara>			the signature origin (<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> or <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink>).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link> <structfield>transformCtx</structfield></term>
<listitem><simpara>		the reference processing transforms context.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransform">xmlSecTransformPtr</link> <structfield>digestMethod</structfield></term>
<listitem><simpara>		the pointer to digest transform.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecBuffer">xmlSecBufferPtr</link> <structfield>result</structfield></term>
<listitem><simpara>			the pointer to digest result.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link> <structfield>status</structfield></term>
<listitem><simpara>			the reference processing status.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecTransform">xmlSecTransformPtr</link> <structfield>preDigestMemBufMethod</structfield></term>
<listitem><simpara>	the pointer to binary buffer right before digest
			(valid only if either
			<link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</link> or
			<link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</link> flags are set).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>id</structfield></term>
<listitem><simpara>				the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node ID attribute. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>uri</structfield></term>
<listitem><simpara>			the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node URI attribute. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlChar">xmlChar</link> *<structfield>type</structfield></term>
<listitem><simpara>			the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node Type attribute. 
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved0</structfield></term>
<listitem><simpara>			reserved for the future.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>void *<structfield>reserved1</structfield></term>
<listitem><simpara>			reserved for the future.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate ()</title>
<programlisting><link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> xmlSecDSigReferenceCtxCreate
                                            (<link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);</programlisting>
<para>
Creates new <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context. Caller is responsible
for destroying the returned context by calling <link linkend="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to parent <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> node processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>origin</parameter>&nbsp;:</term>
<listitem><simpara>		the reference origin (<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> or <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink> node).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly created context or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDestroy   (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>
Destroy context object created with <link linkend="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize ()</title>
<programlisting>int         xmlSecDSigReferenceCtxInitialize
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlSecDSigCtx">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);</programlisting>
<para>
Initializes new <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context. Caller is responsible
for cleaning up the returned context by calling <link linkend="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dsigCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to parent <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Signature">&lt;dsig:Signature/&gt;</ulink> node processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>origin</parameter>&nbsp;:</term>
<listitem><simpara>		the reference origin (<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-SignedInfo">&lt;dsig:SignedInfo/&gt;</ulink> or <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Manifest">&lt;dsig:Manifest/&gt;</ulink> node).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on succes or aa negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize ()</title>
<programlisting>void        xmlSecDSigReferenceCtxFinalize  (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>
Cleans up context object created with <link linkend="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxProcessNode">xmlSecDSigReferenceCtxProcessNode ()</title>
<programlisting>int         xmlSecDSigReferenceCtxProcessNode
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);</programlisting>
<para>
The Reference Element (http://www.w3.org/TR/xmldsig-core/<link linkend="sec-Reference">sec-Reference</link>)
</para>
<para>
Reference is an element that may occur one or more times. It specifies 
a digest algorithm and digest value, and optionally an identifier of the 
object being signed, the type of the object, and/or a list of transforms 
to be applied prior to digesting. The identification (URI) and transforms 
describe how the digested content (i.e., the input to the digest method) 
was created. The Type attribute facilitates the processing of referenced 
data. For example, while this specification makes no requirements over 
external data, an application may wish to signal that the referent is a 
Manifest. An optional ID attribute permits a Reference to be referenced 
from elsewhere.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on succes or aa negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxGetPreDigestBuffer">xmlSecDSigReferenceCtxGetPreDigestBuffer ()</title>
<programlisting><link linkend="xmlSecBuffer">xmlSecBufferPtr</link> xmlSecDSigReferenceCtxGetPreDigestBuffer
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>
Gets the results of <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> node processing just before digesting
(valid only if <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</link> or
<link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</link> flas of signature context
is set).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the buffer or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDebugDump">xmlSecDSigReferenceCtxDebugDump ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDebugDump (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>dsigRefCtx</parameter> to <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDebugXmlDump">xmlSecDSigReferenceCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDebugXmlDump
                                            (<link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>dsigRefCtx</parameter> to <parameter>output</parameter> in output format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dsigRefCtx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxListId">xmlSecDSigReferenceCtxListId</title>
<programlisting>#define     xmlSecDSigReferenceCtxListId</programlisting>
<para>
The references list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxListGetKlass">xmlSecDSigReferenceCtxListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecDSigReferenceCtxListGetKlass
                                            (void);</programlisting>
<para>
The <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing contexts list klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara><ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-Reference">&lt;dsig:Reference/&gt;</ulink> element processing context list klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
