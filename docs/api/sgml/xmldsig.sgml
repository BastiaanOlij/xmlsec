<refentry id="xmlsec-xmldsig">
<refmeta>
<refentrytitle>xmldsig.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>xmldsig.h</refname><refpurpose>The <ulink url="http://www.w3.org/Signature/">XML Digital Signature</ulink> 
standard implementation.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



struct      <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>;
<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link>        (<link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link>            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecDSigCtx">struct xmlSecDSigCtx</title>
<programlisting>struct xmlSecDSigCtx {
    /* these data user can set before performing the operation */
    void*			userData;
    xmlSecKeyInfoCtx		keyInfoReadCtx;
    xmlSecKeyInfoCtx		keyInfoWriteCtx;
    xmlSecTransformCtx		signTransformCtx;
    int				processManifests;
    int				storeSignatures;
    int				storeReferences;
    int				storeManifests;	

    xmlSecTransformUriType	enabledReferenceUris;
    xmlSecPtrListPtr		enabledReferenceTransforms;
    
    /* these data are returned */
    xmlSecTransformOperation	operation;
    xmlSecKeyPtr		signKey;
    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		signMethod;
    xmlSecTransformPtr		c14nMethod;
    xmlSecTransformPtr		preSignMemBufMethod;
    xmlChar*			id;    
    xmlSecPtrList    		references;
    xmlSecPtrList		manifests;
        
    /* these are internal data, nobody should change that except us */
    xmlNodePtr			signValueNode;
    int				dontDestroySignMethod;
    int				dontDestroyC14NMethod;

    /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};						
</programlisting>
<para>
XML DSig context.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry>void *<structfield>userData</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> <structfield>keyInfoReadCtx</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyInfoCtx">xmlSecKeyInfoCtx</link> <structfield>keyInfoWriteCtx</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link> <structfield>signTransformCtx</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>int <structfield>processManifests</structfield></entry>
<entry> if 0 then &lt;dsig:Manifests&gt; nodes are not processed.
</entry>
</row>
<row>
<entry>int <structfield>storeSignatures</structfield></entry>
<entry> store the signed content just (&lt;dsig:SignedInfo&gt; element)
before applying signature.
</entry>
</row>
<row>
<entry>int <structfield>storeReferences</structfield></entry>
<entry> store the result of processing &lt;dsig:Reference&gt; nodes in 
     &lt;dsig:SignedInfo&gt; nodes just before digesting.
</entry>
</row>
<row>
<entry>int <structfield>storeManifests</structfield></entry>
<entry> store the result of processing &lt;dsig:Reference&gt; nodes in 
&lt;dsig:Manifest&gt; nodes just before digesting (ignored if <parameter>processManifest</parameter> is 0).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link> <structfield>enabledReferenceUris</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <structfield>enabledReferenceTransforms</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformOperation">xmlSecTransformOperation</link> <structfield>operation</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> <structfield>signKey</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> <structfield>result</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link> <structfield>status</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>signMethod</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>c14nMethod</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>preSignMemBufMethod</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlChar">xmlChar</link> *<structfield>id</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>references</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>manifests</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlNodePtr">xmlNodePtr</link> <structfield>signValueNode</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>int <structfield>dontDestroySignMethod</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>int <structfield>dontDestroyC14NMethod</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate ()</title>
<programlisting><link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> xmlSecDSigCtxCreate        (<link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keysMngr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy ()</title>
<programlisting>void        xmlSecDSigCtxDestroy            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
