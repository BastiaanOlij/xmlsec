<refentry id="xmlsec-xmldsig">
<refmeta>
<refentrytitle>xmldsig.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>xmldsig.h</refname><refpurpose>The <ulink url="http://www.w3.org/Signature/">XML Digital Signature</ulink> 
standard implementation.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="xmlSecDSigStatus">xmlSecDSigStatus</link>;
#define     <link linkend="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS-CAPS">XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</link>
#define     <link linkend="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</link>
struct      <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>;
<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link>        (<link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link>            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);
int         <link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link>         (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);
void        <link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link>           (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);
int         <link linkend="xmlSecDSigCtxSign">xmlSecDSigCtxSign</link>               (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> tmpl);
int         <link linkend="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify</link>             (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node);
<link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> <link linkend="xmlSecDSigCtxPreSignBuffer">xmlSecDSigCtxPreSignBuffer</link>  (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);
void        <link linkend="xmlSecDSigCtxDebugDump">xmlSecDSigCtxDebugDump</link>          (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecDSigCtxDebugXmlDump">xmlSecDSigCtxDebugXmlDump</link>       (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
enum        <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link>;
struct      <link linkend="xmlSecDSigReferenceCtx">xmlSecDSigReferenceCtx</link>;
<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> <link linkend="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate</link>
                                            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);
void        <link linkend="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy</link>   (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
int         <link linkend="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize</link>
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);
void        <link linkend="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize</link>  (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
int         <link linkend="xmlSecDSigReferenceCtxProcessNode">xmlSecDSigReferenceCtxProcessNode</link>
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node);
<link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> <link linkend="xmlSecDSigReferenceCtxPreDigestBuffer">xmlSecDSigReferenceCtxPreDigestBuffer</link>
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);
void        <link linkend="xmlSecDSigReferenceCtxDebugDump">xmlSecDSigReferenceCtxDebugDump</link> (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecDSigReferenceCtxDebugXmlDump">xmlSecDSigReferenceCtxDebugXmlDump</link>
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecDSigReferenceCtxListId">xmlSecDSigReferenceCtxListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecDSigReferenceCtxListGetKlass">xmlSecDSigReferenceCtxListGetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecDSigStatus">enum xmlSecDSigStatus</title>
<programlisting>typedef enum {
    xmlSecDSigStatusUnknown = 0,
    xmlSecDSigStatusSucceeded,
    xmlSecDSigStatusInvalid
} xmlSecDSigStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-IGNORE-MANIFESTS-CAPS">XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_IGNORE_MANIFESTS			0x00000001
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-SIGNEDINFO-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_SIGNEDINFO_REFERENCES		0x00000002
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-MANIFEST-REFERENCES-CAPS">XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_MANIFEST_REFERENCES		0x00000004
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="XMLSEC-DSIG-FLAGS-STORE-SIGNATURE-CAPS">XMLSEC_DSIG_FLAGS_STORE_SIGNATURE</title>
<programlisting>#define XMLSEC_DSIG_FLAGS_STORE_SIGNATURE			0x00000008
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtx">struct xmlSecDSigCtx</title>
<programlisting>struct xmlSecDSigCtx {
    /* these data user can set before performing the operation */
    void*			userData;
    unsigned int		flags;
    unsigned int		flags2;
    xmlSecKeyInfoCtx		keyInfoReadCtx;
    xmlSecKeyInfoCtx		keyInfoWriteCtx;
    xmlSecTransformCtx		signTransformCtx;
    xmlSecTransformUriType	enabledReferenceUris;
    xmlSecPtrListPtr		enabledReferenceTransforms;
    xmlSecTransformId		defSignMethodId;
    xmlSecTransformId		defC14NMethodId;
        
    /* these data are returned */
    xmlSecTransformOperation	operation;
    xmlSecKeyPtr		signKey;
    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		signMethod;
    xmlSecTransformPtr		c14nMethod;
    xmlSecTransformPtr		preSignMemBufMethod;
    xmlNodePtr			signValueNode;
    xmlChar*			id;    
    xmlSecPtrList    		references;
    xmlSecPtrList		manifests;

    /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};						
</programlisting>
<para>
XML DSig context.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate ()</title>
<programlisting><link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> xmlSecDSigCtxCreate        (<link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keysMngr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy ()</title>
<programlisting>void        xmlSecDSigCtxDestroy            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize ()</title>
<programlisting>int         xmlSecDSigCtxInitialize         (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecKeysMngrPtr">xmlSecKeysMngrPtr</link> keysMngr);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>keysMngr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize ()</title>
<programlisting>void        xmlSecDSigCtxFinalize           (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxSign">xmlSecDSigCtxSign ()</title>
<programlisting>int         xmlSecDSigCtxSign               (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> tmpl);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>tmpl</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify ()</title>
<programlisting>int         xmlSecDSigCtxVerify             (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxPreSignBuffer">xmlSecDSigCtxPreSignBuffer ()</title>
<programlisting><link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> xmlSecDSigCtxPreSignBuffer  (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDebugDump">xmlSecDSigCtxDebugDump ()</title>
<programlisting>void        xmlSecDSigCtxDebugDump          (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigCtxDebugXmlDump">xmlSecDSigCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecDSigCtxDebugXmlDump       (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceOrigin">enum xmlSecDSigReferenceOrigin</title>
<programlisting>typedef enum  {
    xmlSecDSigReferenceOriginSignedInfo,
    xmlSecDSigReferenceOriginManifest
} xmlSecDSigReferenceOrigin;
</programlisting>
<para>
The possible &lt;dsig:Reference&gt; node locations: 
in the &lt;dsig:SignedInfo&gt; node or in the &lt;dsig:Manifest&gt; node.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>xmlSecDSigReferenceOriginSignedInfo</literal></entry>
<entry> reference in &lt;dsig:SignedInfo&gt; node.
</entry>
</row>
<row>
<entry><literal>xmlSecDSigReferenceOriginManifest</literal></entry>
<entry> reference &lt;dsig:Manifest&gt; node.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtx">struct xmlSecDSigReferenceCtx</title>
<programlisting>struct xmlSecDSigReferenceCtx {
    xmlSecDSigCtxPtr		dsigCtx;
    xmlSecDSigReferenceOrigin	origin;
    xmlSecTransformCtx		digestTransformCtx;
    xmlSecTransformPtr		digestMethod;

    xmlSecBufferPtr		result;
    xmlSecDSigStatus		status;
    xmlSecTransformPtr		preDigestMemBufMethod;
    xmlChar*			id;
    xmlChar*			uri;
    xmlChar*			type;
    
     /* reserved for future */
    void*			reserved0;
    void*			reserved1;    
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxCreate">xmlSecDSigReferenceCtxCreate ()</title>
<programlisting><link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> xmlSecDSigReferenceCtxCreate
                                            (<link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>origin</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDestroy">xmlSecDSigReferenceCtxDestroy ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDestroy   (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxInitialize">xmlSecDSigReferenceCtxInitialize ()</title>
<programlisting>int         xmlSecDSigReferenceCtxInitialize
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlSecDSigCtxPtr">xmlSecDSigCtxPtr</link> dsigCtx,
                                             <link linkend="xmlSecDSigReferenceOrigin">xmlSecDSigReferenceOrigin</link> origin);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dsigCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>origin</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxFinalize">xmlSecDSigReferenceCtxFinalize ()</title>
<programlisting>void        xmlSecDSigReferenceCtxFinalize  (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxProcessNode">xmlSecDSigReferenceCtxProcessNode ()</title>
<programlisting>int         xmlSecDSigReferenceCtxProcessNode
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node);</programlisting>
<para>
The Reference Element (http://www.w3.org/TR/xmldsig-core/<link linkend="sec-Reference">sec-Reference</link>)
</para>
<para>
Reference is an element that may occur one or more times. It specifies 
a digest algorithm and digest value, and optionally an identifier of the 
object being signed, the type of the object, and/or a list of transforms 
to be applied prior to digesting. The identification (URI) and transforms 
describe how the digested content (i.e., the input to the digest method) 
was created. The Type attribute facilitates the processing of referenced 
data. For example, while this specification makes no requirements over 
external data, an application may wish to signal that the referent is a 
Manifest. An optional ID attribute permits a Reference to be referenced 
from elsewhere.
</para>
<para>
Schema Definition:
</para>
<para>
 &lt;element name="Reference" type="ds:ReferenceType"/&gt;
 &lt;complexType name="ReferenceType"&gt;
   &lt;sequence&gt; 
     &lt;element ref="ds:Transforms" minOccurs="0"/&gt; 
     &lt;element ref="ds:DigestMethod"/&gt; 
     &lt;element ref="ds:DigestValue"/&gt; 
   &lt;/sequence&gt;
   &lt;attribute name="Id" type="ID" use="optional"/&gt; 
   &lt;attribute name="URI" type="anyURI" use="optional"/&gt; 
   &lt;attribute name="Type" type="anyURI" use="optional"/&gt; 
 &lt;/complexType&gt;
   
DTD:
   
  &lt;!ELEMENT Reference (Transforms?, DigestMethod, DigestValue)  &gt;
  &lt;!ATTLIST Reference Id  ID  <link linkend="IMPLIED-CAPS">IMPLIED</link>
  		URI CDATA   <link linkend="IMPLIED-CAPS">IMPLIED</link>
		Type    CDATA   <link linkend="IMPLIED-CAPS">IMPLIED</link>&gt;</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxPreDigestBuffer">xmlSecDSigReferenceCtxPreDigestBuffer ()</title>
<programlisting><link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> xmlSecDSigReferenceCtxPreDigestBuffer
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDebugDump">xmlSecDSigReferenceCtxDebugDump ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDebugDump (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxDebugXmlDump">xmlSecDSigReferenceCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecDSigReferenceCtxDebugXmlDump
                                            (<link linkend="xmlSecDSigReferenceCtxPtr">xmlSecDSigReferenceCtxPtr</link> dsigRefCtx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dsigRefCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxListId">xmlSecDSigReferenceCtxListId</title>
<programlisting>#define     xmlSecDSigReferenceCtxListId</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecDSigReferenceCtxListGetKlass">xmlSecDSigReferenceCtxListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecDSigReferenceCtxListGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
