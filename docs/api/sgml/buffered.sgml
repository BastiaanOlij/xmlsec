<refentry id="xmlsec-buffered">
<refmeta>
<refentrytitle>buffered.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>buffered.h</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSecBufferedTransformId">xmlSecBufferedTransformId</link>;
int         (<link linkend="xmlSecBufferedProcessMethod">*xmlSecBufferedProcessMethod</link>)  (<link linkend="xmlSecBufferedTransformPtr">xmlSecBufferedTransformPtr</link> transform,
                                             <link linkend="xmlBufferPtr">xmlBufferPtr</link> buffer);
struct      <link linkend="xmlSecBufferedTransformIdStruct">xmlSecBufferedTransformIdStruct</link>;
int         <link linkend="xmlSecBufferedTransformRead">xmlSecBufferedTransformRead</link>     (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecBufferedTransformWrite">xmlSecBufferedTransformWrite</link>    (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecBufferedTransformFlush">xmlSecBufferedTransformFlush</link>    (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform);
void        <link linkend="xmlSecBufferedDestroy">xmlSecBufferedDestroy</link>           (<link linkend="xmlSecBufferedTransformPtr">xmlSecBufferedTransformPtr</link> buffered);
int         <link linkend="xmlSecBufferedProcess">xmlSecBufferedProcess</link>           (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             <link linkend="xmlBufferPtr">xmlBufferPtr</link> buffer);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecBufferedTransformId">xmlSecBufferedTransformId</title>
<programlisting>typedef const struct _xmlSecBufferedTransformIdStruct	*xmlSecBufferedTransformId;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedProcessMethod">xmlSecBufferedProcessMethod ()</title>
<programlisting>int         (*xmlSecBufferedProcessMethod)  (<link linkend="xmlSecBufferedTransformPtr">xmlSecBufferedTransformPtr</link> transform,
                                             <link linkend="xmlBufferPtr">xmlBufferPtr</link> buffer);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedTransformIdStruct">struct xmlSecBufferedTransformIdStruct</title>
<programlisting>struct xmlSecBufferedTransformIdStruct {
    /* same as xmlSecTransformId */    
    xmlSecTransformType			type;
    xmlSecTransformUsage		usage;
    const xmlChar			*href;
    
    xmlSecTransformCreateMethod		create;
    xmlSecTransformDestroyMethod	destroy;
    xmlSecTransformReadNodeMethod	read;
    
    /* xmlSecBinTransform data/methods */
    xmlSecKeyId				keyId;
    xmlSecKeyType			encryption;
    xmlSecKeyType			decryption;
    xmlSecBinTransformSubType		binSubType;
            
    xmlSecBinTransformAddKeyMethod	addBinKey;
    xmlSecBinTransformReadMethod	readBin;
    xmlSecBinTransformWriteMethod	writeBin;
    xmlSecBinTransformFlushMethod	flushBin;    
    
    /* xmlSecBufferedTransform data/methods */
    xmlSecBufferedProcessMethod		bufferedProcess;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedTransformRead">xmlSecBufferedTransformRead ()</title>
<programlisting>int         xmlSecBufferedTransformRead     (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Reads the all data from previous transform and returns 
to the caller.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the buffered transform
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> the buffer
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the buffer size
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the number of bytes in the buffer or negative value.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedTransformWrite">xmlSecBufferedTransformWrite ()</title>
<programlisting>int         xmlSecBufferedTransformWrite    (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Adds the data to the internal buffer.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the buffered transform 
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> the data buffer
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the data size
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 if success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedTransformFlush">xmlSecBufferedTransformFlush ()</title>
<programlisting>int         xmlSecBufferedTransformFlush    (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform);</programlisting>
<para>
Writes internal data to previos transform.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the buffered transform
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 if success or negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedDestroy">xmlSecBufferedDestroy ()</title>
<programlisting>void        xmlSecBufferedDestroy           (<link linkend="xmlSecBufferedTransformPtr">xmlSecBufferedTransformPtr</link> buffered);</programlisting>
<para>
Destroys the buffered transform.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>buffered</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferedProcess">xmlSecBufferedProcess ()</title>
<programlisting>int         xmlSecBufferedProcess           (<link linkend="xmlSecBinTransformPtr">xmlSecBinTransformPtr</link> transform,
                                             <link linkend="xmlBufferPtr">xmlBufferPtr</link> buffer);</programlisting>
<para>
Executes buffered transform.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the buffered transform
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry> the buffered transform result
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>number of bytes processed or a negative value
if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
