<refentry id="xmlsec-app">
<refmeta>
<refentrytitle>app</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>app</refname><refpurpose>Crypto-engine independent application support function.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="int">int</link>         <link linkend="xmlSecCryptoInit">xmlSecCryptoInit</link>                (void);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoShutdown">xmlSecCryptoShutdown</link>            (void);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoKeysMngrInit">xmlSecCryptoKeysMngrInit</link>        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
#define     <link linkend="xmlSecKeyDataAesId">xmlSecKeyDataAesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataAesGetKlass">xmlSecKeyDataAesGetKlass</link>    (void);
#define     <link linkend="xmlSecKeyDataDesId">xmlSecKeyDataDesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataDesGetKlass">xmlSecKeyDataDesGetKlass</link>    (void);
#define     <link linkend="xmlSecKeyDataDsaId">xmlSecKeyDataDsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataDsaGetKlass">xmlSecKeyDataDsaGetKlass</link>    (void);
#define     <link linkend="xmlSecKeyDataGost2001Id">xmlSecKeyDataGost2001Id</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataGost2001GetKlass">xmlSecKeyDataGost2001GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecKeyDataHmacId">xmlSecKeyDataHmacId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataHmacGetKlass">xmlSecKeyDataHmacGetKlass</link>   (void);
#define     <link linkend="xmlSecKeyDataRsaId">xmlSecKeyDataRsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataRsaGetKlass">xmlSecKeyDataRsaGetKlass</link>    (void);
#define     <link linkend="xmlSecKeyDataX509Id">xmlSecKeyDataX509Id</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataX509GetKlass">xmlSecKeyDataX509GetKlass</link>   (void);
#define     <link linkend="xmlSecKeyDataRawX509CertId">xmlSecKeyDataRawX509CertId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecKeyDataRawX509CertGetKlass">xmlSecKeyDataRawX509CertGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecX509StoreId">xmlSecX509StoreId</link>
<link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link> <link linkend="xmlSecX509StoreGetKlass">xmlSecX509StoreGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformAes128CbcId">xmlSecTransformAes128CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformAes128CbcGetKlass">xmlSecTransformAes128CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformAes192CbcId">xmlSecTransformAes192CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformAes192CbcGetKlass">xmlSecTransformAes192CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformAes256CbcId">xmlSecTransformAes256CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformAes256CbcGetKlass">xmlSecTransformAes256CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformKWAes128Id">xmlSecTransformKWAes128Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformKWAes128GetKlass">xmlSecTransformKWAes128GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformKWAes192Id">xmlSecTransformKWAes192Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformKWAes192GetKlass">xmlSecTransformKWAes192GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformKWAes256Id">xmlSecTransformKWAes256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformKWAes256GetKlass">xmlSecTransformKWAes256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformDes3CbcId">xmlSecTransformDes3CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformDes3CbcGetKlass">xmlSecTransformDes3CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformKWDes3Id">xmlSecTransformKWDes3Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformKWDes3GetKlass">xmlSecTransformKWDes3GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformDsaSha1Id">xmlSecTransformDsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformDsaSha1GetKlass">xmlSecTransformDsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformGost2001GostR3411-94Id">xmlSecTransformGost2001GostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformGost2001GostR3411-94GetKlass">xmlSecTransformGost2001GostR3411_94GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacMd5Id">xmlSecTransformHmacMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacMd5GetKlass">xmlSecTransformHmacMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacRipemd160Id">xmlSecTransformHmacRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacRipemd160GetKlass">xmlSecTransformHmacRipemd160GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacSha1Id">xmlSecTransformHmacSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacSha1GetKlass">xmlSecTransformHmacSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacSha224Id">xmlSecTransformHmacSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacSha224GetKlass">xmlSecTransformHmacSha224GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacSha256Id">xmlSecTransformHmacSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacSha256GetKlass">xmlSecTransformHmacSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacSha384Id">xmlSecTransformHmacSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacSha384GetKlass">xmlSecTransformHmacSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformHmacSha512Id">xmlSecTransformHmacSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformHmacSha512GetKlass">xmlSecTransformHmacSha512GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformMd5Id">xmlSecTransformMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformMd5GetKlass">xmlSecTransformMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRipemd160Id">xmlSecTransformRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRipemd160GetKlass">xmlSecTransformRipemd160GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaMd5Id">xmlSecTransformRsaMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaMd5GetKlass">xmlSecTransformRsaMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaRipemd160Id">xmlSecTransformRsaRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaRipemd160GetKlass">xmlSecTransformRsaRipemd160GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaSha1Id">xmlSecTransformRsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaSha1GetKlass">xmlSecTransformRsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaSha224Id">xmlSecTransformRsaSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaSha224GetKlass">xmlSecTransformRsaSha224GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaSha256Id">xmlSecTransformRsaSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaSha256GetKlass">xmlSecTransformRsaSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaSha384Id">xmlSecTransformRsaSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaSha384GetKlass">xmlSecTransformRsaSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaSha512Id">xmlSecTransformRsaSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaSha512GetKlass">xmlSecTransformRsaSha512GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaPkcs1Id">xmlSecTransformRsaPkcs1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaPkcs1GetKlass">xmlSecTransformRsaPkcs1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRsaOaepId">xmlSecTransformRsaOaepId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRsaOaepGetKlass">xmlSecTransformRsaOaepGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformGostR3411-94Id">xmlSecTransformGostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformGostR3411-94GetKlass">xmlSecTransformGostR3411_94GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformSha1Id">xmlSecTransformSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformSha1GetKlass">xmlSecTransformSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformSha224Id">xmlSecTransformSha224Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformSha224GetKlass">xmlSecTransformSha224GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformSha256Id">xmlSecTransformSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformSha256GetKlass">xmlSecTransformSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformSha384Id">xmlSecTransformSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformSha384GetKlass">xmlSecTransformSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformSha512Id">xmlSecTransformSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformSha512GetKlass">xmlSecTransformSha512GetKlass</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppInit">xmlSecCryptoAppInit</link>             (const <link linkend="char">char</link> *config);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppShutdown">xmlSecCryptoAppShutdown</link>         (void);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppDefaultKeysMngrInit">xmlSecCryptoAppDefaultKeysMngrInit</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppDefaultKeysMngrAdoptKey">xmlSecCryptoAppDefaultKeysMngrAdoptKey</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppDefaultKeysMngrLoad">xmlSecCryptoAppDefaultKeysMngrLoad</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *uri);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppDefaultKeysMngrSave">xmlSecCryptoAppDefaultKeysMngrSave</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppKeysMngrCertLoad">xmlSecCryptoAppKeysMngrCertLoad</link> (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppKeysMngrCertLoadMemory">xmlSecCryptoAppKeysMngrCertLoadMemory</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecCryptoAppKeyLoad">xmlSecCryptoAppKeyLoad</link>         (const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecCryptoAppKeyLoadMemory">xmlSecCryptoAppKeyLoadMemory</link>   (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecCryptoAppPkcs12Load">xmlSecCryptoAppPkcs12Load</link>      (const <link linkend="char">char</link> *filename,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecCryptoAppPkcs12LoadMemory">xmlSecCryptoAppPkcs12LoadMemory</link>
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppKeyCertLoad">xmlSecCryptoAppKeyCertLoad</link>      (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="int">int</link>         <link linkend="xmlSecCryptoAppKeyCertLoadMemory">xmlSecCryptoAppKeyCertLoadMemory</link>
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="void">void</link>*       <link linkend="xmlSecCryptoAppGetDefaultPwdCallback">xmlSecCryptoAppGetDefaultPwdCallback</link>
                                            (void);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>
Crypto-engine application support function used by xmlsec command line utility.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecCryptoInit">xmlSecCryptoInit ()</title>
<indexterm><primary>xmlSecCryptoInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoInit                (void);</programlisting>
<para>
XMLSec library specific crypto engine initialization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoShutdown">xmlSecCryptoShutdown ()</title>
<indexterm><primary>xmlSecCryptoShutdown</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoShutdown            (void);</programlisting>
<para>
XMLSec library specific crypto engine shutdown.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoKeysMngrInit">xmlSecCryptoKeysMngrInit ()</title>
<indexterm><primary>xmlSecCryptoKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoKeysMngrInit        (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Adds crypto specific key data stores in keys manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataAesId">xmlSecKeyDataAesId</title>
<indexterm><primary>xmlSecKeyDataAesId</primary></indexterm><programlisting>#define xmlSecKeyDataAesId			xmlSecKeyDataAesGetKlass()
</programlisting>
<para>
The AES key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataAesGetKlass">xmlSecKeyDataAesGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataAesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataAesGetKlass    (void);</programlisting>
<para>
The AES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the AES key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataDesId">xmlSecKeyDataDesId</title>
<indexterm><primary>xmlSecKeyDataDesId</primary></indexterm><programlisting>#define xmlSecKeyDataDesId			xmlSecKeyDataDesGetKlass()
</programlisting>
<para>
The DES key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataDesGetKlass">xmlSecKeyDataDesGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataDesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataDesGetKlass    (void);</programlisting>
<para>
The DES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>DES key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the DES key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataDsaId">xmlSecKeyDataDsaId</title>
<indexterm><primary>xmlSecKeyDataDsaId</primary></indexterm><programlisting>#define xmlSecKeyDataDsaId			xmlSecKeyDataDsaGetKlass()
</programlisting>
<para>
The DSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataDsaGetKlass">xmlSecKeyDataDsaGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataDsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataDsaGetKlass    (void);</programlisting>
<para>
The DSA key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>DSA key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the DSA key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataGost2001Id">xmlSecKeyDataGost2001Id</title>
<indexterm><primary>xmlSecKeyDataGost2001Id</primary></indexterm><programlisting>#define xmlSecKeyDataGost2001Id			xmlSecKeyDataGost2001GetKlass()
</programlisting>
<para>
The GOST2001 key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataGost2001GetKlass">xmlSecKeyDataGost2001GetKlass ()</title>
<indexterm><primary>xmlSecKeyDataGost2001GetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataGost2001GetKlass
                                            (void);</programlisting>
<para>
The GOST2001 key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>GOST2001 key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the GOST2001 key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataHmacId">xmlSecKeyDataHmacId</title>
<indexterm><primary>xmlSecKeyDataHmacId</primary></indexterm><programlisting>#define xmlSecKeyDataHmacId			xmlSecKeyDataHmacGetKlass()
</programlisting>
<para>
The DHMAC key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataHmacGetKlass">xmlSecKeyDataHmacGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataHmacGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataHmacGetKlass   (void);</programlisting>
<para>
The HMAC key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>HMAC key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the HMAC key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRsaId">xmlSecKeyDataRsaId</title>
<indexterm><primary>xmlSecKeyDataRsaId</primary></indexterm><programlisting>#define xmlSecKeyDataRsaId			xmlSecKeyDataRsaGetKlass()
</programlisting>
<para>
The RSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRsaGetKlass">xmlSecKeyDataRsaGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataRsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataRsaGetKlass    (void);</programlisting>
<para>
The RSA key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the RSA key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataX509Id">xmlSecKeyDataX509Id</title>
<indexterm><primary>xmlSecKeyDataX509Id</primary></indexterm><programlisting>#define xmlSecKeyDataX509Id			xmlSecKeyDataX509GetKlass()
</programlisting>
<para>
The X509 data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataX509GetKlass">xmlSecKeyDataX509GetKlass ()</title>
<indexterm><primary>xmlSecKeyDataX509GetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataX509GetKlass   (void);</programlisting>
<para>
The X509 key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>X509 key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the X509 key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRawX509CertId">xmlSecKeyDataRawX509CertId</title>
<indexterm><primary>xmlSecKeyDataRawX509CertId</primary></indexterm><programlisting>#define xmlSecKeyDataRawX509CertId		xmlSecKeyDataRawX509CertGetKlass()
</programlisting>
<para>
The  raw X509 certificate klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecKeyDataRawX509CertGetKlass">xmlSecKeyDataRawX509CertGetKlass ()</title>
<indexterm><primary>xmlSecKeyDataRawX509CertGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecKeyDataRawX509CertGetKlass
                                            (void);</programlisting>
<para>
The raw X509 cert key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>raw x509 cert key data klass or NULL if an error occurs
(xmlsec-crypto library is not loaded or the raw X509 cert key data
klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecX509StoreId">xmlSecX509StoreId</title>
<indexterm><primary>xmlSecX509StoreId</primary></indexterm><programlisting>#define xmlSecX509StoreId			xmlSecX509StoreGetKlass()
</programlisting>
<para>
The  X509 store klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecX509StoreGetKlass">xmlSecX509StoreGetKlass ()</title>
<indexterm><primary>xmlSecX509StoreGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataStoreId">xmlSecKeyDataStoreId</link> xmlSecX509StoreGetKlass
                                            (void);</programlisting>
<para>
The X509 certificates key data store klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to X509 certificates key data store klass or NULL if 
an error occurs (xmlsec-crypto library is not loaded or the raw X509 
cert key data klass is not implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes128CbcId">xmlSecTransformAes128CbcId</title>
<indexterm><primary>xmlSecTransformAes128CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes128CbcId		xmlSecTransformAes128CbcGetKlass()
</programlisting>
<para>
The AES128 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes128CbcGetKlass">xmlSecTransformAes128CbcGetKlass ()</title>
<indexterm><primary>xmlSecTransformAes128CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformAes128CbcGetKlass
                                            (void);</programlisting>
<para>
AES 128 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 128 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes192CbcId">xmlSecTransformAes192CbcId</title>
<indexterm><primary>xmlSecTransformAes192CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes192CbcId		xmlSecTransformAes192CbcGetKlass()
</programlisting>
<para>
The AES192 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes192CbcGetKlass">xmlSecTransformAes192CbcGetKlass ()</title>
<indexterm><primary>xmlSecTransformAes192CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformAes192CbcGetKlass
                                            (void);</programlisting>
<para>
AES 192 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 192 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes256CbcId">xmlSecTransformAes256CbcId</title>
<indexterm><primary>xmlSecTransformAes256CbcId</primary></indexterm><programlisting>#define xmlSecTransformAes256CbcId		xmlSecTransformAes256CbcGetKlass()
</programlisting>
<para>
The AES256 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAes256CbcGetKlass">xmlSecTransformAes256CbcGetKlass ()</title>
<indexterm><primary>xmlSecTransformAes256CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformAes256CbcGetKlass
                                            (void);</programlisting>
<para>
AES 256 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 256 CBC encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes128Id">xmlSecTransformKWAes128Id</title>
<indexterm><primary>xmlSecTransformKWAes128Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes128Id		xmlSecTransformKWAes128GetKlass()
</programlisting>
<para>
The AES 128 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes128GetKlass">xmlSecTransformKWAes128GetKlass ()</title>
<indexterm><primary>xmlSecTransformKWAes128GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformKWAes128GetKlass
                                            (void);</programlisting>
<para>
The AES-128 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-128 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes192Id">xmlSecTransformKWAes192Id</title>
<indexterm><primary>xmlSecTransformKWAes192Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes192Id		xmlSecTransformKWAes192GetKlass()
</programlisting>
<para>
The AES 192 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes192GetKlass">xmlSecTransformKWAes192GetKlass ()</title>
<indexterm><primary>xmlSecTransformKWAes192GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformKWAes192GetKlass
                                            (void);</programlisting>
<para>
The AES-192 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-192 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes256Id">xmlSecTransformKWAes256Id</title>
<indexterm><primary>xmlSecTransformKWAes256Id</primary></indexterm><programlisting>#define xmlSecTransformKWAes256Id		xmlSecTransformKWAes256GetKlass()
</programlisting>
<para>
The AES 256 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWAes256GetKlass">xmlSecTransformKWAes256GetKlass ()</title>
<indexterm><primary>xmlSecTransformKWAes256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformKWAes256GetKlass
                                            (void);</programlisting>
<para>
The AES-256 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-256 kew wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDes3CbcId">xmlSecTransformDes3CbcId</title>
<indexterm><primary>xmlSecTransformDes3CbcId</primary></indexterm><programlisting>#define xmlSecTransformDes3CbcId		xmlSecTransformDes3CbcGetKlass()
</programlisting>
<para>
The Triple DES encryption transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDes3CbcGetKlass">xmlSecTransformDes3CbcGetKlass ()</title>
<indexterm><primary>xmlSecTransformDes3CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformDes3CbcGetKlass
                                            (void);</programlisting>
<para>
Triple DES CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to Triple DES encryption transform or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWDes3Id">xmlSecTransformKWDes3Id</title>
<indexterm><primary>xmlSecTransformKWDes3Id</primary></indexterm><programlisting>#define xmlSecTransformKWDes3Id			xmlSecTransformKWDes3GetKlass()
</programlisting>
<para>
The DES3 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKWDes3GetKlass">xmlSecTransformKWDes3GetKlass ()</title>
<indexterm><primary>xmlSecTransformKWDes3GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformKWDes3GetKlass
                                            (void);</programlisting>
<para>
The Triple DES key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>Triple DES key wrapper transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDsaSha1Id">xmlSecTransformDsaSha1Id</title>
<indexterm><primary>xmlSecTransformDsaSha1Id</primary></indexterm><programlisting>#define xmlSecTransformDsaSha1Id		xmlSecTransformDsaSha1GetKlass()
</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDsaSha1GetKlass">xmlSecTransformDsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecTransformDsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformDsaSha1GetKlass
                                            (void);</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>DSA-SHA1 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGost2001GostR3411-94Id">xmlSecTransformGost2001GostR3411_94Id</title>
<indexterm><primary>xmlSecTransformGost2001GostR3411_94Id</primary></indexterm><programlisting>#define xmlSecTransformGost2001GostR3411_94Id		xmlSecTransformGost2001GostR3411_94GetKlass()
</programlisting>
<para>
The GOST2001-GOSTR3411_94 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGost2001GostR3411-94GetKlass">xmlSecTransformGost2001GostR3411_94GetKlass ()</title>
<indexterm><primary>xmlSecTransformGost2001GostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformGost2001GostR3411_94GetKlass
                                            (void);</programlisting>
<para>
The GOST2001-GOSTR3411_94 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>GOST2001-GOSTR3411_94 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacMd5Id">xmlSecTransformHmacMd5Id</title>
<indexterm><primary>xmlSecTransformHmacMd5Id</primary></indexterm><programlisting>#define xmlSecTransformHmacMd5Id		xmlSecTransformHmacMd5GetKlass()
</programlisting>
<para>
The HMAC with MD5 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacMd5GetKlass">xmlSecTransformHmacMd5GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacMd5GetKlass
                                            (void);</programlisting>
<para>
The HMAC-MD5 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-MD5 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacRipemd160Id">xmlSecTransformHmacRipemd160Id</title>
<indexterm><primary>xmlSecTransformHmacRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformHmacRipemd160Id		xmlSecTransformHmacRipemd160GetKlass()
</programlisting>
<para>
The HMAC with RipeMD160 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacRipemd160GetKlass">xmlSecTransformHmacRipemd160GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacRipemd160GetKlass
                                            (void);</programlisting>
<para>
The HMAC-RIPEMD160 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-RIPEMD160 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha1Id">xmlSecTransformHmacSha1Id</title>
<indexterm><primary>xmlSecTransformHmacSha1Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha1Id		xmlSecTransformHmacSha1GetKlass()
</programlisting>
<para>
The HMAC with SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha1GetKlass">xmlSecTransformHmacSha1GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacSha1GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA1 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA1 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha224Id">xmlSecTransformHmacSha224Id</title>
<indexterm><primary>xmlSecTransformHmacSha224Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha224Id		xmlSecTransformHmacSha224GetKlass()
</programlisting>
<para>
The HMAC with SHA224 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha224GetKlass">xmlSecTransformHmacSha224GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacSha224GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA224 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA224 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha256Id">xmlSecTransformHmacSha256Id</title>
<indexterm><primary>xmlSecTransformHmacSha256Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha256Id		xmlSecTransformHmacSha256GetKlass()
</programlisting>
<para>
The HMAC with SHA256 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha256GetKlass">xmlSecTransformHmacSha256GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacSha256GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA256 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA256 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha384Id">xmlSecTransformHmacSha384Id</title>
<indexterm><primary>xmlSecTransformHmacSha384Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha384Id		xmlSecTransformHmacSha384GetKlass()
</programlisting>
<para>
The HMAC with SHA384 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha384GetKlass">xmlSecTransformHmacSha384GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacSha384GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA384 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA384 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha512Id">xmlSecTransformHmacSha512Id</title>
<indexterm><primary>xmlSecTransformHmacSha512Id</primary></indexterm><programlisting>#define xmlSecTransformHmacSha512Id		xmlSecTransformHmacSha512GetKlass()
</programlisting>
<para>
The HMAC with SHA512 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformHmacSha512GetKlass">xmlSecTransformHmacSha512GetKlass ()</title>
<indexterm><primary>xmlSecTransformHmacSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformHmacSha512GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA512 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA512 transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformMd5Id">xmlSecTransformMd5Id</title>
<indexterm><primary>xmlSecTransformMd5Id</primary></indexterm><programlisting>#define xmlSecTransformMd5Id			xmlSecTransformMd5GetKlass()
</programlisting>
<para>
The MD5 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformMd5GetKlass">xmlSecTransformMd5GetKlass ()</title>
<indexterm><primary>xmlSecTransformMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformMd5GetKlass
                                            (void);</programlisting>
<para>
MD5 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to MD5 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRipemd160Id">xmlSecTransformRipemd160Id</title>
<indexterm><primary>xmlSecTransformRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformRipemd160Id		xmlSecTransformRipemd160GetKlass()
</programlisting>
<para>
The RIPEMD160 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRipemd160GetKlass">xmlSecTransformRipemd160GetKlass ()</title>
<indexterm><primary>xmlSecTransformRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRipemd160GetKlass
                                            (void);</programlisting>
<para>
RIPEMD-160 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to RIPEMD-160 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaMd5Id">xmlSecTransformRsaMd5Id</title>
<indexterm><primary>xmlSecTransformRsaMd5Id</primary></indexterm><programlisting>#define xmlSecTransformRsaMd5Id			xmlSecTransformRsaMd5GetKlass()
</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaMd5GetKlass">xmlSecTransformRsaMd5GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaMd5GetKlass
                                            (void);</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-MD5 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaRipemd160Id">xmlSecTransformRsaRipemd160Id</title>
<indexterm><primary>xmlSecTransformRsaRipemd160Id</primary></indexterm><programlisting>#define xmlSecTransformRsaRipemd160Id		xmlSecTransformRsaRipemd160GetKlass()
</programlisting>
<para>
The RSA-RIPEMD160 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaRipemd160GetKlass">xmlSecTransformRsaRipemd160GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaRipemd160GetKlass
                                            (void);</programlisting>
<para>
The RSA-RIPEMD160 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-RIPEMD160 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha1Id">xmlSecTransformRsaSha1Id</title>
<indexterm><primary>xmlSecTransformRsaSha1Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha1Id		xmlSecTransformRsaSha1GetKlass()
</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha1GetKlass">xmlSecTransformRsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaSha1GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA1 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha224Id">xmlSecTransformRsaSha224Id</title>
<indexterm><primary>xmlSecTransformRsaSha224Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha224Id		xmlSecTransformRsaSha224GetKlass()
</programlisting>
<para>
The RSA-SHA224 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha224GetKlass">xmlSecTransformRsaSha224GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaSha224GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA224 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA224 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha256Id">xmlSecTransformRsaSha256Id</title>
<indexterm><primary>xmlSecTransformRsaSha256Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha256Id		xmlSecTransformRsaSha256GetKlass()
</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha256GetKlass">xmlSecTransformRsaSha256GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaSha256GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA256 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha384Id">xmlSecTransformRsaSha384Id</title>
<indexterm><primary>xmlSecTransformRsaSha384Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha384Id		xmlSecTransformRsaSha384GetKlass()
</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha384GetKlass">xmlSecTransformRsaSha384GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaSha384GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA384 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha512Id">xmlSecTransformRsaSha512Id</title>
<indexterm><primary>xmlSecTransformRsaSha512Id</primary></indexterm><programlisting>#define xmlSecTransformRsaSha512Id		xmlSecTransformRsaSha512GetKlass()
</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaSha512GetKlass">xmlSecTransformRsaSha512GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaSha512GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA512 signature transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaPkcs1Id">xmlSecTransformRsaPkcs1Id</title>
<indexterm><primary>xmlSecTransformRsaPkcs1Id</primary></indexterm><programlisting>#define xmlSecTransformRsaPkcs1Id		xmlSecTransformRsaPkcs1GetKlass()
</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaPkcs1GetKlass">xmlSecTransformRsaPkcs1GetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaPkcs1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaPkcs1GetKlass
                                            (void);</programlisting>
<para>
The RSA-PKCS1 key transport transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-PKCS1 key transport transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaOaepId">xmlSecTransformRsaOaepId</title>
<indexterm><primary>xmlSecTransformRsaOaepId</primary></indexterm><programlisting>#define xmlSecTransformRsaOaepId		xmlSecTransformRsaOaepGetKlass()
</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRsaOaepGetKlass">xmlSecTransformRsaOaepGetKlass ()</title>
<indexterm><primary>xmlSecTransformRsaOaepGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRsaOaepGetKlass
                                            (void);</programlisting>
<para>
The RSA-OAEP key transport transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-OAEP key transport transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGostR3411-94Id">xmlSecTransformGostR3411_94Id</title>
<indexterm><primary>xmlSecTransformGostR3411_94Id</primary></indexterm><programlisting>#define xmlSecTransformGostR3411_94Id			xmlSecTransformGostR3411_94GetKlass()
</programlisting>
<para>
The GOSTR3411_94 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGostR3411-94GetKlass">xmlSecTransformGostR3411_94GetKlass ()</title>
<indexterm><primary>xmlSecTransformGostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformGostR3411_94GetKlass
                                            (void);</programlisting>
<para>
GOSTR3411_94 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to GOSTR3411_94 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha1Id">xmlSecTransformSha1Id</title>
<indexterm><primary>xmlSecTransformSha1Id</primary></indexterm><programlisting>#define xmlSecTransformSha1Id			xmlSecTransformSha1GetKlass()
</programlisting>
<para>
The SHA1 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha1GetKlass">xmlSecTransformSha1GetKlass ()</title>
<indexterm><primary>xmlSecTransformSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformSha1GetKlass
                                            (void);</programlisting>
<para>
SHA-1 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA-1 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha224Id">xmlSecTransformSha224Id</title>
<indexterm><primary>xmlSecTransformSha224Id</primary></indexterm><programlisting>#define xmlSecTransformSha224Id			xmlSecTransformSha224GetKlass()
</programlisting>
<para>
The SHA224 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha224GetKlass">xmlSecTransformSha224GetKlass ()</title>
<indexterm><primary>xmlSecTransformSha224GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformSha224GetKlass
                                            (void);</programlisting>
<para>
SHA224 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA224 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha256Id">xmlSecTransformSha256Id</title>
<indexterm><primary>xmlSecTransformSha256Id</primary></indexterm><programlisting>#define xmlSecTransformSha256Id			xmlSecTransformSha256GetKlass()
</programlisting>
<para>
The SHA256 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha256GetKlass">xmlSecTransformSha256GetKlass ()</title>
<indexterm><primary>xmlSecTransformSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformSha256GetKlass
                                            (void);</programlisting>
<para>
SHA256 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA256 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha384Id">xmlSecTransformSha384Id</title>
<indexterm><primary>xmlSecTransformSha384Id</primary></indexterm><programlisting>#define xmlSecTransformSha384Id			xmlSecTransformSha384GetKlass()
</programlisting>
<para>
The SHA384 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha384GetKlass">xmlSecTransformSha384GetKlass ()</title>
<indexterm><primary>xmlSecTransformSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformSha384GetKlass
                                            (void);</programlisting>
<para>
SHA384 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA384 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha512Id">xmlSecTransformSha512Id</title>
<indexterm><primary>xmlSecTransformSha512Id</primary></indexterm><programlisting>#define xmlSecTransformSha512Id			xmlSecTransformSha512GetKlass()
</programlisting>
<para>
The SHA512 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSha512GetKlass">xmlSecTransformSha512GetKlass ()</title>
<indexterm><primary>xmlSecTransformSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformSha512GetKlass
                                            (void);</programlisting>
<para>
SHA512 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA512 digest transform klass or NULL if an error
occurs (the xmlsec-crypto library is not loaded or this transform is not
implemented).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppInit">xmlSecCryptoAppInit ()</title>
<indexterm><primary>xmlSecCryptoAppInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppInit             (const <link linkend="char">char</link> *config);</programlisting>
<para>
General crypto engine initialization. This function is used
by XMLSec command line utility and called before 
<parameter>xmlSecInit</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>config</parameter>&nbsp;:</term>
<listitem><simpara>		the path to crypto library configuration.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppShutdown">xmlSecCryptoAppShutdown ()</title>
<indexterm><primary>xmlSecCryptoAppShutdown</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppShutdown         (void);</programlisting>
<para>
General crypto engine shutdown. This function is used
by XMLSec command line utility and called after 
<parameter>xmlSecShutdown</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppDefaultKeysMngrInit">xmlSecCryptoAppDefaultKeysMngrInit ()</title>
<indexterm><primary>xmlSecCryptoAppDefaultKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppDefaultKeysMngrInit
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Initializes <parameter>mngr</parameter> with simple keys store <link linkend="xmlSecSimpleKeysStoreId"><type>xmlSecSimpleKeysStoreId</type></link>
and a default crypto key data stores.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppDefaultKeysMngrAdoptKey">xmlSecCryptoAppDefaultKeysMngrAdoptKey ()</title>
<indexterm><primary>xmlSecCryptoAppDefaultKeysMngrAdoptKey</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppDefaultKeysMngrAdoptKey
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Adds <parameter>key</parameter> to the keys manager <parameter>mngr</parameter> created with <link linkend="xmlSecCryptoAppDefaultKeysMngrInit"><type>xmlSecCryptoAppDefaultKeysMngrInit</type></link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppDefaultKeysMngrLoad">xmlSecCryptoAppDefaultKeysMngrLoad ()</title>
<indexterm><primary>xmlSecCryptoAppDefaultKeysMngrLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppDefaultKeysMngrLoad
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *uri);</programlisting>
<para>
Loads XML keys file from <parameter>uri</parameter> to the keys manager <parameter>mngr</parameter> created 
with <link linkend="xmlSecCryptoAppDefaultKeysMngrInit"><type>xmlSecCryptoAppDefaultKeysMngrInit</type></link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>		the uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppDefaultKeysMngrSave">xmlSecCryptoAppDefaultKeysMngrSave ()</title>
<indexterm><primary>xmlSecCryptoAppDefaultKeysMngrSave</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppDefaultKeysMngrSave
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Saves keys from <parameter>mngr</parameter> to  XML keys file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the destination filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>		the type of keys to save (public/private/symmetric).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeysMngrCertLoad">xmlSecCryptoAppKeysMngrCertLoad ()</title>
<indexterm><primary>xmlSecCryptoAppKeysMngrCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppKeysMngrCertLoad (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from <parameter>filename</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara> 		the certificate file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the flag that indicates is the certificate in <parameter>filename</parameter>
   			trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeysMngrCertLoadMemory">xmlSecCryptoAppKeysMngrCertLoadMemory ()</title>
<indexterm><primary>xmlSecCryptoAppKeysMngrCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppKeysMngrCertLoadMemory
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from binary buffer <parameter>data</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara> 		the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeyLoad">xmlSecCryptoAppKeyLoad ()</title>
<indexterm><primary>xmlSecCryptoAppKeyLoad</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecCryptoAppKeyLoad         (const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the a file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeyLoadMemory">xmlSecCryptoAppKeyLoadMemory ()</title>
<indexterm><primary>xmlSecCryptoAppKeyLoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecCryptoAppKeyLoadMemory   (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the memory buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the binary key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the size of binary key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppPkcs12Load">xmlSecCryptoAppPkcs12Load ()</title>
<indexterm><primary>xmlSecCryptoAppPkcs12Load</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecCryptoAppPkcs12Load      (const <link linkend="char">char</link> *filename,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 file.
For uniformity, call xmlSecCryptoAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppPkcs12LoadMemory">xmlSecCryptoAppPkcs12LoadMemory ()</title>
<indexterm><primary>xmlSecCryptoAppPkcs12LoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecCryptoAppPkcs12LoadMemory
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in memory buffer.
For uniformity, call xmlSecCryptoAppKeyLoadMemory instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>		the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>	the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>	the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeyCertLoad">xmlSecCryptoAppKeyCertLoad ()</title>
<indexterm><primary>xmlSecCryptoAppKeyCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppKeyCertLoad      (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from $<parameter>filename</parameter> and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppKeyCertLoadMemory">xmlSecCryptoAppKeyCertLoadMemory ()</title>
<indexterm><primary>xmlSecCryptoAppKeyCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecCryptoAppKeyCertLoadMemory
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>		the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCryptoAppGetDefaultPwdCallback">xmlSecCryptoAppGetDefaultPwdCallback ()</title>
<indexterm><primary>xmlSecCryptoAppGetDefaultPwdCallback</primary></indexterm><programlisting><link linkend="void">void</link>*       xmlSecCryptoAppGetDefaultPwdCallback
                                            (void);</programlisting>
<para>
Gets default password callback.</para>
<para>

</para></refsect2>

</refsect1>




</refentry>
