<refentry id="xmlsec-keysdata">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-keysdata.top_of_page">keysdata</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keysdata</refname>
<refpurpose>Crypto key data object definition.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-keysdata.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdsGet">xmlSecKeyDataIdsGet</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdsInit">xmlSecKeyDataIdsInit</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdsShutdown">xmlSecKeyDataIdsShutdown</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdsRegisterDefault">xmlSecKeyDataIdsRegisterDefault</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdsRegister">xmlSecKeyDataIdsRegister</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataCreate">xmlSecKeyDataCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataDuplicate">xmlSecKeyDataDuplicate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataDestroy">xmlSecKeyDataDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataGenerate">xmlSecKeyDataGenerate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataGetType">xmlSecKeyDataGetType</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataGetSize">xmlSecKeyDataGetSize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecKeyDataGetIdentifier">xmlSecKeyDataGetIdentifier</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataDebugDump">xmlSecKeyDataDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataDebugXmlDump">xmlSecKeyDataDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataXmlRead">xmlSecKeyDataXmlRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataXmlWrite">xmlSecKeyDataXmlWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinRead">xmlSecKeyDataBinRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinWrite">xmlSecKeyDataBinWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataGetName">xmlSecKeyDataGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataIsValid">xmlSecKeyDataIsValid</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataCheckId">xmlSecKeyDataCheckId</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataCheckUsage">xmlSecKeyDataCheckUsage</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataCheckSize">xmlSecKeyDataCheckSize</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdUnknown">xmlSecKeyDataIdUnknown</link></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataInitMethod">*xmlSecKeyDataInitMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataDuplicateMethod">*xmlSecKeyDataDuplicateMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataFinalizeMethod">*xmlSecKeyDataFinalizeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataXmlReadMethod">*xmlSecKeyDataXmlReadMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataXmlWriteMethod">*xmlSecKeyDataXmlWriteMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataBinReadMethod">*xmlSecKeyDataBinReadMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataBinWriteMethod">*xmlSecKeyDataBinWriteMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataGenerateMethod">*xmlSecKeyDataGenerateMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataGetTypeMethod">*xmlSecKeyDataGetTypeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataGetSizeMethod">*xmlSecKeyDataGetSizeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataGetIdentifierMethod">*xmlSecKeyDataGetIdentifierMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataDebugDumpMethod">*xmlSecKeyDataDebugDumpMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataKlassGetName">xmlSecKeyDataKlassGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataListGetKlass">xmlSecKeyDataListGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListGetKlass">xmlSecKeyDataIdListGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListFind">xmlSecKeyDataIdListFind</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListFindByNode">xmlSecKeyDataIdListFindByNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListFindByHref">xmlSecKeyDataIdListFindByHref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListFindByName">xmlSecKeyDataIdListFindByName</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListDebugDump">xmlSecKeyDataIdListDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListDebugXmlDump">xmlSecKeyDataIdListDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueInitialize">xmlSecKeyDataBinaryValueInitialize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueDuplicate">xmlSecKeyDataBinaryValueDuplicate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueFinalize">xmlSecKeyDataBinaryValueFinalize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueXmlRead">xmlSecKeyDataBinaryValueXmlRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueXmlWrite">xmlSecKeyDataBinaryValueXmlWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueBinRead">xmlSecKeyDataBinaryValueBinRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueBinWrite">xmlSecKeyDataBinaryValueBinWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueDebugDump">xmlSecKeyDataBinaryValueDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueDebugXmlDump">xmlSecKeyDataBinaryValueDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueGetSize">xmlSecKeyDataBinaryValueGetSize</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueGetBuffer">xmlSecKeyDataBinaryValueGetBuffer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinaryValueSetBuffer">xmlSecKeyDataBinaryValueSetBuffer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreCreate">xmlSecKeyDataStoreCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreDestroy">xmlSecKeyDataStoreDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreGetName">xmlSecKeyDataStoreGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreIsValid">xmlSecKeyDataStoreIsValid</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreCheckId">xmlSecKeyDataStoreCheckId</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreCheckSize">xmlSecKeyDataStoreCheckSize</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataStoreInitializeMethod">*xmlSecKeyDataStoreInitializeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyDataStoreFinalizeMethod">*xmlSecKeyDataStoreFinalizeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreKlassGetName">xmlSecKeyDataStoreKlassGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyDataStorePtrListGetKlass">xmlSecKeyDataStorePtrListGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-keysdata.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsage">xmlSecKeyDataUsage</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageUnknown">xmlSecKeyDataUsageUnknown</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyInfoNodeRead">xmlSecKeyDataUsageKeyInfoNodeRead</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyInfoNodeWrite">xmlSecKeyDataUsageKeyInfoNodeWrite</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyValueNodeRead">xmlSecKeyDataUsageKeyValueNodeRead</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyValueNodeWrite">xmlSecKeyDataUsageKeyValueNodeWrite</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageRetrievalMethodNodeXml">xmlSecKeyDataUsageRetrievalMethodNodeXml</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageRetrievalMethodNodeBin">xmlSecKeyDataUsageRetrievalMethodNodeBin</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageAny">xmlSecKeyDataUsageAny</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyInfoNode">xmlSecKeyDataUsageKeyInfoNode</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageKeyValueNode">xmlSecKeyDataUsageKeyValueNode</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataUsageRetrievalMethodNode">xmlSecKeyDataUsageRetrievalMethodNode</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeUnknown">xmlSecKeyDataTypeUnknown</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeNone">xmlSecKeyDataTypeNone</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypePublic">xmlSecKeyDataTypePublic</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypePrivate">xmlSecKeyDataTypePrivate</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeSymmetric">xmlSecKeyDataTypeSymmetric</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeSession">xmlSecKeyDataTypeSession</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypePermanent">xmlSecKeyDataTypePermanent</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeTrusted">xmlSecKeyDataTypeTrusted</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataTypeAny">xmlSecKeyDataTypeAny</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyData">xmlSecKeyData</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyDataKlass">xmlSecKeyDataKlass</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataListId">xmlSecKeyDataListId</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataIdListId">xmlSecKeyDataIdListId</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataBinarySize">xmlSecKeyDataBinarySize</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyDataStore">xmlSecKeyDataStore</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreIdUnknown">xmlSecKeyDataStoreIdUnknown</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyDataStoreKlass">xmlSecKeyDataStoreKlass</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyDataStorePtrListId">xmlSecKeyDataStorePtrListId</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-keysdata.description" role="desc">
<title role="desc.title">Description</title>
<para>
Crypto key data object definition.
</para>

</refsect1>
<refsect1 id="xmlsec-keysdata.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecKeyDataIdsGet" role="function">
<title>xmlSecKeyDataIdsGet&#160;()</title>
<indexterm zone="xmlSecKeyDataIdsGet"><primary>xmlSecKeyDataIdsGet</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>
xmlSecKeyDataIdsGet (<parameter><type>void</type></parameter>);</programlisting>
<para>Gets global registered key data klasses list.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the pointer to list of all registered key data klasses.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdsInit" role="function">
<title>xmlSecKeyDataIdsInit&#160;()</title>
<indexterm zone="xmlSecKeyDataIdsInit"><primary>xmlSecKeyDataIdsInit</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataIdsInit (<parameter><type>void</type></parameter>);</programlisting>
<para>Initializes the key data klasses. This function is called from the
<link linkend="xmlSecInit"><type>xmlSecInit</type></link> function and the application should not call it directly.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdsShutdown" role="function">
<title>xmlSecKeyDataIdsShutdown&#160;()</title>
<indexterm zone="xmlSecKeyDataIdsShutdown"><primary>xmlSecKeyDataIdsShutdown</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataIdsShutdown (<parameter><type>void</type></parameter>);</programlisting>
<para>Shuts down the keys data klasses. This function is called from the
<link linkend="xmlSecShutdown"><type>xmlSecShutdown</type></link> function and the application should not call it directly.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataIdsRegisterDefault" role="function">
<title>xmlSecKeyDataIdsRegisterDefault&#160;()</title>
<indexterm zone="xmlSecKeyDataIdsRegisterDefault"><primary>xmlSecKeyDataIdsRegisterDefault</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataIdsRegisterDefault (<parameter><type>void</type></parameter>);</programlisting>
<para>Registers default (implemented by XML Security Library)
key data klasses: &lt;dsig:KeyName/> element processing klass,
&lt;dsig:KeyValue/> element processing klass, ...</para>
<refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdsRegister" role="function">
<title>xmlSecKeyDataIdsRegister&#160;()</title>
<indexterm zone="xmlSecKeyDataIdsRegister"><primary>xmlSecKeyDataIdsRegister</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataIdsRegister (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);</programlisting>
<para>Registers <parameter>id</parameter>
 in the global list of key data klasses.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the key data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataCreate" role="function">
<title>xmlSecKeyDataCreate&#160;()</title>
<indexterm zone="xmlSecKeyDataCreate"><primary>xmlSecKeyDataCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>
xmlSecKeyDataCreate (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);</programlisting>
<para>Allocates and initializes new key data of the specified type <parameter>id</parameter>
.
Caller is responsible for destroying returned object with
<link linkend="xmlSecKeyDataDestroy"><type>xmlSecKeyDataDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data id.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to newly allocated key data structure
or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDuplicate" role="function">
<title>xmlSecKeyDataDuplicate&#160;()</title>
<indexterm zone="xmlSecKeyDataDuplicate"><primary>xmlSecKeyDataDuplicate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>
xmlSecKeyDataDuplicate (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Creates a duplicate of the given <parameter>data</parameter>
. Caller is responsible for
destroying returned object with <link linkend="xmlSecKeyDataDestroy"><type>xmlSecKeyDataDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to the key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to newly allocated key data structure
or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDestroy" role="function">
<title>xmlSecKeyDataDestroy&#160;()</title>
<indexterm zone="xmlSecKeyDataDestroy"><primary>xmlSecKeyDataDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataDestroy (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Destroys the data and frees all allocated memory.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to the key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGenerate" role="function">
<title>xmlSecKeyDataGenerate&#160;()</title>
<indexterm zone="xmlSecKeyDataGenerate"><primary>xmlSecKeyDataGenerate</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataGenerate (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                       <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                       <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);</programlisting>
<para>Generates new key data of given size and type.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>sizeBits</para></entry>
<entry role="parameter_description"><para>the desired key data size (in bits).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the desired key data type.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetType" role="function">
<title>xmlSecKeyDataGetType&#160;()</title>
<indexterm zone="xmlSecKeyDataGetType"><primary>xmlSecKeyDataGetType</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>
xmlSecKeyDataGetType (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Gets key data type.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data type.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetSize" role="function">
<title>xmlSecKeyDataGetSize&#160;()</title>
<indexterm zone="xmlSecKeyDataGetSize"><primary>xmlSecKeyDataGetSize</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
xmlSecKeyDataGetSize (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Gets key data size.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data size (in bits).</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetIdentifier" role="function">
<title>xmlSecKeyDataGetIdentifier&#160;()</title>
<indexterm zone="xmlSecKeyDataGetIdentifier"><primary>xmlSecKeyDataGetIdentifier</primary></indexterm>
<programlisting language="C">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecKeyDataGetIdentifier (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Gets key data identifier string.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data id string.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDebugDump" role="function">
<title>xmlSecKeyDataDebugDump&#160;()</title>
<indexterm zone="xmlSecKeyDataDebugDump"><primary>xmlSecKeyDataDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataDebugDump (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                        <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints key data debug info.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDebugXmlDump" role="function">
<title>xmlSecKeyDataDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecKeyDataDebugXmlDump"><primary>xmlSecKeyDataDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataDebugXmlDump (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                           <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints key data debug info in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataXmlRead" role="function">
<title>xmlSecKeyDataXmlRead&#160;()</title>
<indexterm zone="xmlSecKeyDataXmlRead"><primary>xmlSecKeyDataXmlRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataXmlRead (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                      <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                      <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                      <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads the key data of klass <parameter>id</parameter>
 from XML <parameter>node</parameter>
 and adds them to <parameter>key</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the destination key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataXmlWrite" role="function">
<title>xmlSecKeyDataXmlWrite&#160;()</title>
<indexterm zone="xmlSecKeyDataXmlWrite"><primary>xmlSecKeyDataXmlWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataXmlWrite (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                       <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                       <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                       <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Writes the key data of klass <parameter>id</parameter>
 from <parameter>key</parameter>
 to an XML <parameter>node</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the source key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinRead" role="function">
<title>xmlSecKeyDataBinRead&#160;()</title>
<indexterm zone="xmlSecKeyDataBinRead"><primary>xmlSecKeyDataBinRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinRead (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                      <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                      <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                      <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                      <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads the key data of klass <parameter>id</parameter>
 from binary buffer <parameter>buf</parameter>
 to <parameter>key</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the destination key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the input binary buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the input buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinWrite" role="function">
<title>xmlSecKeyDataBinWrite&#160;()</title>
<indexterm zone="xmlSecKeyDataBinWrite"><primary>xmlSecKeyDataBinWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinWrite (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                       <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                       <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                       <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                       <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Writes the key data of klass <parameter>id</parameter>
 from the <parameter>key</parameter>
 to a binary buffer <parameter>buf</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the source key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the output binary buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the output buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetName" role="macro">
<title>xmlSecKeyDataGetName()</title>
<indexterm zone="xmlSecKeyDataGetName"><primary>xmlSecKeyDataGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataGetName(data)</programlisting>
<para>Macro. Returns the key data name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIsValid" role="macro">
<title>xmlSecKeyDataIsValid()</title>
<indexterm zone="xmlSecKeyDataIsValid"><primary>xmlSecKeyDataIsValid</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataIsValid(data)</programlisting>
<para>Macro. Returns 1 if <parameter>data</parameter>
 is not NULL and <parameter>data->id</parameter>
 is not NULL
or 0 otherwise.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataCheckId" role="macro">
<title>xmlSecKeyDataCheckId()</title>
<indexterm zone="xmlSecKeyDataCheckId"><primary>xmlSecKeyDataCheckId</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataCheckId(data, dataId)</programlisting>
<para>Macro. Returns 1 if <parameter>data</parameter>
 is valid and <parameter>data</parameter>
's id is equal to <parameter>dataId</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dataId</para></entry>
<entry role="parameter_description"><para>the data Id.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataCheckUsage" role="macro">
<title>xmlSecKeyDataCheckUsage()</title>
<indexterm zone="xmlSecKeyDataCheckUsage"><primary>xmlSecKeyDataCheckUsage</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataCheckUsage(data, usg)</programlisting>
<para>Macro. Returns 1 if <parameter>data</parameter>
 is valid and could be used for <parameter>usg</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>usg</para></entry>
<entry role="parameter_description"><para>the data usage.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataCheckSize" role="macro">
<title>xmlSecKeyDataCheckSize()</title>
<indexterm zone="xmlSecKeyDataCheckSize"><primary>xmlSecKeyDataCheckSize</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataCheckSize(data, size)</programlisting>
<para>Macro. Returns 1 if <parameter>data</parameter>
 is valid and <parameter>data</parameter>
's object has at least <parameter>size</parameter>
 bytes.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the expected size.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdUnknown" role="macro">
<title>xmlSecKeyDataIdUnknown</title>
<indexterm zone="xmlSecKeyDataIdUnknown"><primary>xmlSecKeyDataIdUnknown</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataIdUnknown                  ((xmlSecKeyDataId)NULL)
</programlisting>
<para>The "unknown" id.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataInitMethod" role="function">
<title>xmlSecKeyDataInitMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataInitMethod"><primary>xmlSecKeyDataInitMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataInitMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Key data specific initialization method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDuplicateMethod" role="function">
<title>xmlSecKeyDataDuplicateMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataDuplicateMethod"><primary>xmlSecKeyDataDuplicateMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataDuplicateMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                 <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);</programlisting>
<para>Key data specific duplication (copy) method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dst</para></entry>
<entry role="parameter_description"><para>the pointer to destination key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>the poiniter to source key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataFinalizeMethod" role="function">
<title>xmlSecKeyDataFinalizeMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataFinalizeMethod"><primary>xmlSecKeyDataFinalizeMethod</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataFinalizeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Key data specific finalization method. All the objects and resources allocated
by the key data object must be freed inside this method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataXmlReadMethod" role="function">
<title>xmlSecKeyDataXmlReadMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataXmlReadMethod"><primary>xmlSecKeyDataXmlReadMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataXmlReadMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                               <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                               <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                               <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Key data specific method for reading XML node.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data id.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to data's value XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataXmlWriteMethod" role="function">
<title>xmlSecKeyDataXmlWriteMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataXmlWriteMethod"><primary>xmlSecKeyDataXmlWriteMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataXmlWriteMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Key data specific method for writing XML node.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data id.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to data's value XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinReadMethod" role="function">
<title>xmlSecKeyDataBinReadMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataBinReadMethod"><primary>xmlSecKeyDataBinReadMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataBinReadMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                               <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                               <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                               <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                               <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Key data specific method for reading binary buffer.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data id.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the input buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinWriteMethod" role="function">
<title>xmlSecKeyDataBinWriteMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataBinWriteMethod"><primary>xmlSecKeyDataBinWriteMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataBinWriteMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Key data specific method for reading binary buffer.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data id.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the output buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGenerateMethod" role="function">
<title>xmlSecKeyDataGenerateMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataGenerateMethod"><primary>xmlSecKeyDataGenerateMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataGenerateMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                                <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);</programlisting>
<para>Key data specific method for generating new key data.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>sizeBits</para></entry>
<entry role="parameter_description"><para>the key data specific size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the required key type (session/permanent, etc.)</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetTypeMethod" role="function">
<title>xmlSecKeyDataGetTypeMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataGetTypeMethod"><primary>xmlSecKeyDataGetTypeMethod</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataGetTypeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Key data specific method to get the key type.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the key type.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetSizeMethod" role="function">
<title>xmlSecKeyDataGetSizeMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataGetSizeMethod"><primary>xmlSecKeyDataGetSizeMethod</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataGetSizeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Key data specific method to get the key size.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the key size in bits.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataGetIdentifierMethod" role="function">
<title>xmlSecKeyDataGetIdentifierMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataGetIdentifierMethod"><primary>xmlSecKeyDataGetIdentifierMethod</primary></indexterm>
<programlisting language="C">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataGetIdentifierMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Key data specific method to get the key data identifier string (for example,
X509 data identifier is the subject of the verified cert).</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the identifier string or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataDebugDumpMethod" role="function">
<title>xmlSecKeyDataDebugDumpMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataDebugDumpMethod"><primary>xmlSecKeyDataDebugDumpMethod</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataDebugDumpMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                 <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Key data specific method for printing debug info.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the FILE to print debug info (should be open for writing).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataKlassGetName" role="macro">
<title>xmlSecKeyDataKlassGetName()</title>
<indexterm zone="xmlSecKeyDataKlassGetName"><primary>xmlSecKeyDataKlassGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataKlassGetName(klass)</programlisting>
<para>Macro. Returns data klass name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>klass</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataListGetKlass" role="function">
<title>xmlSecKeyDataListGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataListGetKlass"><primary>xmlSecKeyDataListGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
xmlSecKeyDataListGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The key data list klass.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> pointer to the key data list klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListGetKlass" role="function">
<title>xmlSecKeyDataIdListGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListGetKlass"><primary>xmlSecKeyDataIdListGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
xmlSecKeyDataIdListGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The key data id list klass.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> pointer to the key data id list klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListFind" role="function">
<title>xmlSecKeyDataIdListFind&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListFind"><primary>xmlSecKeyDataIdListFind</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataIdListFind (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                         <parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> dataId</parameter>);</programlisting>
<para>Lookups <parameter>dataId</parameter>
 in <parameter>list</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>dataId</para></entry>
<entry role="parameter_description"><para>the key data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 1 if <parameter>dataId</parameter>
is found in the <parameter>list</parameter>
, 0 if not and a negative
value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByNode" role="function">
<title>xmlSecKeyDataIdListFindByNode&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListFindByNode"><primary>xmlSecKeyDataIdListFindByNode</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataIdListFindByNode (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                               <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>Lookups data klass in the list with given <parameter>nodeName</parameter>
, <parameter>nodeNs</parameter>
 and
<parameter>usage</parameter>
 in the <parameter>list</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeName</para></entry>
<entry role="parameter_description"><para>the desired key data klass XML node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeNs</para></entry>
<entry role="parameter_description"><para>the desired key data klass XML node namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>usage</para></entry>
<entry role="parameter_description"><para>the desired key data usage.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data klass is found and NULL otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByHref" role="function">
<title>xmlSecKeyDataIdListFindByHref&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListFindByHref"><primary>xmlSecKeyDataIdListFindByHref</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataIdListFindByHref (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *href</parameter>,
                               <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>Lookups data klass in the list with given <parameter>href</parameter>
 and <parameter>usage</parameter>
 in <parameter>list</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>href</para></entry>
<entry role="parameter_description"><para>the desired key data klass href.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>usage</para></entry>
<entry role="parameter_description"><para>the desired key data usage.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data klass is found and NULL otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByName" role="function">
<title>xmlSecKeyDataIdListFindByName&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListFindByName"><primary>xmlSecKeyDataIdListFindByName</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>
xmlSecKeyDataIdListFindByName (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                               <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>Lookups data klass in the list with given <parameter>name</parameter>
 and <parameter>usage</parameter>
 in <parameter>list</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the desired key data klass name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>usage</para></entry>
<entry role="parameter_description"><para>the desired key data usage.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> key data klass is found and NULL otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListDebugDump" role="function">
<title>xmlSecKeyDataIdListDebugDump&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListDebugDump"><primary>xmlSecKeyDataIdListDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataIdListDebugDump (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                              <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints binary key data debug information to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataIdListDebugXmlDump" role="function">
<title>xmlSecKeyDataIdListDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecKeyDataIdListDebugXmlDump"><primary>xmlSecKeyDataIdListDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataIdListDebugXmlDump (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                 <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints binary key data debug information to <parameter>output</parameter>
 in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>list</para></entry>
<entry role="parameter_description"><para>the pointer to key data ids list.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueInitialize" role="function">
<title>xmlSecKeyDataBinaryValueInitialize&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueInitialize"><primary>xmlSecKeyDataBinaryValueInitialize</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueInitialize (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Initializes key data.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDuplicate" role="function">
<title>xmlSecKeyDataBinaryValueDuplicate&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDuplicate"><primary>xmlSecKeyDataBinaryValueDuplicate</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueDuplicate (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                   <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);</programlisting>
<para>Copies binary key data from <parameter>src</parameter>
 to <parameter>dst</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>dst</para></entry>
<entry role="parameter_description"><para>the pointer to destination binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>src</para></entry>
<entry role="parameter_description"><para>the pointer to source binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueFinalize" role="function">
<title>xmlSecKeyDataBinaryValueFinalize&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueFinalize"><primary>xmlSecKeyDataBinaryValueFinalize</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataBinaryValueFinalize (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Cleans up binary key data.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueXmlRead" role="function">
<title>xmlSecKeyDataBinaryValueXmlRead&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueXmlRead"><primary>xmlSecKeyDataBinaryValueXmlRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueXmlRead (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                 <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                 <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                 <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads binary key data from <parameter>node</parameter>
 to the key by base64 decoding the <parameter>node</parameter>
 content.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to destination key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueXmlWrite" role="function">
<title>xmlSecKeyDataBinaryValueXmlWrite&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueXmlWrite"><primary>xmlSecKeyDataBinaryValueXmlWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueXmlWrite (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                  <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                  <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                  <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Base64 encodes binary key data of klass <parameter>id</parameter>
 from the <parameter>key</parameter>
 and
sets to the <parameter>node</parameter>
 content.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to source key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueBinRead" role="function">
<title>xmlSecKeyDataBinaryValueBinRead&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueBinRead"><primary>xmlSecKeyDataBinaryValueBinRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueBinRead (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                 <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                 <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                 <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                 <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads binary key data of the klass <parameter>id</parameter>
 from <parameter>buf</parameter>
 to the <parameter>key</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to destination key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the source binary buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the source binary buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueBinWrite" role="function">
<title>xmlSecKeyDataBinaryValueBinWrite&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueBinWrite"><primary>xmlSecKeyDataBinaryValueBinWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueBinWrite (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                  <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                  <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                  <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                  <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Writes binary key data of klass <parameter>id</parameter>
 from the <parameter>key</parameter>
 to <parameter>buf</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the data klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to source key.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the destination binary buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the destination binary buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> element processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDebugDump" role="function">
<title>xmlSecKeyDataBinaryValueDebugDump&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDebugDump"><primary>xmlSecKeyDataBinaryValueDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataBinaryValueDebugDump (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                   <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints binary key data debug information to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDebugXmlDump" role="function">
<title>xmlSecKeyDataBinaryValueDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDebugXmlDump"><primary>xmlSecKeyDataBinaryValueDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataBinaryValueDebugXmlDump (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                      <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints binary key data debug information to <parameter>output</parameter>
 in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueGetSize" role="function">
<title>xmlSecKeyDataBinaryValueGetSize&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueGetSize"><primary>xmlSecKeyDataBinaryValueGetSize</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>
xmlSecKeyDataBinaryValueGetSize (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Gets the binary key data size.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> binary key data size in bits.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueGetBuffer" role="function">
<title>xmlSecKeyDataBinaryValueGetBuffer&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueGetBuffer"><primary>xmlSecKeyDataBinaryValueGetBuffer</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecBuffer"><returnvalue>xmlSecBufferPtr</returnvalue></link>
xmlSecKeyDataBinaryValueGetBuffer (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>Gets the binary key data buffer.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to binary key data buffer.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueSetBuffer" role="function">
<title>xmlSecKeyDataBinaryValueSetBuffer&#160;()</title>
<indexterm zone="xmlSecKeyDataBinaryValueSetBuffer"><primary>xmlSecKeyDataBinaryValueSetBuffer</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeyDataBinaryValueSetBuffer (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                   <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                   <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>);</programlisting>
<para>Sets the value of <parameter>data</parameter>
 to <parameter>buf</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to binary key data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buf</para></entry>
<entry role="parameter_description"><para>the pointer to binary buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>bufSize</para></entry>
<entry role="parameter_description"><para>the binary buffer size.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreCreate" role="function">
<title>xmlSecKeyDataStoreCreate&#160;()</title>
<indexterm zone="xmlSecKeyDataStoreCreate"><primary>xmlSecKeyDataStoreCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link>
xmlSecKeyDataStoreCreate (<parameter><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link> id</parameter>);</programlisting>
<para>Creates new key data store of the specified klass <parameter>id</parameter>
. Caller is responsible
for freeing returned object with <link linkend="xmlSecKeyDataStoreDestroy"><type>xmlSecKeyDataStoreDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the store id.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to newly allocated key data store structure
or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreDestroy" role="function">
<title>xmlSecKeyDataStoreDestroy&#160;()</title>
<indexterm zone="xmlSecKeyDataStoreDestroy"><primary>xmlSecKeyDataStoreDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyDataStoreDestroy (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>Destroys the key data store created with <link linkend="xmlSecKeyDataStoreCreate"><type>xmlSecKeyDataStoreCreate</type></link>
function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to the key data store..</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreGetName" role="macro">
<title>xmlSecKeyDataStoreGetName()</title>
<indexterm zone="xmlSecKeyDataStoreGetName"><primary>xmlSecKeyDataStoreGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataStoreGetName(store)</programlisting>
<para>Macro. Returns key data store name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreIsValid" role="macro">
<title>xmlSecKeyDataStoreIsValid()</title>
<indexterm zone="xmlSecKeyDataStoreIsValid"><primary>xmlSecKeyDataStoreIsValid</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataStoreIsValid(store)</programlisting>
<para>Macro. Returns 1 if <parameter>store</parameter>
 is not NULL and <parameter>store->id</parameter>
 is not NULL
or 0 otherwise.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreCheckId" role="macro">
<title>xmlSecKeyDataStoreCheckId()</title>
<indexterm zone="xmlSecKeyDataStoreCheckId"><primary>xmlSecKeyDataStoreCheckId</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataStoreCheckId(store, storeId)</programlisting>
<para>Macro. Returns 1 if <parameter>store</parameter>
 is valid and <parameter>store</parameter>
's id is equal to <parameter>storeId</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>storeId</para></entry>
<entry role="parameter_description"><para>the store Id.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreCheckSize" role="macro">
<title>xmlSecKeyDataStoreCheckSize()</title>
<indexterm zone="xmlSecKeyDataStoreCheckSize"><primary>xmlSecKeyDataStoreCheckSize</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataStoreCheckSize(store, size)</programlisting>
<para>Macro. Returns 1 if <parameter>data</parameter>
 is valid and <parameter>stores</parameter>
's object has at least <parameter>size</parameter>
 bytes.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the expected size.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreInitializeMethod" role="function">
<title>xmlSecKeyDataStoreInitializeMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataStoreInitializeMethod"><primary>xmlSecKeyDataStoreInitializeMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataStoreInitializeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>Key data store specific initialization method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the data store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreFinalizeMethod" role="function">
<title>xmlSecKeyDataStoreFinalizeMethod&#160;()</title>
<indexterm zone="xmlSecKeyDataStoreFinalizeMethod"><primary>xmlSecKeyDataStoreFinalizeMethod</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyDataStoreFinalizeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>Key data store specific finalization (destroy) method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the data store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStoreKlassGetName" role="macro">
<title>xmlSecKeyDataStoreKlassGetName()</title>
<indexterm zone="xmlSecKeyDataStoreKlassGetName"><primary>xmlSecKeyDataStoreKlassGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataStoreKlassGetName(klass)</programlisting>
<para>Macro. Returns store klass name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>klass</para></entry>
<entry role="parameter_description"><para>the pointer to store klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyDataStorePtrListGetKlass" role="function">
<title>xmlSecKeyDataStorePtrListGetKlass&#160;()</title>
<indexterm zone="xmlSecKeyDataStorePtrListGetKlass"><primary>xmlSecKeyDataStorePtrListGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>
xmlSecKeyDataStorePtrListGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>Key data stores list.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> key data stores list klass.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-keysdata.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecKeyDataUsage" role="typedef">
<title>xmlSecKeyDataUsage</title>
<indexterm zone="xmlSecKeyDataUsage"><primary>xmlSecKeyDataUsage</primary></indexterm>
<programlisting language="C">typedef unsigned int                                    xmlSecKeyDataUsage;
</programlisting>
<para>The bits mask that determines possible keys data usage.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageUnknown" role="macro">
<title>xmlSecKeyDataUsageUnknown</title>
<indexterm zone="xmlSecKeyDataUsageUnknown"><primary>xmlSecKeyDataUsageUnknown</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageUnknown                       0x00000
</programlisting>
<para>The key data usage is unknown.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNodeRead" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNodeRead</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNodeRead"><primary>xmlSecKeyDataUsageKeyInfoNodeRead</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageKeyInfoNodeRead               0x00001
</programlisting>
<para>The key data could be read from a &lt;dsig:KeyInfo/> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNodeWrite" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNodeWrite</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNodeWrite"><primary>xmlSecKeyDataUsageKeyInfoNodeWrite</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageKeyInfoNodeWrite              0x00002
</programlisting>
<para>The key data could be written to a &lt;dsig:KeyInfo /> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNodeRead" role="macro">
<title>xmlSecKeyDataUsageKeyValueNodeRead</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNodeRead"><primary>xmlSecKeyDataUsageKeyValueNodeRead</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageKeyValueNodeRead              0x00004
</programlisting>
<para>The key data could be read from a &lt;dsig:KeyValue /> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNodeWrite" role="macro">
<title>xmlSecKeyDataUsageKeyValueNodeWrite</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNodeWrite"><primary>xmlSecKeyDataUsageKeyValueNodeWrite</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageKeyValueNodeWrite             0x00008
</programlisting>
<para>The key data could be written to a &lt;dsig:KeyValue /> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNodeXml" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNodeXml</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNodeXml"><primary>xmlSecKeyDataUsageRetrievalMethodNodeXml</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageRetrievalMethodNodeXml        0x00010
</programlisting>
<para>The key data could be retrieved using &lt;dsig:RetrievalMethod /> node
in XML format.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNodeBin" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNodeBin</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNodeBin"><primary>xmlSecKeyDataUsageRetrievalMethodNodeBin</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageRetrievalMethodNodeBin        0x00020
</programlisting>
<para>The key data could be retrieved using &lt;dsig:RetrievalMethod /> node
in binary format.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageAny" role="macro">
<title>xmlSecKeyDataUsageAny</title>
<indexterm zone="xmlSecKeyDataUsageAny"><primary>xmlSecKeyDataUsageAny</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataUsageAny                           0xFFFFF
</programlisting>
<para>Any key data usage.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNode" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNode</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNode"><primary>xmlSecKeyDataUsageKeyInfoNode</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataUsageKeyInfoNode</programlisting>
<para>The key data could be read and written from/to a &lt;dsig:KeyInfo /> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNode" role="macro">
<title>xmlSecKeyDataUsageKeyValueNode</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNode"><primary>xmlSecKeyDataUsageKeyValueNode</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataUsageKeyValueNode</programlisting>
<para>The key data could be read and written from/to a &lt;dsig:KeyValue /> child.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNode" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNode</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNode"><primary>xmlSecKeyDataUsageRetrievalMethodNode</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataUsageRetrievalMethodNode</programlisting>
<para>The key data could be retrieved using &lt;dsig:RetrievalMethod /> node
in any format.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataType" role="typedef">
<title>xmlSecKeyDataType</title>
<indexterm zone="xmlSecKeyDataType"><primary>xmlSecKeyDataType</primary></indexterm>
<programlisting language="C">typedef unsigned int                            xmlSecKeyDataType;
</programlisting>
<para>The key data type (public/private, session/permanet, etc.).</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeUnknown" role="macro">
<title>xmlSecKeyDataTypeUnknown</title>
<indexterm zone="xmlSecKeyDataTypeUnknown"><primary>xmlSecKeyDataTypeUnknown</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeUnknown                        0x0000
</programlisting>
<para>The key data type is unknown (same as <link linkend="xmlSecKeyDataTypeNone"><type>xmlSecKeyDataTypeNone</type></link>).</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeNone" role="macro">
<title>xmlSecKeyDataTypeNone</title>
<indexterm zone="xmlSecKeyDataTypeNone"><primary>xmlSecKeyDataTypeNone</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeNone                           xmlSecKeyDataTypeUnknown
</programlisting>
<para>The key data type is unknown (same as <link linkend="xmlSecKeyDataTypeUnknown"><type>xmlSecKeyDataTypeUnknown</type></link>).</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypePublic" role="macro">
<title>xmlSecKeyDataTypePublic</title>
<indexterm zone="xmlSecKeyDataTypePublic"><primary>xmlSecKeyDataTypePublic</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypePublic                         0x0001
</programlisting>
<para>The key data contain a public key.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypePrivate" role="macro">
<title>xmlSecKeyDataTypePrivate</title>
<indexterm zone="xmlSecKeyDataTypePrivate"><primary>xmlSecKeyDataTypePrivate</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypePrivate                        0x0002
</programlisting>
<para>The key data contain a private key.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeSymmetric" role="macro">
<title>xmlSecKeyDataTypeSymmetric</title>
<indexterm zone="xmlSecKeyDataTypeSymmetric"><primary>xmlSecKeyDataTypeSymmetric</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeSymmetric                      0x0004
</programlisting>
<para>The key data contain a symmetric key.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeSession" role="macro">
<title>xmlSecKeyDataTypeSession</title>
<indexterm zone="xmlSecKeyDataTypeSession"><primary>xmlSecKeyDataTypeSession</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeSession                        0x0008
</programlisting>
<para>The key data contain session key (one time key, not stored in keys manager).</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypePermanent" role="macro">
<title>xmlSecKeyDataTypePermanent</title>
<indexterm zone="xmlSecKeyDataTypePermanent"><primary>xmlSecKeyDataTypePermanent</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypePermanent                      0x0010
</programlisting>
<para>The key data contain permanent key (stored in keys manager).</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeTrusted" role="macro">
<title>xmlSecKeyDataTypeTrusted</title>
<indexterm zone="xmlSecKeyDataTypeTrusted"><primary>xmlSecKeyDataTypeTrusted</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeTrusted                        0x0100
</programlisting>
<para>The key data is trusted.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataTypeAny" role="macro">
<title>xmlSecKeyDataTypeAny</title>
<indexterm zone="xmlSecKeyDataTypeAny"><primary>xmlSecKeyDataTypeAny</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataTypeAny                            0xFFFF
</programlisting>
<para>Any key data.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataFormat" role="enum">
<title>enum xmlSecKeyDataFormat</title>
<indexterm zone="xmlSecKeyDataFormat"><primary>xmlSecKeyDataFormat</primary></indexterm>
<para>The key data format (binary, der, pem, etc.).</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatUnknown">xmlSecKeyDataFormatUnknown</para></entry>
<entry role="enum_member_description"><para>the key data format is unknown.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatBinary">xmlSecKeyDataFormatBinary</para></entry>
<entry role="enum_member_description"><para>the binary key data.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatPem">xmlSecKeyDataFormatPem</para></entry>
<entry role="enum_member_description"><para>the PEM key data (cert or public/private key).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatDer">xmlSecKeyDataFormatDer</para></entry>
<entry role="enum_member_description"><para>the DER key data (cert or public/private key).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatPkcs8Pem">xmlSecKeyDataFormatPkcs8Pem</para></entry>
<entry role="enum_member_description"><para>the PKCS8 PEM private key.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatPkcs8Der">xmlSecKeyDataFormatPkcs8Der</para></entry>
<entry role="enum_member_description"><para>the PKCS8 DER private key.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatPkcs12">xmlSecKeyDataFormatPkcs12</para></entry>
<entry role="enum_member_description"><para>the PKCS12 format (bag of keys and certs)</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatCertPem">xmlSecKeyDataFormatCertPem</para></entry>
<entry role="enum_member_description"><para>the PEM cert.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecKeyDataFormatCertDer">xmlSecKeyDataFormatCertDer</para></entry>
<entry role="enum_member_description"><para>the DER cert.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyData" role="struct">
<title>struct xmlSecKeyData</title>
<indexterm zone="xmlSecKeyData"><primary>xmlSecKeyData</primary></indexterm>
<programlisting language="C">struct xmlSecKeyData {
    xmlSecKeyDataId                     id;
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The key data: key value (crypto material), x509 data, pgp data, etc.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link>&#160;<structfield id="xmlSecKeyData.id">id</structfield>;</para></entry>
<entry role="struct_member_description"><para>the data id (<link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link>).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyData.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyData.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyDataKlass" role="struct">
<title>struct xmlSecKeyDataKlass</title>
<indexterm zone="xmlSecKeyDataKlass"><primary>xmlSecKeyDataKlass</primary></indexterm>
<programlisting language="C">struct xmlSecKeyDataKlass {
    xmlSecSize                          klassSize;
    xmlSecSize                          objSize;

    /* data */
    const xmlChar*                      name;
    xmlSecKeyDataUsage                  usage;
    const xmlChar*                      href;
    const xmlChar*                      dataNodeName;
    const xmlChar*                      dataNodeNs;

    /* constructors/destructor */
    xmlSecKeyDataInitMethod             initialize;
    xmlSecKeyDataDuplicateMethod        duplicate;
    xmlSecKeyDataFinalizeMethod         finalize;
    xmlSecKeyDataGenerateMethod         generate;

    /* get info */
    xmlSecKeyDataGetTypeMethod          getType;
    xmlSecKeyDataGetSizeMethod          getSize;
    xmlSecKeyDataGetIdentifierMethod    getIdentifier;

    /* read/write */
    xmlSecKeyDataXmlReadMethod          xmlRead;
    xmlSecKeyDataXmlWriteMethod         xmlWrite;
    xmlSecKeyDataBinReadMethod          binRead;
    xmlSecKeyDataBinWriteMethod         binWrite;

    /* debug */
    xmlSecKeyDataDebugDumpMethod        debugDump;
    xmlSecKeyDataDebugDumpMethod        debugXmlDump;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The data id (klass).</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataKlass.klassSize">klassSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the klass size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataKlass.objSize">objSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the object size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.name">name</structfield>;</para></entry>
<entry role="struct_member_description"><para>the object name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link>&#160;<structfield id="xmlSecKeyDataKlass.usage">usage</structfield>;</para></entry>
<entry role="struct_member_description"><para>the allowed data usage.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.href">href</structfield>;</para></entry>
<entry role="struct_member_description"><para>the identification string (href).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.dataNodeName">dataNodeName</structfield>;</para></entry>
<entry role="struct_member_description"><para>the data's XML node name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.dataNodeNs">dataNodeNs</structfield>;</para></entry>
<entry role="struct_member_description"><para>the data's XML node namespace.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataInitMethod"><type>xmlSecKeyDataInitMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.initialize">initialize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the initialization method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataDuplicateMethod"><type>xmlSecKeyDataDuplicateMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.duplicate">duplicate</structfield>;</para></entry>
<entry role="struct_member_description"><para>the duplicate (copy) method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataFinalizeMethod"><type>xmlSecKeyDataFinalizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.finalize">finalize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the finalization (destroy) method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataGenerateMethod"><type>xmlSecKeyDataGenerateMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.generate">generate</structfield>;</para></entry>
<entry role="struct_member_description"><para>the new data generation method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataGetTypeMethod"><type>xmlSecKeyDataGetTypeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getType">getType</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method to access data's type information.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataGetSizeMethod"><type>xmlSecKeyDataGetSizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getSize">getSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method to access data's size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataGetIdentifierMethod"><type>xmlSecKeyDataGetIdentifierMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getIdentifier">getIdentifier</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method to access data's string identifier.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataXmlReadMethod"><type>xmlSecKeyDataXmlReadMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.xmlRead">xmlRead</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for reading data from XML node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataXmlWriteMethod"><type>xmlSecKeyDataXmlWriteMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.xmlWrite">xmlWrite</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for writing data to XML node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataBinReadMethod"><type>xmlSecKeyDataBinReadMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.binRead">binRead</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for reading data from a binary buffer.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataBinWriteMethod"><type>xmlSecKeyDataBinWriteMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.binWrite">binWrite</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for writing data to binary buffer.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataDebugDumpMethod"><type>xmlSecKeyDataDebugDumpMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.debugDump">debugDump</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for printing debug data information.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataDebugDumpMethod"><type>xmlSecKeyDataDebugDumpMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.debugXmlDump">debugXmlDump</structfield>;</para></entry>
<entry role="struct_member_description"><para>the method for printing debug data information in XML format.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyDataListId" role="macro">
<title>xmlSecKeyDataListId</title>
<indexterm zone="xmlSecKeyDataListId"><primary>xmlSecKeyDataListId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataListId     xmlSecKeyDataListGetKlass()
</programlisting>
<para>The key data klasses list klass id.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataIdListId" role="macro">
<title>xmlSecKeyDataIdListId</title>
<indexterm zone="xmlSecKeyDataIdListId"><primary>xmlSecKeyDataIdListId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataIdListId   xmlSecKeyDataIdListGetKlass()
</programlisting>
<para>The key data list klass id.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataBinarySize" role="macro">
<title>xmlSecKeyDataBinarySize</title>
<indexterm zone="xmlSecKeyDataBinarySize"><primary>xmlSecKeyDataBinarySize</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyDataBinarySize</programlisting>
<para>The binary key data object size.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataStore" role="struct">
<title>struct xmlSecKeyDataStore</title>
<indexterm zone="xmlSecKeyDataStore"><primary>xmlSecKeyDataStore</primary></indexterm>
<programlisting language="C">struct xmlSecKeyDataStore {
    xmlSecKeyDataStoreId                id;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The key data store. Key data store holds common key data specific information
required for key data processing. For example, X509 data store may hold
information about trusted (root) certificates.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link>&#160;<structfield id="xmlSecKeyDataStore.id">id</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store id (<link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link>).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStore.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStore.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyDataStoreIdUnknown" role="macro">
<title>xmlSecKeyDataStoreIdUnknown</title>
<indexterm zone="xmlSecKeyDataStoreIdUnknown"><primary>xmlSecKeyDataStoreIdUnknown</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataStoreIdUnknown                     NULL
</programlisting>
<para>The "unknown" id.</para>
</refsect2>
<refsect2 id="xmlSecKeyDataStoreKlass" role="struct">
<title>struct xmlSecKeyDataStoreKlass</title>
<indexterm zone="xmlSecKeyDataStoreKlass"><primary>xmlSecKeyDataStoreKlass</primary></indexterm>
<programlisting language="C">struct xmlSecKeyDataStoreKlass {
    xmlSecSize                          klassSize;
    xmlSecSize                          objSize;

    /* data */
    const xmlChar*                      name;

    /* constructors/destructor */
    xmlSecKeyDataStoreInitializeMethod  initialize;
    xmlSecKeyDataStoreFinalizeMethod    finalize;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The data store id (klass).</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.klassSize">klassSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the data store klass size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.objSize">objSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the data store obj size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.name">name</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataStoreInitializeMethod"><type>xmlSecKeyDataStoreInitializeMethod</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.initialize">initialize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's initialization method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyDataStoreFinalizeMethod"><type>xmlSecKeyDataStoreFinalizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.finalize">finalize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's finalization (destroy) method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyDataStorePtrListId" role="macro">
<title>xmlSecKeyDataStorePtrListId</title>
<indexterm zone="xmlSecKeyDataStorePtrListId"><primary>xmlSecKeyDataStorePtrListId</primary></indexterm>
<programlisting language="C">#define xmlSecKeyDataStorePtrListId     xmlSecKeyDataStorePtrListGetKlass()
</programlisting>
<para>The data store list id (klass).</para>
</refsect2>

</refsect1>

</refentry>
