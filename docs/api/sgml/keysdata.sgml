<refentry id="xmlsec-keysdata">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-keysdata.top_of_page">keysdata</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  XMLSEC Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keysdata</refname>
<refpurpose>Crypto key data object definition.</refpurpose>
</refnamediv>

<refsynopsisdiv id="xmlsec-keysdata.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>struct              <link linkend="xmlSecKeyData">xmlSecKeyData</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinRead">xmlSecKeyDataBinRead</link>                (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataBinReadMethod">*xmlSecKeyDataBinReadMethod</link>)       (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinWrite">xmlSecKeyDataBinWrite</link>               (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataBinWriteMethod">*xmlSecKeyDataBinWriteMethod</link>)      (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
#define             <link linkend="xmlSecKeyDataBinarySize">xmlSecKeyDataBinarySize</link>
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueBinRead">xmlSecKeyDataBinaryValueBinRead</link>     (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueBinWrite">xmlSecKeyDataBinaryValueBinWrite</link>    (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataBinaryValueDebugDump">xmlSecKeyDataBinaryValueDebugDump</link>   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataBinaryValueDebugXmlDump">xmlSecKeyDataBinaryValueDebugXmlDump</link>
                                                        (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueDuplicate">xmlSecKeyDataBinaryValueDuplicate</link>   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataBinaryValueFinalize">xmlSecKeyDataBinaryValueFinalize</link>    (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecBufferPtr"><returnvalue>xmlSecBufferPtr</returnvalue></link>     <link linkend="xmlSecKeyDataBinaryValueGetBuffer">xmlSecKeyDataBinaryValueGetBuffer</link>   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          <link linkend="xmlSecKeyDataBinaryValueGetSize">xmlSecKeyDataBinaryValueGetSize</link>     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueInitialize">xmlSecKeyDataBinaryValueInitialize</link>  (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueSetBuffer">xmlSecKeyDataBinaryValueSetBuffer</link>   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueXmlRead">xmlSecKeyDataBinaryValueXmlRead</link>     (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataBinaryValueXmlWrite">xmlSecKeyDataBinaryValueXmlWrite</link>    (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
#define             <link linkend="xmlSecKeyDataCheckId">xmlSecKeyDataCheckId</link>                (data,
                                                         dataId)
#define             <link linkend="xmlSecKeyDataCheckSize">xmlSecKeyDataCheckSize</link>              (data,
                                                         size)
#define             <link linkend="xmlSecKeyDataCheckUsage">xmlSecKeyDataCheckUsage</link>             (data,
                                                         usg)
<link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>    <link linkend="xmlSecKeyDataCreate">xmlSecKeyDataCreate</link>                 (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataDebugDump">xmlSecKeyDataDebugDump</link>              (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="xmlSecKeyDataDebugDumpMethod">*xmlSecKeyDataDebugDumpMethod</link>)     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataDebugXmlDump">xmlSecKeyDataDebugXmlDump</link>           (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataDestroy">xmlSecKeyDataDestroy</link>                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecKeyDataPtr"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>    <link linkend="xmlSecKeyDataDuplicate">xmlSecKeyDataDuplicate</link>              (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataDuplicateMethod">*xmlSecKeyDataDuplicateMethod</link>)     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="xmlSecKeyDataFinalizeMethod">*xmlSecKeyDataFinalizeMethod</link>)      (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
enum                <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataGenerate">xmlSecKeyDataGenerate</link>               (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataGenerateMethod">*xmlSecKeyDataGenerateMethod</link>)      (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);
const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link> *     <link linkend="xmlSecKeyDataGetIdentifier">xmlSecKeyDataGetIdentifier</link>          (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link> *     (<link linkend="xmlSecKeyDataGetIdentifierMethod">*xmlSecKeyDataGetIdentifierMethod</link>) (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
#define             <link linkend="xmlSecKeyDataGetName">xmlSecKeyDataGetName</link>                (data)
<link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          <link linkend="xmlSecKeyDataGetSize">xmlSecKeyDataGetSize</link>                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          (<link linkend="xmlSecKeyDataGetSizeMethod">*xmlSecKeyDataGetSizeMethod</link>)       (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>   <link linkend="xmlSecKeyDataGetType">xmlSecKeyDataGetType</link>                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>   (<link linkend="xmlSecKeyDataGetTypeMethod">*xmlSecKeyDataGetTypeMethod</link>)       (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataIdListDebugDump">xmlSecKeyDataIdListDebugDump</link>        (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataIdListDebugXmlDump">xmlSecKeyDataIdListDebugXmlDump</link>     (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataIdListFind">xmlSecKeyDataIdListFind</link>             (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> dataId</parameter>);
<link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     <link linkend="xmlSecKeyDataIdListFindByHref">xmlSecKeyDataIdListFindByHref</link>       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *href</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);
<link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     <link linkend="xmlSecKeyDataIdListFindByName">xmlSecKeyDataIdListFindByName</link>       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);
<link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     <link linkend="xmlSecKeyDataIdListFindByNode">xmlSecKeyDataIdListFindByNode</link>       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);
<link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     <link linkend="xmlSecKeyDataIdListGetKlass">xmlSecKeyDataIdListGetKlass</link>         (<parameter><type>void</type></parameter>);
#define             <link linkend="xmlSecKeyDataIdListId">xmlSecKeyDataIdListId</link>
#define             <link linkend="xmlSecKeyDataIdUnknown">xmlSecKeyDataIdUnknown</link>
<link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    <link linkend="xmlSecKeyDataIdsGet">xmlSecKeyDataIdsGet</link>                 (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataIdsInit">xmlSecKeyDataIdsInit</link>                (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataIdsRegister">xmlSecKeyDataIdsRegister</link>            (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataIdsRegisterDefault">xmlSecKeyDataIdsRegisterDefault</link>     (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataIdsShutdown">xmlSecKeyDataIdsShutdown</link>            (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataInitMethod">*xmlSecKeyDataInitMethod</link>)          (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);
#define             <link linkend="xmlSecKeyDataIsValid">xmlSecKeyDataIsValid</link>                (data)
struct              <link linkend="xmlSecKeyDataKlass">xmlSecKeyDataKlass</link>;
#define             <link linkend="xmlSecKeyDataKlassGetName">xmlSecKeyDataKlassGetName</link>           (klass)
<link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     <link linkend="xmlSecKeyDataListGetKlass">xmlSecKeyDataListGetKlass</link>           (<parameter><type>void</type></parameter>);
#define             <link linkend="xmlSecKeyDataListId">xmlSecKeyDataListId</link>
struct              <link linkend="xmlSecKeyDataStore">xmlSecKeyDataStore</link>;
#define             <link linkend="xmlSecKeyDataStoreCheckId">xmlSecKeyDataStoreCheckId</link>           (store,
                                                         storeId)
#define             <link linkend="xmlSecKeyDataStoreCheckSize">xmlSecKeyDataStoreCheckSize</link>         (store,
                                                         size)
<link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link> <link linkend="xmlSecKeyDataStoreCreate">xmlSecKeyDataStoreCreate</link>          (<parameter><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link> id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecKeyDataStoreDestroy">xmlSecKeyDataStoreDestroy</link>           (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="xmlSecKeyDataStoreFinalizeMethod">*xmlSecKeyDataStoreFinalizeMethod</link>) (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);
#define             <link linkend="xmlSecKeyDataStoreGetName">xmlSecKeyDataStoreGetName</link>           (store)
#define             <link linkend="xmlSecKeyDataStoreIdUnknown">xmlSecKeyDataStoreIdUnknown</link>
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataStoreInitializeMethod">*xmlSecKeyDataStoreInitializeMethod</link>)
                                                        (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);
#define             <link linkend="xmlSecKeyDataStoreIsValid">xmlSecKeyDataStoreIsValid</link>           (store)
struct              <link linkend="xmlSecKeyDataStoreKlass">xmlSecKeyDataStoreKlass</link>;
#define             <link linkend="xmlSecKeyDataStoreKlassGetName">xmlSecKeyDataStoreKlassGetName</link>      (klass)
<link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     <link linkend="xmlSecKeyDataStorePtrListGetKlass">xmlSecKeyDataStorePtrListGetKlass</link>   (<parameter><type>void</type></parameter>);
#define             <link linkend="xmlSecKeyDataStorePtrListId">xmlSecKeyDataStorePtrListId</link>
typedef             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link>;
#define             <link linkend="xmlSecKeyDataTypeAny">xmlSecKeyDataTypeAny</link>
#define             <link linkend="xmlSecKeyDataTypeNone">xmlSecKeyDataTypeNone</link>
#define             <link linkend="xmlSecKeyDataTypePermanent">xmlSecKeyDataTypePermanent</link>
#define             <link linkend="xmlSecKeyDataTypePrivate">xmlSecKeyDataTypePrivate</link>
#define             <link linkend="xmlSecKeyDataTypePublic">xmlSecKeyDataTypePublic</link>
#define             <link linkend="xmlSecKeyDataTypeSession">xmlSecKeyDataTypeSession</link>
#define             <link linkend="xmlSecKeyDataTypeSymmetric">xmlSecKeyDataTypeSymmetric</link>
#define             <link linkend="xmlSecKeyDataTypeTrusted">xmlSecKeyDataTypeTrusted</link>
#define             <link linkend="xmlSecKeyDataTypeUnknown">xmlSecKeyDataTypeUnknown</link>
typedef             <link linkend="xmlSecKeyDataUsage">xmlSecKeyDataUsage</link>;
#define             <link linkend="xmlSecKeyDataUsageAny">xmlSecKeyDataUsageAny</link>
#define             <link linkend="xmlSecKeyDataUsageKeyInfoNode">xmlSecKeyDataUsageKeyInfoNode</link>
#define             <link linkend="xmlSecKeyDataUsageKeyInfoNodeRead">xmlSecKeyDataUsageKeyInfoNodeRead</link>
#define             <link linkend="xmlSecKeyDataUsageKeyInfoNodeWrite">xmlSecKeyDataUsageKeyInfoNodeWrite</link>
#define             <link linkend="xmlSecKeyDataUsageKeyValueNode">xmlSecKeyDataUsageKeyValueNode</link>
#define             <link linkend="xmlSecKeyDataUsageKeyValueNodeRead">xmlSecKeyDataUsageKeyValueNodeRead</link>
#define             <link linkend="xmlSecKeyDataUsageKeyValueNodeWrite">xmlSecKeyDataUsageKeyValueNodeWrite</link>
#define             <link linkend="xmlSecKeyDataUsageRetrievalMethodNode">xmlSecKeyDataUsageRetrievalMethodNode</link>
#define             <link linkend="xmlSecKeyDataUsageRetrievalMethodNodeBin">xmlSecKeyDataUsageRetrievalMethodNodeBin</link>
#define             <link linkend="xmlSecKeyDataUsageRetrievalMethodNodeXml">xmlSecKeyDataUsageRetrievalMethodNodeXml</link>
#define             <link linkend="xmlSecKeyDataUsageUnknown">xmlSecKeyDataUsageUnknown</link>
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataXmlRead">xmlSecKeyDataXmlRead</link>                (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataXmlReadMethod">*xmlSecKeyDataXmlReadMethod</link>)       (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecKeyDataXmlWrite">xmlSecKeyDataXmlWrite</link>               (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="xmlSecKeyDataXmlWriteMethod">*xmlSecKeyDataXmlWriteMethod</link>)      (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="xmlsec-keysdata.description" role="desc">
<title role="desc.title">Description</title>
<para>
Crypto key data object definition.
</para>
</refsect1>
<refsect1 id="xmlsec-keysdata.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="xmlSecKeyData" role="struct">
<title>struct xmlSecKeyData</title>
<indexterm zone="xmlSecKeyData"><primary>xmlSecKeyData</primary></indexterm>
<programlisting>struct xmlSecKeyData {
    xmlSecKeyDataId                     id;
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>
The key data: key value (crypto material), x509 data, pgp data, etc.
</para><variablelist role="struct">
<varlistentry><term><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link>&#160;<structfield id="xmlSecKeyData.id">id</structfield>;</term>
<listitem><simpara>the data id (<link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link>).</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyData.reserved0">reserved0</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyData.reserved1">reserved1</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinRead" role="function">
<title>xmlSecKeyDataBinRead ()</title>
<indexterm zone="xmlSecKeyDataBinRead"><primary>xmlSecKeyDataBinRead</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinRead                (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Reads the key data of klass <parameter>id</parameter> from binary buffer <parameter>buf</parameter> to <parameter>key</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the destination key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the input binary buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the input buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinReadMethod" role="function">
<title>xmlSecKeyDataBinReadMethod ()</title>
<indexterm zone="xmlSecKeyDataBinReadMethod"><primary>xmlSecKeyDataBinReadMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataBinReadMethod)       (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Key data specific method for reading binary buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data id.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the input buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinWrite" role="function">
<title>xmlSecKeyDataBinWrite ()</title>
<indexterm zone="xmlSecKeyDataBinWrite"><primary>xmlSecKeyDataBinWrite</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinWrite               (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Writes the key data of klass <parameter>id</parameter> from the <parameter>key</parameter> to a binary buffer <parameter>buf</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the source key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the output binary buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the output buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinWriteMethod" role="function">
<title>xmlSecKeyDataBinWriteMethod ()</title>
<indexterm zone="xmlSecKeyDataBinWriteMethod"><primary>xmlSecKeyDataBinWriteMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataBinWriteMethod)      (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Key data specific method for reading binary buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data id.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the output buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinarySize" role="macro">
<title>xmlSecKeyDataBinarySize</title>
<indexterm zone="xmlSecKeyDataBinarySize"><primary>xmlSecKeyDataBinarySize</primary></indexterm>
<programlisting>#define             xmlSecKeyDataBinarySize</programlisting>
<para>
The binary key data object size.
</para></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueBinRead" role="function">
<title>xmlSecKeyDataBinaryValueBinRead ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueBinRead"><primary>xmlSecKeyDataBinaryValueBinRead</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueBinRead     (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Reads binary key data of the klass <parameter>id</parameter> from <parameter>buf</parameter> to the <parameter>key</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the pointer to destination key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the source binary buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the source binary buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueBinWrite" role="function">
<title>xmlSecKeyDataBinaryValueBinWrite ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueBinWrite"><primary>xmlSecKeyDataBinaryValueBinWrite</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueBinWrite    (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlSecByte"><type>xmlSecByte</type></link> **buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> *bufSize</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Writes binary key data of klass <parameter>id</parameter> from the <parameter>key</parameter> to <parameter>buf</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the pointer to source key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the destination binary buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the destination binary buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDebugDump" role="function">
<title>xmlSecKeyDataBinaryValueDebugDump ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDebugDump"><primary>xmlSecKeyDataBinaryValueDebugDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataBinaryValueDebugDump   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints binary key data debug information to <parameter>output</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDebugXmlDump" role="function">
<title>xmlSecKeyDataBinaryValueDebugXmlDump ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDebugXmlDump"><primary>xmlSecKeyDataBinaryValueDebugXmlDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataBinaryValueDebugXmlDump
                                                        (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints binary key data debug information to <parameter>output</parameter> in XML format.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueDuplicate" role="function">
<title>xmlSecKeyDataBinaryValueDuplicate ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueDuplicate"><primary>xmlSecKeyDataBinaryValueDuplicate</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueDuplicate   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);</programlisting>
<para>
Copies binary key data from <parameter>src</parameter> to <parameter>dst</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara>the pointer to destination binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara>the pointer to source binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueFinalize" role="function">
<title>xmlSecKeyDataBinaryValueFinalize ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueFinalize"><primary>xmlSecKeyDataBinaryValueFinalize</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataBinaryValueFinalize    (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Cleans up binary key data.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueGetBuffer" role="function">
<title>xmlSecKeyDataBinaryValueGetBuffer ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueGetBuffer"><primary>xmlSecKeyDataBinaryValueGetBuffer</primary></indexterm>
<programlisting><link linkend="xmlSecBufferPtr"><returnvalue>xmlSecBufferPtr</returnvalue></link>     xmlSecKeyDataBinaryValueGetBuffer   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Gets the binary key data buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>pointer to binary key data buffer.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueGetSize" role="function">
<title>xmlSecKeyDataBinaryValueGetSize ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueGetSize"><primary>xmlSecKeyDataBinaryValueGetSize</primary></indexterm>
<programlisting><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          xmlSecKeyDataBinaryValueGetSize     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Gets the binary key data size.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>binary key data size in bits.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueInitialize" role="function">
<title>xmlSecKeyDataBinaryValueInitialize ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueInitialize"><primary>xmlSecKeyDataBinaryValueInitialize</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueInitialize  (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Initializes key data.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueSetBuffer" role="function">
<title>xmlSecKeyDataBinaryValueSetBuffer ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueSetBuffer"><primary>xmlSecKeyDataBinaryValueSetBuffer</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueSetBuffer   (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buf</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> bufSize</parameter>);</programlisting>
<para>
Sets the value of <parameter>data</parameter> to <parameter>buf</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the pointer to binary buffer.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&#160;:</term>
<listitem><simpara>the binary buffer size.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueXmlRead" role="function">
<title>xmlSecKeyDataBinaryValueXmlRead ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueXmlRead"><primary>xmlSecKeyDataBinaryValueXmlRead</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueXmlRead     (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Reads binary key data from <parameter>node</parameter> to the key by base64 decoding the <parameter>node</parameter> content.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the pointer to destination key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to an XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataBinaryValueXmlWrite" role="function">
<title>xmlSecKeyDataBinaryValueXmlWrite ()</title>
<indexterm zone="xmlSecKeyDataBinaryValueXmlWrite"><primary>xmlSecKeyDataBinaryValueXmlWrite</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataBinaryValueXmlWrite    (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Base64 encodes binary key data of klass <parameter>id</parameter> from the <parameter>key</parameter> and
sets to the <parameter>node</parameter> content.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the pointer to source key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to an XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataCheckId" role="macro">
<title>xmlSecKeyDataCheckId()</title>
<indexterm zone="xmlSecKeyDataCheckId"><primary>xmlSecKeyDataCheckId</primary></indexterm>
<programlisting>#define             xmlSecKeyDataCheckId(data, dataId)</programlisting>
<para>
Macro. Returns 1 if <parameter>data</parameter> is valid and <parameter>data</parameter>'s id is equal to <parameter>dataId</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&#160;:</term>
<listitem><simpara>the data Id.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataCheckSize" role="macro">
<title>xmlSecKeyDataCheckSize()</title>
<indexterm zone="xmlSecKeyDataCheckSize"><primary>xmlSecKeyDataCheckSize</primary></indexterm>
<programlisting>#define             xmlSecKeyDataCheckSize(data, size)</programlisting>
<para>
Macro. Returns 1 if <parameter>data</parameter> is valid and <parameter>data</parameter>'s object has at least <parameter>size</parameter> bytes.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>the expected size.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataCheckUsage" role="macro">
<title>xmlSecKeyDataCheckUsage()</title>
<indexterm zone="xmlSecKeyDataCheckUsage"><primary>xmlSecKeyDataCheckUsage</primary></indexterm>
<programlisting>#define             xmlSecKeyDataCheckUsage(data, usg)</programlisting>
<para>
Macro. Returns 1 if <parameter>data</parameter> is valid and could be used for <parameter>usg</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usg</parameter>&#160;:</term>
<listitem><simpara>the data usage.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataCreate" role="function">
<title>xmlSecKeyDataCreate ()</title>
<indexterm zone="xmlSecKeyDataCreate"><primary>xmlSecKeyDataCreate</primary></indexterm>
<programlisting><link linkend="xmlSecKeyData"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>    xmlSecKeyDataCreate                 (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);</programlisting>
<para>
Allocates and initializes new key data of the specified type <parameter>id</parameter>.
Caller is responsible for destroying returned object with
<link linkend="xmlSecKeyDataDestroy"><type>xmlSecKeyDataDestroy</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data id.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the pointer to newly allocated key data structure
or NULL if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDebugDump" role="function">
<title>xmlSecKeyDataDebugDump ()</title>
<indexterm zone="xmlSecKeyDataDebugDump"><primary>xmlSecKeyDataDebugDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataDebugDump              (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints key data debug info.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDebugDumpMethod" role="function">
<title>xmlSecKeyDataDebugDumpMethod ()</title>
<indexterm zone="xmlSecKeyDataDebugDumpMethod"><primary>xmlSecKeyDataDebugDumpMethod</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*xmlSecKeyDataDebugDumpMethod)     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Key data specific method for printing debug info.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the FILE to print debug info (should be open for writing).</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDebugXmlDump" role="function">
<title>xmlSecKeyDataDebugXmlDump ()</title>
<indexterm zone="xmlSecKeyDataDebugXmlDump"><primary>xmlSecKeyDataDebugXmlDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataDebugXmlDump           (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints key data debug info in XML format.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDestroy" role="function">
<title>xmlSecKeyDataDestroy ()</title>
<indexterm zone="xmlSecKeyDataDestroy"><primary>xmlSecKeyDataDestroy</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataDestroy                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Destroys the data and frees all allocated memory.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to the key data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDuplicate" role="function">
<title>xmlSecKeyDataDuplicate ()</title>
<indexterm zone="xmlSecKeyDataDuplicate"><primary>xmlSecKeyDataDuplicate</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataPtr"><returnvalue>xmlSecKeyDataPtr</returnvalue></link>    xmlSecKeyDataDuplicate              (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Creates a duplicate of the given <parameter>data</parameter>. Caller is responsible for
destroying returned object with <link linkend="xmlSecKeyDataDestroy"><type>xmlSecKeyDataDestroy</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to the key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the pointer to newly allocated key data structure
or NULL if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataDuplicateMethod" role="function">
<title>xmlSecKeyDataDuplicateMethod ()</title>
<indexterm zone="xmlSecKeyDataDuplicateMethod"><primary>xmlSecKeyDataDuplicateMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataDuplicateMethod)     (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> src</parameter>);</programlisting>
<para>
Key data specific duplication (copy) method.
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara>the pointer to destination key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara>the poiniter to source key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataFinalizeMethod" role="function">
<title>xmlSecKeyDataFinalizeMethod ()</title>
<indexterm zone="xmlSecKeyDataFinalizeMethod"><primary>xmlSecKeyDataFinalizeMethod</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*xmlSecKeyDataFinalizeMethod)      (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Key data specific finalization method. All the objects and resources allocated
by the key data object must be freed inside this method.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataFormat" role="enum">
<title>enum xmlSecKeyDataFormat</title>
<indexterm zone="xmlSecKeyDataFormat"><primary>xmlSecKeyDataFormat</primary></indexterm>
<programlisting>typedef enum {
    xmlSecKeyDataFormatUnknown = 0,
    xmlSecKeyDataFormatBinary,
    xmlSecKeyDataFormatPem,
    xmlSecKeyDataFormatDer,
    xmlSecKeyDataFormatPkcs8Pem,
    xmlSecKeyDataFormatPkcs8Der,
    xmlSecKeyDataFormatPkcs12,
    xmlSecKeyDataFormatCertPem,
    xmlSecKeyDataFormatCertDer
} xmlSecKeyDataFormat;
</programlisting>
<para>
The key data format (binary, der, pem, etc.).
</para><variablelist role="enum">
<varlistentry id="xmlSecKeyDataFormatUnknown" role="constant">
<term><literal>xmlSecKeyDataFormatUnknown</literal></term>
<listitem><simpara>the key data format is unknown.
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatBinary" role="constant">
<term><literal>xmlSecKeyDataFormatBinary</literal></term>
<listitem><simpara>the binary key data.
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatPem" role="constant">
<term><literal>xmlSecKeyDataFormatPem</literal></term>
<listitem><simpara>the PEM key data (cert or public/private key).
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatDer" role="constant">
<term><literal>xmlSecKeyDataFormatDer</literal></term>
<listitem><simpara>the DER key data (cert or public/private key).
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatPkcs8Pem" role="constant">
<term><literal>xmlSecKeyDataFormatPkcs8Pem</literal></term>
<listitem><simpara>the PKCS8 PEM private key.
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatPkcs8Der" role="constant">
<term><literal>xmlSecKeyDataFormatPkcs8Der</literal></term>
<listitem><simpara>the PKCS8 DER private key.
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatPkcs12" role="constant">
<term><literal>xmlSecKeyDataFormatPkcs12</literal></term>
<listitem><simpara>the PKCS12 format (bag of keys and certs)
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatCertPem" role="constant">
<term><literal>xmlSecKeyDataFormatCertPem</literal></term>
<listitem><simpara>the PEM cert.
</simpara></listitem>
</varlistentry>
<varlistentry id="xmlSecKeyDataFormatCertDer" role="constant">
<term><literal>xmlSecKeyDataFormatCertDer</literal></term>
<listitem><simpara>the DER cert.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGenerate" role="function">
<title>xmlSecKeyDataGenerate ()</title>
<indexterm zone="xmlSecKeyDataGenerate"><primary>xmlSecKeyDataGenerate</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataGenerate               (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);</programlisting>
<para>
Generates new key data of given size and type.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeBits</parameter>&#160;:</term>
<listitem><simpara>the desired key data size (in bits).</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the desired key data type.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGenerateMethod" role="function">
<title>xmlSecKeyDataGenerateMethod ()</title>
<indexterm zone="xmlSecKeyDataGenerateMethod"><primary>xmlSecKeyDataGenerateMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataGenerateMethod)      (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> sizeBits</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);</programlisting>
<para>
Key data specific method for generating new key data.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sizeBits</parameter>&#160;:</term>
<listitem><simpara>the key data specific size.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the required key type (session/permanent, etc.)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetIdentifier" role="function">
<title>xmlSecKeyDataGetIdentifier ()</title>
<indexterm zone="xmlSecKeyDataGetIdentifier"><primary>xmlSecKeyDataGetIdentifier</primary></indexterm>
<programlisting>const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link> *     xmlSecKeyDataGetIdentifier          (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Gets key data identifier string.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data id string.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetIdentifierMethod" role="function">
<title>xmlSecKeyDataGetIdentifierMethod ()</title>
<indexterm zone="xmlSecKeyDataGetIdentifierMethod"><primary>xmlSecKeyDataGetIdentifierMethod</primary></indexterm>
<programlisting>const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link> *     (*xmlSecKeyDataGetIdentifierMethod) (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Key data specific method to get the key data identifier string (for example,
X509 data identifier is the subject of the verified cert).
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the identifier string or NULL if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetName" role="macro">
<title>xmlSecKeyDataGetName()</title>
<indexterm zone="xmlSecKeyDataGetName"><primary>xmlSecKeyDataGetName</primary></indexterm>
<programlisting>#define             xmlSecKeyDataGetName(data)</programlisting>
<para>
Macro. Returns the key data name.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetSize" role="function">
<title>xmlSecKeyDataGetSize ()</title>
<indexterm zone="xmlSecKeyDataGetSize"><primary>xmlSecKeyDataGetSize</primary></indexterm>
<programlisting><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          xmlSecKeyDataGetSize                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Gets key data size.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data size (in bits).</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetSizeMethod" role="function">
<title>xmlSecKeyDataGetSizeMethod ()</title>
<indexterm zone="xmlSecKeyDataGetSizeMethod"><primary>xmlSecKeyDataGetSizeMethod</primary></indexterm>
<programlisting><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          (*xmlSecKeyDataGetSizeMethod)       (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Key data specific method to get the key size.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the key size in bits.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetType" role="function">
<title>xmlSecKeyDataGetType ()</title>
<indexterm zone="xmlSecKeyDataGetType"><primary>xmlSecKeyDataGetType</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>   xmlSecKeyDataGetType                (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Gets key data type.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataGetTypeMethod" role="function">
<title>xmlSecKeyDataGetTypeMethod ()</title>
<indexterm zone="xmlSecKeyDataGetTypeMethod"><primary>xmlSecKeyDataGetTypeMethod</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataType"><returnvalue>xmlSecKeyDataType</returnvalue></link>   (*xmlSecKeyDataGetTypeMethod)       (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Key data specific method to get the key type.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the key type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListDebugDump" role="function">
<title>xmlSecKeyDataIdListDebugDump ()</title>
<indexterm zone="xmlSecKeyDataIdListDebugDump"><primary>xmlSecKeyDataIdListDebugDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataIdListDebugDump        (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints binary key data debug information to <parameter>output</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListDebugXmlDump" role="function">
<title>xmlSecKeyDataIdListDebugXmlDump ()</title>
<indexterm zone="xmlSecKeyDataIdListDebugXmlDump"><primary>xmlSecKeyDataIdListDebugXmlDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataIdListDebugXmlDump     (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints binary key data debug information to <parameter>output</parameter> in XML format.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListFind" role="function">
<title>xmlSecKeyDataIdListFind ()</title>
<indexterm zone="xmlSecKeyDataIdListFind"><primary>xmlSecKeyDataIdListFind</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataIdListFind             (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> dataId</parameter>);</programlisting>
<para>
Lookups <parameter>dataId</parameter> in <parameter>list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&#160;:</term>
<listitem><simpara>the key data klass.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>1 if <parameter>dataId</parameter> is found in the <parameter>list</parameter>, 0 if not and a negative
value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByHref" role="function">
<title>xmlSecKeyDataIdListFindByHref ()</title>
<indexterm zone="xmlSecKeyDataIdListFindByHref"><primary>xmlSecKeyDataIdListFindByHref</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     xmlSecKeyDataIdListFindByHref       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *href</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>
Lookups data klass in the list with given <parameter>href</parameter> and <parameter>usage</parameter> in <parameter>list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>href</parameter>&#160;:</term>
<listitem><simpara>the desired key data klass href.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&#160;:</term>
<listitem><simpara>the desired key data usage.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data klass is found and NULL otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByName" role="function">
<title>xmlSecKeyDataIdListFindByName ()</title>
<indexterm zone="xmlSecKeyDataIdListFindByName"><primary>xmlSecKeyDataIdListFindByName</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     xmlSecKeyDataIdListFindByName       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>
Lookups data klass in the list with given <parameter>name</parameter> and <parameter>usage</parameter> in <parameter>list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>the desired key data klass name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&#160;:</term>
<listitem><simpara>the desired key data usage.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data klass is found and NULL otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListFindByNode" role="function">
<title>xmlSecKeyDataIdListFindByNode ()</title>
<indexterm zone="xmlSecKeyDataIdListFindByNode"><primary>xmlSecKeyDataIdListFindByNode</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataId"><returnvalue>xmlSecKeyDataId</returnvalue></link>     xmlSecKeyDataIdListFindByNode       (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                                                         <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                                                         <parameter><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link> usage</parameter>);</programlisting>
<para>
Lookups data klass in the list with given <parameter>nodeName</parameter>, <parameter>nodeNs</parameter> and
<parameter>usage</parameter> in the <parameter>list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data ids list.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nodeName</parameter>&#160;:</term>
<listitem><simpara>the desired key data klass XML node name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nodeNs</parameter>&#160;:</term>
<listitem><simpara>the desired key data klass XML node namespace.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>usage</parameter>&#160;:</term>
<listitem><simpara>the desired key data usage.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data klass is found and NULL otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListGetKlass" role="function">
<title>xmlSecKeyDataIdListGetKlass ()</title>
<indexterm zone="xmlSecKeyDataIdListGetKlass"><primary>xmlSecKeyDataIdListGetKlass</primary></indexterm>
<programlisting><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     xmlSecKeyDataIdListGetKlass         (<parameter><type>void</type></parameter>);</programlisting>
<para>
The key data id list klass.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>pointer to the key data id list klass.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdListId" role="macro">
<title>xmlSecKeyDataIdListId</title>
<indexterm zone="xmlSecKeyDataIdListId"><primary>xmlSecKeyDataIdListId</primary></indexterm>
<programlisting>#define xmlSecKeyDataIdListId   xmlSecKeyDataIdListGetKlass()
</programlisting>
<para>
The key data list klass id.
</para></refsect2>
<refsect2 id="xmlSecKeyDataIdUnknown" role="macro">
<title>xmlSecKeyDataIdUnknown</title>
<indexterm zone="xmlSecKeyDataIdUnknown"><primary>xmlSecKeyDataIdUnknown</primary></indexterm>
<programlisting>#define xmlSecKeyDataIdUnknown                  ((xmlSecKeyDataId)NULL)
</programlisting>
<para>
The "unknown" id.
</para></refsect2>
<refsect2 id="xmlSecKeyDataIdsGet" role="function">
<title>xmlSecKeyDataIdsGet ()</title>
<indexterm zone="xmlSecKeyDataIdsGet"><primary>xmlSecKeyDataIdsGet</primary></indexterm>
<programlisting><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    xmlSecKeyDataIdsGet                 (<parameter><type>void</type></parameter>);</programlisting>
<para>
Gets global registered key data klasses list.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the pointer to list of all registered key data klasses.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdsInit" role="function">
<title>xmlSecKeyDataIdsInit ()</title>
<indexterm zone="xmlSecKeyDataIdsInit"><primary>xmlSecKeyDataIdsInit</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataIdsInit                (<parameter><type>void</type></parameter>);</programlisting>
<para>
Initializes the key data klasses. This function is called from the
<link linkend="xmlSecInit"><type>xmlSecInit</type></link> function and the application should not call it directly.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdsRegister" role="function">
<title>xmlSecKeyDataIdsRegister ()</title>
<indexterm zone="xmlSecKeyDataIdsRegister"><primary>xmlSecKeyDataIdsRegister</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataIdsRegister            (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>);</programlisting>
<para>
Registers <parameter>id</parameter> in the global list of key data klasses.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the key data klass.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdsRegisterDefault" role="function">
<title>xmlSecKeyDataIdsRegisterDefault ()</title>
<indexterm zone="xmlSecKeyDataIdsRegisterDefault"><primary>xmlSecKeyDataIdsRegisterDefault</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataIdsRegisterDefault     (<parameter><type>void</type></parameter>);</programlisting>
<para>
Registers default (implemented by XML Security Library)
key data klasses: <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyName">&lt;dsig:KeyName/&gt;</ulink> element processing klass,
<ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue">&lt;dsig:KeyValue/&gt;</ulink> element processing klass, ...
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIdsShutdown" role="function">
<title>xmlSecKeyDataIdsShutdown ()</title>
<indexterm zone="xmlSecKeyDataIdsShutdown"><primary>xmlSecKeyDataIdsShutdown</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataIdsShutdown            (<parameter><type>void</type></parameter>);</programlisting>
<para>
Shuts down the keys data klasses. This function is called from the
<link linkend="xmlSecShutdown"><type>xmlSecShutdown</type></link> function and the application should not call it directly.
</para></refsect2>
<refsect2 id="xmlSecKeyDataInitMethod" role="function">
<title>xmlSecKeyDataInitMethod ()</title>
<indexterm zone="xmlSecKeyDataInitMethod"><primary>xmlSecKeyDataInitMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataInitMethod)          (<parameter><link linkend="xmlSecKeyData"><type>xmlSecKeyDataPtr</type></link> data</parameter>);</programlisting>
<para>
Key data specific initialization method.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to key data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataIsValid" role="macro">
<title>xmlSecKeyDataIsValid()</title>
<indexterm zone="xmlSecKeyDataIsValid"><primary>xmlSecKeyDataIsValid</primary></indexterm>
<programlisting>#define             xmlSecKeyDataIsValid(data)</programlisting>
<para>
Macro. Returns 1 if <parameter>data</parameter> is not NULL and <parameter>data</parameter>-&gt;id is not NULL
or 0 otherwise.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the pointer to data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataKlass" role="struct">
<title>struct xmlSecKeyDataKlass</title>
<indexterm zone="xmlSecKeyDataKlass"><primary>xmlSecKeyDataKlass</primary></indexterm>
<programlisting>struct xmlSecKeyDataKlass {
    xmlSecSize                          klassSize;
    xmlSecSize                          objSize;

    /* data */
    const xmlChar*                      name;
    xmlSecKeyDataUsage                  usage;
    const xmlChar*                      href;
    const xmlChar*                      dataNodeName;
    const xmlChar*                      dataNodeNs;

    /* constructors/destructor */
    xmlSecKeyDataInitMethod             initialize;
    xmlSecKeyDataDuplicateMethod        duplicate;
    xmlSecKeyDataFinalizeMethod         finalize;
    xmlSecKeyDataGenerateMethod         generate;

    /* get info */
    xmlSecKeyDataGetTypeMethod          getType;
    xmlSecKeyDataGetSizeMethod          getSize;
    xmlSecKeyDataGetIdentifierMethod    getIdentifier;

    /* read/write */
    xmlSecKeyDataXmlReadMethod          xmlRead;
    xmlSecKeyDataXmlWriteMethod         xmlWrite;
    xmlSecKeyDataBinReadMethod          binRead;
    xmlSecKeyDataBinWriteMethod         binWrite;

    /* debug */
    xmlSecKeyDataDebugDumpMethod        debugDump;
    xmlSecKeyDataDebugDumpMethod        debugXmlDump;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>
The data id (klass).
</para><variablelist role="struct">
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataKlass.klassSize">klassSize</structfield>;</term>
<listitem><simpara>the klass size.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataKlass.objSize">objSize</structfield>;</term>
<listitem><simpara>the object size.</simpara></listitem>
</varlistentry>
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.name">name</structfield>;</term>
<listitem><simpara>the object name.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataUsage"><type>xmlSecKeyDataUsage</type></link>&#160;<structfield id="xmlSecKeyDataKlass.usage">usage</structfield>;</term>
<listitem><simpara>the allowed data usage.</simpara></listitem>
</varlistentry>
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.href">href</structfield>;</term>
<listitem><simpara>the identification string (href).</simpara></listitem>
</varlistentry>
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.dataNodeName">dataNodeName</structfield>;</term>
<listitem><simpara>the data's XML node name.</simpara></listitem>
</varlistentry>
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.dataNodeNs">dataNodeNs</structfield>;</term>
<listitem><simpara>the data's XML node namespace.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataInitMethod"><type>xmlSecKeyDataInitMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.initialize">initialize</structfield>;</term>
<listitem><simpara>the initialization method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataDuplicateMethod"><type>xmlSecKeyDataDuplicateMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.duplicate">duplicate</structfield>;</term>
<listitem><simpara>the duplicate (copy) method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataFinalizeMethod"><type>xmlSecKeyDataFinalizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.finalize">finalize</structfield>;</term>
<listitem><simpara>the finalization (destroy) method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataGenerateMethod"><type>xmlSecKeyDataGenerateMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.generate">generate</structfield>;</term>
<listitem><simpara>the new data generation method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataGetTypeMethod"><type>xmlSecKeyDataGetTypeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getType">getType</structfield>;</term>
<listitem><simpara>the method to access data's type information.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataGetSizeMethod"><type>xmlSecKeyDataGetSizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getSize">getSize</structfield>;</term>
<listitem><simpara>the method to access data's size.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataGetIdentifierMethod"><type>xmlSecKeyDataGetIdentifierMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.getIdentifier">getIdentifier</structfield>;</term>
<listitem><simpara>the method to access data's string identifier.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataXmlReadMethod"><type>xmlSecKeyDataXmlReadMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.xmlRead">xmlRead</structfield>;</term>
<listitem><simpara>the method for reading data from XML node.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataXmlWriteMethod"><type>xmlSecKeyDataXmlWriteMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.xmlWrite">xmlWrite</structfield>;</term>
<listitem><simpara>the method for writing data to XML node.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataBinReadMethod"><type>xmlSecKeyDataBinReadMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.binRead">binRead</structfield>;</term>
<listitem><simpara>the method for reading data from a binary buffer.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataBinWriteMethod"><type>xmlSecKeyDataBinWriteMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.binWrite">binWrite</structfield>;</term>
<listitem><simpara>the method for writing data to binary buffer.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataDebugDumpMethod"><type>xmlSecKeyDataDebugDumpMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.debugDump">debugDump</structfield>;</term>
<listitem><simpara>the method for printing debug data information.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataDebugDumpMethod"><type>xmlSecKeyDataDebugDumpMethod</type></link>&#160;<structfield id="xmlSecKeyDataKlass.debugXmlDump">debugXmlDump</structfield>;</term>
<listitem><simpara>the method for printing debug data information in XML format.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.reserved0">reserved0</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataKlass.reserved1">reserved1</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataKlassGetName" role="macro">
<title>xmlSecKeyDataKlassGetName()</title>
<indexterm zone="xmlSecKeyDataKlassGetName"><primary>xmlSecKeyDataKlassGetName</primary></indexterm>
<programlisting>#define             xmlSecKeyDataKlassGetName(klass)</programlisting>
<para>
Macro. Returns data klass name.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataListGetKlass" role="function">
<title>xmlSecKeyDataListGetKlass ()</title>
<indexterm zone="xmlSecKeyDataListGetKlass"><primary>xmlSecKeyDataListGetKlass</primary></indexterm>
<programlisting><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     xmlSecKeyDataListGetKlass           (<parameter><type>void</type></parameter>);</programlisting>
<para>
The key data list klass.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>pointer to the key data list klass.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataListId" role="macro">
<title>xmlSecKeyDataListId</title>
<indexterm zone="xmlSecKeyDataListId"><primary>xmlSecKeyDataListId</primary></indexterm>
<programlisting>#define xmlSecKeyDataListId     xmlSecKeyDataListGetKlass()
</programlisting>
<para>
The key data klasses list klass id.
</para></refsect2>
<refsect2 id="xmlSecKeyDataStore" role="struct">
<title>struct xmlSecKeyDataStore</title>
<indexterm zone="xmlSecKeyDataStore"><primary>xmlSecKeyDataStore</primary></indexterm>
<programlisting>struct xmlSecKeyDataStore {
    xmlSecKeyDataStoreId                id;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>
The key data store. Key data store holds common key data specific information
required for key data processing. For example, X509 data store may hold
information about trusted (root) certificates.
</para><variablelist role="struct">
<varlistentry><term><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link>&#160;<structfield id="xmlSecKeyDataStore.id">id</structfield>;</term>
<listitem><simpara>the store id (<link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link>).</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStore.reserved0">reserved0</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStore.reserved1">reserved1</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreCheckId" role="macro">
<title>xmlSecKeyDataStoreCheckId()</title>
<indexterm zone="xmlSecKeyDataStoreCheckId"><primary>xmlSecKeyDataStoreCheckId</primary></indexterm>
<programlisting>#define             xmlSecKeyDataStoreCheckId(store, storeId)</programlisting>
<para>
Macro. Returns 1 if <parameter>store</parameter> is valid and <parameter>store</parameter>'s id is equal to <parameter>storeId</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the pointer to store.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>storeId</parameter>&#160;:</term>
<listitem><simpara>the store Id.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreCheckSize" role="macro">
<title>xmlSecKeyDataStoreCheckSize()</title>
<indexterm zone="xmlSecKeyDataStoreCheckSize"><primary>xmlSecKeyDataStoreCheckSize</primary></indexterm>
<programlisting>#define             xmlSecKeyDataStoreCheckSize(store, size)</programlisting>
<para>
Macro. Returns 1 if <parameter>data</parameter> is valid and <parameter>stores</parameter>'s object has at least <parameter>size</parameter> bytes.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the pointer to store.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>the expected size.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreCreate" role="function">
<title>xmlSecKeyDataStoreCreate ()</title>
<indexterm zone="xmlSecKeyDataStoreCreate"><primary>xmlSecKeyDataStoreCreate</primary></indexterm>
<programlisting><link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link> xmlSecKeyDataStoreCreate          (<parameter><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link> id</parameter>);</programlisting>
<para>
Creates new key data store of the specified klass <parameter>id</parameter>. Caller is responsible
for freeing returned object with <link linkend="xmlSecKeyDataStoreDestroy"><type>xmlSecKeyDataStoreDestroy</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the store id.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the pointer to newly allocated key data store structure
or NULL if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreDestroy" role="function">
<title>xmlSecKeyDataStoreDestroy ()</title>
<indexterm zone="xmlSecKeyDataStoreDestroy"><primary>xmlSecKeyDataStoreDestroy</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecKeyDataStoreDestroy           (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>
Destroys the key data store created with <link linkend="xmlSecKeyDataStoreCreate"><type>xmlSecKeyDataStoreCreate</type></link>
function.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the pointer to the key data store..</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreFinalizeMethod" role="function">
<title>xmlSecKeyDataStoreFinalizeMethod ()</title>
<indexterm zone="xmlSecKeyDataStoreFinalizeMethod"><primary>xmlSecKeyDataStoreFinalizeMethod</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*xmlSecKeyDataStoreFinalizeMethod) (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>
Key data store specific finalization (destroy) method.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the data store.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreGetName" role="macro">
<title>xmlSecKeyDataStoreGetName()</title>
<indexterm zone="xmlSecKeyDataStoreGetName"><primary>xmlSecKeyDataStoreGetName</primary></indexterm>
<programlisting>#define             xmlSecKeyDataStoreGetName(store)</programlisting>
<para>
Macro. Returns key data store name.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the pointer to store.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreIdUnknown" role="macro">
<title>xmlSecKeyDataStoreIdUnknown</title>
<indexterm zone="xmlSecKeyDataStoreIdUnknown"><primary>xmlSecKeyDataStoreIdUnknown</primary></indexterm>
<programlisting>#define xmlSecKeyDataStoreIdUnknown                     NULL
</programlisting>
<para>
The "unknown" id.
</para></refsect2>
<refsect2 id="xmlSecKeyDataStoreInitializeMethod" role="function">
<title>xmlSecKeyDataStoreInitializeMethod ()</title>
<indexterm zone="xmlSecKeyDataStoreInitializeMethod"><primary>xmlSecKeyDataStoreInitializeMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataStoreInitializeMethod)
                                                        (<parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>
Key data store specific initialization method.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the data store.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreIsValid" role="macro">
<title>xmlSecKeyDataStoreIsValid()</title>
<indexterm zone="xmlSecKeyDataStoreIsValid"><primary>xmlSecKeyDataStoreIsValid</primary></indexterm>
<programlisting>#define             xmlSecKeyDataStoreIsValid(store)</programlisting>
<para>
Macro. Returns 1 if <parameter>store</parameter> is not NULL and <parameter>store</parameter>-&gt;id is not NULL
or 0 otherwise.
</para><variablelist role="params">
<varlistentry><term><parameter>store</parameter>&#160;:</term>
<listitem><simpara>the pointer to store.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreKlass" role="struct">
<title>struct xmlSecKeyDataStoreKlass</title>
<indexterm zone="xmlSecKeyDataStoreKlass"><primary>xmlSecKeyDataStoreKlass</primary></indexterm>
<programlisting>struct xmlSecKeyDataStoreKlass {
    xmlSecSize                          klassSize;
    xmlSecSize                          objSize;

    /* data */
    const xmlChar*                      name;

    /* constructors/destructor */
    xmlSecKeyDataStoreInitializeMethod  initialize;
    xmlSecKeyDataStoreFinalizeMethod    finalize;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>
The data store id (klass).
</para><variablelist role="struct">
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.klassSize">klassSize</structfield>;</term>
<listitem><simpara>the data store klass size.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.objSize">objSize</structfield>;</term>
<listitem><simpara>the data store obj size.</simpara></listitem>
</varlistentry>
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.name">name</structfield>;</term>
<listitem><simpara>the store's name.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataStoreInitializeMethod"><type>xmlSecKeyDataStoreInitializeMethod</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.initialize">initialize</structfield>;</term>
<listitem><simpara>the store's initialization method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecKeyDataStoreFinalizeMethod"><type>xmlSecKeyDataStoreFinalizeMethod</type></link>&#160;<structfield id="xmlSecKeyDataStoreKlass.finalize">finalize</structfield>;</term>
<listitem><simpara>the store's finalization (destroy) method.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.reserved0">reserved0</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyDataStoreKlass.reserved1">reserved1</structfield>;</term>
<listitem><simpara>reserved for the future.</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStoreKlassGetName" role="macro">
<title>xmlSecKeyDataStoreKlassGetName()</title>
<indexterm zone="xmlSecKeyDataStoreKlassGetName"><primary>xmlSecKeyDataStoreKlassGetName</primary></indexterm>
<programlisting>#define             xmlSecKeyDataStoreKlassGetName(klass)</programlisting>
<para>
Macro. Returns store klass name.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>the pointer to store klass.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStorePtrListGetKlass" role="function">
<title>xmlSecKeyDataStorePtrListGetKlass ()</title>
<indexterm zone="xmlSecKeyDataStorePtrListGetKlass"><primary>xmlSecKeyDataStorePtrListGetKlass</primary></indexterm>
<programlisting><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     xmlSecKeyDataStorePtrListGetKlass   (<parameter><type>void</type></parameter>);</programlisting>
<para>
Key data stores list.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>key data stores list klass.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataStorePtrListId" role="macro">
<title>xmlSecKeyDataStorePtrListId</title>
<indexterm zone="xmlSecKeyDataStorePtrListId"><primary>xmlSecKeyDataStorePtrListId</primary></indexterm>
<programlisting>#define xmlSecKeyDataStorePtrListId     xmlSecKeyDataStorePtrListGetKlass()
</programlisting>
<para>
The data store list id (klass).
</para></refsect2>
<refsect2 id="xmlSecKeyDataType" role="typedef">
<title>xmlSecKeyDataType</title>
<indexterm zone="xmlSecKeyDataType"><primary>xmlSecKeyDataType</primary></indexterm>
<programlisting>typedef unsigned int                            xmlSecKeyDataType;
</programlisting>
<para>
The key data type (public/private, session/permanet, etc.).
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeAny" role="macro">
<title>xmlSecKeyDataTypeAny</title>
<indexterm zone="xmlSecKeyDataTypeAny"><primary>xmlSecKeyDataTypeAny</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeAny                            0xFFFF
</programlisting>
<para>
Any key data.
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeNone" role="macro">
<title>xmlSecKeyDataTypeNone</title>
<indexterm zone="xmlSecKeyDataTypeNone"><primary>xmlSecKeyDataTypeNone</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeNone                           xmlSecKeyDataTypeUnknown
</programlisting>
<para>
The key data type is unknown (same as <link linkend="xmlSecKeyDataTypeUnknown"><type>xmlSecKeyDataTypeUnknown</type></link>).
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypePermanent" role="macro">
<title>xmlSecKeyDataTypePermanent</title>
<indexterm zone="xmlSecKeyDataTypePermanent"><primary>xmlSecKeyDataTypePermanent</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypePermanent                      0x0010
</programlisting>
<para>
The key data contain permanent key (stored in keys manager).
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypePrivate" role="macro">
<title>xmlSecKeyDataTypePrivate</title>
<indexterm zone="xmlSecKeyDataTypePrivate"><primary>xmlSecKeyDataTypePrivate</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypePrivate                        0x0002
</programlisting>
<para>
The key data contain a private key.
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypePublic" role="macro">
<title>xmlSecKeyDataTypePublic</title>
<indexterm zone="xmlSecKeyDataTypePublic"><primary>xmlSecKeyDataTypePublic</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypePublic                         0x0001
</programlisting>
<para>
The key data contain a public key.
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeSession" role="macro">
<title>xmlSecKeyDataTypeSession</title>
<indexterm zone="xmlSecKeyDataTypeSession"><primary>xmlSecKeyDataTypeSession</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeSession                        0x0008
</programlisting>
<para>
The key data contain session key (one time key, not stored in keys manager).
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeSymmetric" role="macro">
<title>xmlSecKeyDataTypeSymmetric</title>
<indexterm zone="xmlSecKeyDataTypeSymmetric"><primary>xmlSecKeyDataTypeSymmetric</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeSymmetric                      0x0004
</programlisting>
<para>
The key data contain a symmetric key.
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeTrusted" role="macro">
<title>xmlSecKeyDataTypeTrusted</title>
<indexterm zone="xmlSecKeyDataTypeTrusted"><primary>xmlSecKeyDataTypeTrusted</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeTrusted                        0x0100
</programlisting>
<para>
The key data is trusted.
</para></refsect2>
<refsect2 id="xmlSecKeyDataTypeUnknown" role="macro">
<title>xmlSecKeyDataTypeUnknown</title>
<indexterm zone="xmlSecKeyDataTypeUnknown"><primary>xmlSecKeyDataTypeUnknown</primary></indexterm>
<programlisting>#define xmlSecKeyDataTypeUnknown                        0x0000
</programlisting>
<para>
The key data type is unknown (same as <link linkend="xmlSecKeyDataTypeNone"><type>xmlSecKeyDataTypeNone</type></link>).
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsage" role="typedef">
<title>xmlSecKeyDataUsage</title>
<indexterm zone="xmlSecKeyDataUsage"><primary>xmlSecKeyDataUsage</primary></indexterm>
<programlisting>typedef unsigned int                                    xmlSecKeyDataUsage;
</programlisting>
<para>
The bits mask that determines possible keys data usage.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageAny" role="macro">
<title>xmlSecKeyDataUsageAny</title>
<indexterm zone="xmlSecKeyDataUsageAny"><primary>xmlSecKeyDataUsageAny</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageAny                           0xFFFFF
</programlisting>
<para>
Any key data usage.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNode" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNode</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNode"><primary>xmlSecKeyDataUsageKeyInfoNode</primary></indexterm>
<programlisting>#define             xmlSecKeyDataUsageKeyInfoNode</programlisting>
<para>
The key data could be read and written from/to a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNodeRead" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNodeRead</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNodeRead"><primary>xmlSecKeyDataUsageKeyInfoNodeRead</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageKeyInfoNodeRead               0x00001
</programlisting>
<para>
The key data could be read from a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyInfoNodeWrite" role="macro">
<title>xmlSecKeyDataUsageKeyInfoNodeWrite</title>
<indexterm zone="xmlSecKeyDataUsageKeyInfoNodeWrite"><primary>xmlSecKeyDataUsageKeyInfoNodeWrite</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageKeyInfoNodeWrite              0x00002
</programlisting>
<para>
The key data could be written to a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo ">&lt;dsig:KeyInfo /&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNode" role="macro">
<title>xmlSecKeyDataUsageKeyValueNode</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNode"><primary>xmlSecKeyDataUsageKeyValueNode</primary></indexterm>
<programlisting>#define             xmlSecKeyDataUsageKeyValueNode</programlisting>
<para>
The key data could be read and written from/to a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue ">&lt;dsig:KeyValue /&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNodeRead" role="macro">
<title>xmlSecKeyDataUsageKeyValueNodeRead</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNodeRead"><primary>xmlSecKeyDataUsageKeyValueNodeRead</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageKeyValueNodeRead              0x00004
</programlisting>
<para>
The key data could be read from a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue ">&lt;dsig:KeyValue /&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageKeyValueNodeWrite" role="macro">
<title>xmlSecKeyDataUsageKeyValueNodeWrite</title>
<indexterm zone="xmlSecKeyDataUsageKeyValueNodeWrite"><primary>xmlSecKeyDataUsageKeyValueNodeWrite</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageKeyValueNodeWrite             0x00008
</programlisting>
<para>
The key data could be written to a <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyValue ">&lt;dsig:KeyValue /&gt;</ulink> child.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNode" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNode</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNode"><primary>xmlSecKeyDataUsageRetrievalMethodNode</primary></indexterm>
<programlisting>#define             xmlSecKeyDataUsageRetrievalMethodNode</programlisting>
<para>
The key data could be retrieved using <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> node
in any format.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNodeBin" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNodeBin</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNodeBin"><primary>xmlSecKeyDataUsageRetrievalMethodNodeBin</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageRetrievalMethodNodeBin        0x00020
</programlisting>
<para>
The key data could be retrieved using <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> node
in binary format.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageRetrievalMethodNodeXml" role="macro">
<title>xmlSecKeyDataUsageRetrievalMethodNodeXml</title>
<indexterm zone="xmlSecKeyDataUsageRetrievalMethodNodeXml"><primary>xmlSecKeyDataUsageRetrievalMethodNodeXml</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageRetrievalMethodNodeXml        0x00010
</programlisting>
<para>
The key data could be retrieved using <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-RetrievalMethod ">&lt;dsig:RetrievalMethod /&gt;</ulink> node
in XML format.
</para></refsect2>
<refsect2 id="xmlSecKeyDataUsageUnknown" role="macro">
<title>xmlSecKeyDataUsageUnknown</title>
<indexterm zone="xmlSecKeyDataUsageUnknown"><primary>xmlSecKeyDataUsageUnknown</primary></indexterm>
<programlisting>#define xmlSecKeyDataUsageUnknown                       0x00000
</programlisting>
<para>
The key data usage is unknown.
</para></refsect2>
<refsect2 id="xmlSecKeyDataXmlRead" role="function">
<title>xmlSecKeyDataXmlRead ()</title>
<indexterm zone="xmlSecKeyDataXmlRead"><primary>xmlSecKeyDataXmlRead</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataXmlRead                (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Reads the key data of klass <parameter>id</parameter> from XML <parameter>node</parameter> and adds them to <parameter>key</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the destination key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to an XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataXmlReadMethod" role="function">
<title>xmlSecKeyDataXmlReadMethod ()</title>
<indexterm zone="xmlSecKeyDataXmlReadMethod"><primary>xmlSecKeyDataXmlReadMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataXmlReadMethod)       (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Key data specific method for reading XML node.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data id.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to data's value XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataXmlWrite" role="function">
<title>xmlSecKeyDataXmlWrite ()</title>
<indexterm zone="xmlSecKeyDataXmlWrite"><primary>xmlSecKeyDataXmlWrite</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecKeyDataXmlWrite               (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Writes the key data of klass <parameter>id</parameter> from <parameter>key</parameter> to an XML <parameter>node</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data klass.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the source key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to an XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the pointer to <ulink URL="http://www.w3.org/TR/xmldsig-core/#sec-KeyInfo">&lt;dsig:KeyInfo/&gt;</ulink> element processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecKeyDataXmlWriteMethod" role="function">
<title>xmlSecKeyDataXmlWriteMethod ()</title>
<indexterm zone="xmlSecKeyDataXmlWriteMethod"><primary>xmlSecKeyDataXmlWriteMethod</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*xmlSecKeyDataXmlWriteMethod)      (<parameter><link linkend="xmlSecKeyDataId"><type>xmlSecKeyDataId</type></link> id</parameter>,
                                                         <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>,
                                                         <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>
Key data specific method for writing XML node.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the data id.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>the key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the pointer to data's value XML node.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyInfoCtx</parameter>&#160;:</term>
<listitem><simpara>the &lt;dsig:KeyInfo&gt; node processing context.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success or a negative value if an error occurs.</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
