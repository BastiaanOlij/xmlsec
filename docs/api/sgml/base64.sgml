<refentry id="xmlsec-base64">
<refmeta>
<refentrytitle>base64</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>base64</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



#define     <link linkend="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</link>
<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> <link linkend="xmlSecBase64CtxCreate">xmlSecBase64CtxCreate</link>    (<link linkend="int">int</link> encode,
                                             <link linkend="int">int</link> columns);
<link linkend="void">void</link>        <link linkend="xmlSecBase64CtxDestroy">xmlSecBase64CtxDestroy</link>          (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx);
<link linkend="int">int</link>         <link linkend="xmlSecBase64CtxInitialize">xmlSecBase64CtxInitialize</link>       (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             <link linkend="int">int</link> encode,
                                             <link linkend="int">int</link> columns);
<link linkend="void">void</link>        <link linkend="xmlSecBase64CtxFinalize">xmlSecBase64CtxFinalize</link>         (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx);
<link linkend="int">int</link>         <link linkend="xmlSecBase64CtxUpdate">xmlSecBase64CtxUpdate</link>           (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *in,
                                             <link linkend="xmlSecSize">xmlSecSize</link> inSize,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *out,
                                             <link linkend="xmlSecSize">xmlSecSize</link> outSize);
<link linkend="int">int</link>         <link linkend="xmlSecBase64CtxFinal">xmlSecBase64CtxFinal</link>            (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *out,
                                             <link linkend="xmlSecSize">xmlSecSize</link> outSize);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecBase64Encode">xmlSecBase64Encode</link>              (const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> len,
                                             <link linkend="int">int</link> columns);
<link linkend="int">int</link>         <link linkend="xmlSecBase64Decode">xmlSecBase64Decode</link>              (const <link linkend="xmlChar">xmlChar</link> *str,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> len);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</title>
<indexterm><primary>XMLSEC_BASE64_LINESIZE</primary></indexterm><programlisting>#define XMLSEC_BASE64_LINESIZE				64
</programlisting>
<para>
The default maximum base64 encoded line size.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxCreate">xmlSecBase64CtxCreate ()</title>
<indexterm><primary>xmlSecBase64CtxCreate</primary></indexterm><programlisting><link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> xmlSecBase64CtxCreate    (<link linkend="int">int</link> encode,
                                             <link linkend="int">int</link> columns);</programlisting>
<para>
Allocates and initializes new base64 context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>encode</parameter>&nbsp;:</term>
<listitem><simpara>		the encode/decode flag (1 - encode, 0 - decode) 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>columns</parameter>&nbsp;:</term>
<listitem><simpara> 		the max line length.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a pointer to newly created <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxDestroy">xmlSecBase64CtxDestroy ()</title>
<indexterm><primary>xmlSecBase64CtxDestroy</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecBase64CtxDestroy          (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx);</programlisting>
<para>
Destroys base64 context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxInitialize">xmlSecBase64CtxInitialize ()</title>
<indexterm><primary>xmlSecBase64CtxInitialize</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBase64CtxInitialize       (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             <link linkend="int">int</link> encode,
                                             <link linkend="int">int</link> columns);</programlisting>
<para>
Initializes new base64 context.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure,
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>encode</parameter>&nbsp;:</term>
<listitem><simpara>		the encode/decode flag (1 - encode, 0 - decode) 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>columns</parameter>&nbsp;:</term>
<listitem><simpara> 		the max line length.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success and a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxFinalize">xmlSecBase64CtxFinalize ()</title>
<indexterm><primary>xmlSecBase64CtxFinalize</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecBase64CtxFinalize         (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx);</programlisting>
<para>
Frees all the resources allocated by <parameter>ctx</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure,
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxUpdate">xmlSecBase64CtxUpdate ()</title>
<indexterm><primary>xmlSecBase64CtxUpdate</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBase64CtxUpdate           (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *in,
                                             <link linkend="xmlSecSize">xmlSecSize</link> inSize,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *out,
                                             <link linkend="xmlSecSize">xmlSecSize</link> outSize);</programlisting>
<para>
Encodes or decodes the next piece of data from input buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in</parameter>&nbsp;:</term>
<listitem><simpara>			the input buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inSize</parameter>&nbsp;:</term>
<listitem><simpara> 		the input buffer size
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outSize</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes written to output buffer or 
-1 if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64CtxFinal">xmlSecBase64CtxFinal ()</title>
<indexterm><primary>xmlSecBase64CtxFinal</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBase64CtxFinal            (<link linkend="xmlSecBase64Ctx">xmlSecBase64CtxPtr</link> ctx,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *out,
                                             <link linkend="xmlSecSize">xmlSecSize</link> outSize);</programlisting>
<para>
Encodes or decodes the last piece of data stored in the context
and finalizes the result.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to <link linkend="xmlSecBase64Ctx"><type>xmlSecBase64Ctx</type></link> structure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outSize</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes written to output buffer or 
-1 if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64Encode">xmlSecBase64Encode ()</title>
<indexterm><primary>xmlSecBase64Encode</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecBase64Encode              (const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> len,
                                             <link linkend="int">int</link> columns);</programlisting>
<para>
Encodes the data from input buffer and allocates the string for the result.
The caller is responsible for freeing returned buffer using
<link linkend="xmlFree"><function>xmlFree()</function></link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> 		the input buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> 		the input buffer size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>columns</parameter>&nbsp;:</term>
<listitem><simpara> 		the output max line length (if 0 then no line breaks
         		would be inserted)
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>newly allocated string with base64 encoded data 
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64Decode">xmlSecBase64Decode ()</title>
<indexterm><primary>xmlSecBase64Decode</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecBase64Decode              (const <link linkend="xmlChar">xmlChar</link> *str,
                                             <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> len);</programlisting>
<para>
Decodes input base64 encoded string and puts result into
the output buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara> 		the input buffer with base64 encoded string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&nbsp;:</term>
<listitem><simpara> 		the output buffer size
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of bytes written to the output buffer or 
a negative value if an error occurs 
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
