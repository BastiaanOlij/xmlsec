<refentry id="xmlsec-list">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-list.top_of_page">list</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  XMLSEC Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>list</refname>
<refpurpose>Generic list structure implementation.</refpurpose>
</refnamediv>

<refsynopsisdiv id="xmlsec-list.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>struct              <link linkend="xmlSecPtrList">xmlSecPtrList</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListSetDefaultAllocMode">xmlSecPtrListSetDefaultAllocMode</link>    (<parameter><link linkend="xmlSecAllocMode"><type>xmlSecAllocMode</type></link> defAllocMode</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> defInitialSize</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecPtrListInitialize">xmlSecPtrListInitialize</link>             (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecPtrListId"><type>xmlSecPtrListId</type></link> id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListFinalize">xmlSecPtrListFinalize</link>               (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);
<link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    <link linkend="xmlSecPtrListCreate">xmlSecPtrListCreate</link>                 (<parameter><link linkend="xmlSecPtrListId"><type>xmlSecPtrListId</type></link> id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListDestroy">xmlSecPtrListDestroy</link>                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListEmpty">xmlSecPtrListEmpty</link>                  (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecPtrListCopy">xmlSecPtrListCopy</link>                   (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> src</parameter>);
<link linkend="xmlSecPtrListPtr"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    <link linkend="xmlSecPtrListDuplicate">xmlSecPtrListDuplicate</link>              (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);
<link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          <link linkend="xmlSecPtrListGetSize">xmlSecPtrListGetSize</link>                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);
<link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           <link linkend="xmlSecPtrListGetItem">xmlSecPtrListGetItem</link>                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecPtrListAdd">xmlSecPtrListAdd</link>                    (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> item</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecPtrListSet">xmlSecPtrListSet</link>                    (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> item</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="xmlSecPtrListRemove">xmlSecPtrListRemove</link>                 (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);
<link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           <link linkend="xmlSecPtrListRemoveAndReturn">xmlSecPtrListRemoveAndReturn</link>        (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListDebugDump">xmlSecPtrListDebugDump</link>              (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="xmlSecPtrListDebugXmlDump">xmlSecPtrListDebugXmlDump</link>           (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
#define             <link linkend="xmlSecPtrListGetName">xmlSecPtrListGetName</link>                (list)
#define             <link linkend="xmlSecPtrListIsValid">xmlSecPtrListIsValid</link>                (list)
#define             <link linkend="xmlSecPtrListCheckId">xmlSecPtrListCheckId</link>                (list,
                                                         dataId)
#define             <link linkend="xmlSecPtrListIdUnknown">xmlSecPtrListIdUnknown</link>
<link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           (<link linkend="xmlSecPtrDuplicateItemMethod">*xmlSecPtrDuplicateItemMethod</link>)     (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="xmlSecPtrDestroyItemMethod">*xmlSecPtrDestroyItemMethod</link>)       (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="xmlSecPtrDebugDumpItemMethod">*xmlSecPtrDebugDumpItemMethod</link>)     (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);
struct              <link linkend="xmlSecPtrListKlass">xmlSecPtrListKlass</link>;
#define             <link linkend="xmlSecPtrListKlassGetName">xmlSecPtrListKlassGetName</link>           (klass)
#define             <link linkend="xmlSecStringListId">xmlSecStringListId</link>
<link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     <link linkend="xmlSecStringListGetKlass">xmlSecStringListGetKlass</link>            (<parameter><type>void</type></parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="xmlsec-list.description" role="desc">
<title role="desc.title">Description</title>
<para>
Generic list structure implementation.
</para>
</refsect1>
<refsect1 id="xmlsec-list.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="xmlSecPtrList" role="struct">
<title>struct xmlSecPtrList</title>
<indexterm zone="xmlSecPtrList"><primary>xmlSecPtrList</primary></indexterm>
<programlisting>struct xmlSecPtrList {
    xmlSecPtrListId             id;

    xmlSecPtr*                  data;
    xmlSecSize                  use;
    xmlSecSize                  max;
    xmlSecAllocMode             allocMode;
};
</programlisting>
<para>
The pointers list.
</para><variablelist role="struct">
<varlistentry><term><link linkend="xmlSecPtrListId"><type>xmlSecPtrListId</type></link>&#160;<structfield id="xmlSecPtrList.id">id</structfield>;</term>
<listitem><simpara>the list items description.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSec"><type>xmlSecPtr</type></link>&#160;*<structfield id="xmlSecPtrList.data">data</structfield>;</term>
<listitem><simpara>the list data.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecPtrList.use">use</structfield>;</term>
<listitem><simpara>the current list size.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecPtrList.max">max</structfield>;</term>
<listitem><simpara>the max (allocated) list size.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecAllocMode"><type>xmlSecAllocMode</type></link>&#160;<structfield id="xmlSecPtrList.allocMode">allocMode</structfield>;</term>
<listitem><simpara>the memory allocation mode.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListSetDefaultAllocMode" role="function">
<title>xmlSecPtrListSetDefaultAllocMode ()</title>
<indexterm zone="xmlSecPtrListSetDefaultAllocMode"><primary>xmlSecPtrListSetDefaultAllocMode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListSetDefaultAllocMode    (<parameter><link linkend="xmlSecAllocMode"><type>xmlSecAllocMode</type></link> defAllocMode</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> defInitialSize</parameter>);</programlisting>
<para>
Sets new default allocation mode and minimal initial list size.
</para><variablelist role="params">
<varlistentry><term><parameter>defAllocMode</parameter>&#160;:</term>
<listitem><simpara>the new default memory allocation mode.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>defInitialSize</parameter>&#160;:</term>
<listitem><simpara>the new default minimal initial size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListInitialize" role="function">
<title>xmlSecPtrListInitialize ()</title>
<indexterm zone="xmlSecPtrListInitialize"><primary>xmlSecPtrListInitialize</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecPtrListInitialize             (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecPtrListId"><type>xmlSecPtrListId</type></link> id</parameter>);</programlisting>
<para>
Initializes the list of given klass. Caller is responsible
for cleaning up by calling <link linkend="xmlSecPtrListFinalize"><type>xmlSecPtrListFinalize</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the list klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListFinalize" role="function">
<title>xmlSecPtrListFinalize ()</title>
<indexterm zone="xmlSecPtrListFinalize"><primary>xmlSecPtrListFinalize</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListFinalize               (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);</programlisting>
<para>
Cleans up the list initialized with <link linkend="xmlSecPtrListInitialize"><type>xmlSecPtrListInitialize</type></link>
function.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListCreate" role="function">
<title>xmlSecPtrListCreate ()</title>
<indexterm zone="xmlSecPtrListCreate"><primary>xmlSecPtrListCreate</primary></indexterm>
<programlisting><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    xmlSecPtrListCreate                 (<parameter><link linkend="xmlSecPtrListId"><type>xmlSecPtrListId</type></link> id</parameter>);</programlisting>
<para>
Creates new list object. Caller is responsible for freeing returned list
by calling <link linkend="xmlSecPtrListDestroy"><type>xmlSecPtrListDestroy</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the list klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to newly allocated list or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListDestroy" role="function">
<title>xmlSecPtrListDestroy ()</title>
<indexterm zone="xmlSecPtrListDestroy"><primary>xmlSecPtrListDestroy</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListDestroy                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);</programlisting>
<para>
Destroys <parameter>list</parameter> created with <link linkend="xmlSecPtrListCreate"><type>xmlSecPtrListCreate</type></link> function.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListEmpty" role="function">
<title>xmlSecPtrListEmpty ()</title>
<indexterm zone="xmlSecPtrListEmpty"><primary>xmlSecPtrListEmpty</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListEmpty                  (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);</programlisting>
<para>
Remove all items from <parameter>list</parameter> (if any).
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListCopy" role="function">
<title>xmlSecPtrListCopy ()</title>
<indexterm zone="xmlSecPtrListCopy"><primary>xmlSecPtrListCopy</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecPtrListCopy                   (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> dst</parameter>,
                                                         <parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> src</parameter>);</programlisting>
<para>
Copies <parameter>src</parameter> list items to <parameter>dst</parameter> list using <link linkend="duplicateItem"><type>duplicateItem</type></link> method
of the list klass. If <link linkend="duplicateItem"><type>duplicateItem</type></link> method is NULL then
we jsut copy pointers to items.
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara>the pointer to destination list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara>the pointer to source list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListDuplicate" role="function">
<title>xmlSecPtrListDuplicate ()</title>
<indexterm zone="xmlSecPtrListDuplicate"><primary>xmlSecPtrListDuplicate</primary></indexterm>
<programlisting><link linkend="xmlSecPtrListPtr"><returnvalue>xmlSecPtrListPtr</returnvalue></link>    xmlSecPtrListDuplicate              (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);</programlisting>
<para>
Creates a new copy of <parameter>list</parameter> and all its items.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to newly allocated list or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListGetSize" role="function">
<title>xmlSecPtrListGetSize ()</title>
<indexterm zone="xmlSecPtrListGetSize"><primary>xmlSecPtrListGetSize</primary></indexterm>
<programlisting><link linkend="xmlSecSize"><returnvalue>xmlSecSize</returnvalue></link>          xmlSecPtrListGetSize                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>);</programlisting>
<para>
Gets list size.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the number of itmes in <parameter>list</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListGetItem" role="function">
<title>xmlSecPtrListGetItem ()</title>
<indexterm zone="xmlSecPtrListGetItem"><primary>xmlSecPtrListGetItem</primary></indexterm>
<programlisting><link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           xmlSecPtrListGetItem                (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);</programlisting>
<para>
Gets item from the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara>the item position.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the list item at position <parameter>pos</parameter> or NULL if <parameter>pos</parameter> is greater
than the number of items in the list or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListAdd" role="function">
<title>xmlSecPtrListAdd ()</title>
<indexterm zone="xmlSecPtrListAdd"><primary>xmlSecPtrListAdd</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecPtrListAdd                    (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> item</parameter>);</programlisting>
<para>
Adds <parameter>item</parameter> to the end of the <parameter>list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>item</parameter>&#160;:</term>
<listitem><simpara>the item.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListSet" role="function">
<title>xmlSecPtrListSet ()</title>
<indexterm zone="xmlSecPtrListSet"><primary>xmlSecPtrListSet</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecPtrListSet                    (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> item</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);</programlisting>
<para>
Sets the value of list item at position <parameter>pos</parameter>. The old value
is destroyed.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>item</parameter>&#160;:</term>
<listitem><simpara>the item.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara>the pos.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListRemove" role="function">
<title>xmlSecPtrListRemove ()</title>
<indexterm zone="xmlSecPtrListRemove"><primary>xmlSecPtrListRemove</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 xmlSecPtrListRemove                 (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);</programlisting>
<para>
Destroys list item at the position <parameter>pos</parameter> and sets it value to NULL.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara>the position.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListRemoveAndReturn" role="function">
<title>xmlSecPtrListRemoveAndReturn ()</title>
<indexterm zone="xmlSecPtrListRemoveAndReturn"><primary>xmlSecPtrListRemoveAndReturn</primary></indexterm>
<programlisting><link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           xmlSecPtrListRemoveAndReturn        (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> pos</parameter>);</programlisting>
<para>
Remove the list item at the position <parameter>pos</parameter> and return it back.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&#160;:</term>
<listitem><simpara>the position.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the pointer to the list item.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListDebugDump" role="function">
<title>xmlSecPtrListDebugDump ()</title>
<indexterm zone="xmlSecPtrListDebugDump"><primary>xmlSecPtrListDebugDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListDebugDump              (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints debug information about <parameter>list</parameter> to the <parameter>output</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListDebugXmlDump" role="function">
<title>xmlSecPtrListDebugXmlDump ()</title>
<indexterm zone="xmlSecPtrListDebugXmlDump"><primary>xmlSecPtrListDebugXmlDump</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                xmlSecPtrListDebugXmlDump           (<parameter><link linkend="xmlSecPtrList"><type>xmlSecPtrListPtr</type></link> list</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints debug information about <parameter>list</parameter> to the <parameter>output</parameter> in XML format.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListGetName" role="macro">
<title>xmlSecPtrListGetName()</title>
<indexterm zone="xmlSecPtrListGetName"><primary>xmlSecPtrListGetName</primary></indexterm>
<programlisting>#define             xmlSecPtrListGetName(list)</programlisting>
<para>
Macro. Returns lists's name.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the ponter to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListIsValid" role="macro">
<title>xmlSecPtrListIsValid()</title>
<indexterm zone="xmlSecPtrListIsValid"><primary>xmlSecPtrListIsValid</primary></indexterm>
<programlisting>#define             xmlSecPtrListIsValid(list)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is not NULL and <parameter>list</parameter>-&gt;id is not NULL
or 0 otherwise.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListCheckId" role="macro">
<title>xmlSecPtrListCheckId()</title>
<indexterm zone="xmlSecPtrListCheckId"><primary>xmlSecPtrListCheckId</primary></indexterm>
<programlisting>#define             xmlSecPtrListCheckId(list, dataId)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is valid and <parameter>list</parameter>'s id is equal to <parameter>dataId</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&#160;:</term>
<listitem><simpara>the list Id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListIdUnknown" role="macro">
<title>xmlSecPtrListIdUnknown</title>
<indexterm zone="xmlSecPtrListIdUnknown"><primary>xmlSecPtrListIdUnknown</primary></indexterm>
<programlisting>#define xmlSecPtrListIdUnknown                  NULL
</programlisting>
<para>
The "unknown" id.
</para></refsect2>
<refsect2 id="xmlSecPtrDuplicateItemMethod" role="function">
<title>xmlSecPtrDuplicateItemMethod ()</title>
<indexterm zone="xmlSecPtrDuplicateItemMethod"><primary>xmlSecPtrDuplicateItemMethod</primary></indexterm>
<programlisting><link linkend="xmlSecPtr"><returnvalue>xmlSecPtr</returnvalue></link>           (*xmlSecPtrDuplicateItemMethod)     (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>);</programlisting>
<para>
Duplicates item <parameter>ptr</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>the poinetr to list item.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> pointer to new item copy or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrDestroyItemMethod" role="function">
<title>xmlSecPtrDestroyItemMethod ()</title>
<indexterm zone="xmlSecPtrDestroyItemMethod"><primary>xmlSecPtrDestroyItemMethod</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*xmlSecPtrDestroyItemMethod)       (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>);</programlisting>
<para>
Destroys list item <parameter>ptr</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>the poinetr to list item.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrDebugDumpItemMethod" role="function">
<title>xmlSecPtrDebugDumpItemMethod ()</title>
<indexterm zone="xmlSecPtrDebugDumpItemMethod"><primary>xmlSecPtrDebugDumpItemMethod</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*xmlSecPtrDebugDumpItemMethod)     (<parameter><link linkend="xmlSec"><type>xmlSecPtr</type></link> ptr</parameter>,
                                                         <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>
Prints debug information about <parameter>item</parameter> to <parameter>output</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>the poinetr to list item.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>the output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListKlass" role="struct">
<title>struct xmlSecPtrListKlass</title>
<indexterm zone="xmlSecPtrListKlass"><primary>xmlSecPtrListKlass</primary></indexterm>
<programlisting>struct xmlSecPtrListKlass {
    const xmlChar*                      name;
    xmlSecPtrDuplicateItemMethod        duplicateItem;
    xmlSecPtrDestroyItemMethod          destroyItem;
    xmlSecPtrDebugDumpItemMethod        debugDumpItem;
    xmlSecPtrDebugDumpItemMethod        debugXmlDumpItem;
};
</programlisting>
<para>
List klass.
</para><variablelist role="struct">
<varlistentry><term>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecPtrListKlass.name">name</structfield>;</term>
<listitem><simpara>the list klass name.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecPtrDuplicateItemMethod"><type>xmlSecPtrDuplicateItemMethod</type></link>&#160;<structfield id="xmlSecPtrListKlass.duplicateItem">duplicateItem</structfield>;</term>
<listitem><simpara>the duplciate item method.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecPtrDestroyItemMethod"><type>xmlSecPtrDestroyItemMethod</type></link>&#160;<structfield id="xmlSecPtrListKlass.destroyItem">destroyItem</structfield>;</term>
<listitem><simpara>the destroy item method.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecPtrDebugDumpItemMethod"><type>xmlSecPtrDebugDumpItemMethod</type></link>&#160;<structfield id="xmlSecPtrListKlass.debugDumpItem">debugDumpItem</structfield>;</term>
<listitem><simpara>the debug dump item method.
</simpara></listitem>
</varlistentry>
<varlistentry><term><link linkend="xmlSecPtrDebugDumpItemMethod"><type>xmlSecPtrDebugDumpItemMethod</type></link>&#160;<structfield id="xmlSecPtrListKlass.debugXmlDumpItem">debugXmlDumpItem</structfield>;</term>
<listitem><simpara>the debug dump item in xml format method.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecPtrListKlassGetName" role="macro">
<title>xmlSecPtrListKlassGetName()</title>
<indexterm zone="xmlSecPtrListKlassGetName"><primary>xmlSecPtrListKlassGetName</primary></indexterm>
<programlisting>#define             xmlSecPtrListKlassGetName(klass)</programlisting>
<para>
Macro. Returns the list klass name.
</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&#160;:</term>
<listitem><simpara>the list klass.
2
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="xmlSecStringListId" role="macro">
<title>xmlSecStringListId</title>
<indexterm zone="xmlSecStringListId"><primary>xmlSecStringListId</primary></indexterm>
<programlisting>#define             xmlSecStringListId</programlisting>
<para>
Strings list klass.
</para></refsect2>
<refsect2 id="xmlSecStringListGetKlass" role="function">
<title>xmlSecStringListGetKlass ()</title>
<indexterm zone="xmlSecStringListGetKlass"><primary>xmlSecStringListGetKlass</primary></indexterm>
<programlisting><link linkend="xmlSecPtrListId"><returnvalue>xmlSecPtrListId</returnvalue></link>     xmlSecStringListGetKlass            (<parameter><type>void</type></parameter>);</programlisting>
<para>
The strins list class.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> strings list klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
