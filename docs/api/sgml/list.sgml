<refentry id="xmlsec-list">
<refmeta>
<refentrytitle>list</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>list</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSecPtr">xmlSecPtr</link>;
typedef     <link linkend="xmlSecPtrListId">xmlSecPtrListId</link>;
struct      <link linkend="xmlSecPtrList">xmlSecPtrList</link>;
<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <link linkend="xmlSecPtrListCreate">xmlSecPtrListCreate</link>        (<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);
<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <link linkend="xmlSecPtrListDuplicate">xmlSecPtrListDuplicate</link>     (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);
void        <link linkend="xmlSecPtrListDestroy">xmlSecPtrListDestroy</link>            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);
<link linkend="size-t">size_t</link>      <link linkend="xmlSecPtrListGetSize">xmlSecPtrListGetSize</link>            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);
<link linkend="xmlSecPtr">xmlSecPtr</link>   <link linkend="xmlSecPtrListGetItem">xmlSecPtrListGetItem</link>            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="size-t">size_t</link> pos);
int         <link linkend="xmlSecPtrListAdd">xmlSecPtrListAdd</link>                (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtr">xmlSecPtr</link> item);
int         <link linkend="xmlSecPtrListSet">xmlSecPtrListSet</link>                (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtr">xmlSecPtr</link> item,
                                             <link linkend="size-t">size_t</link> pos);
int         <link linkend="xmlSecPtrListRemove">xmlSecPtrListRemove</link>             (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="size-t">size_t</link> pos);
void        <link linkend="xmlSecPtrListDebugDump">xmlSecPtrListDebugDump</link>          (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecPtrListDebugXmlDump">xmlSecPtrListDebugXmlDump</link>       (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecPtrListGetName">xmlSecPtrListGetName</link>            (list)
#define     <link linkend="xmlSecPtrListIsValid">xmlSecPtrListIsValid</link>            (list)
#define     <link linkend="xmlSecPtrListCheckId">xmlSecPtrListCheckId</link>            (list, dataId)
#define     <link linkend="xmlSecPtrListIdUnknown">xmlSecPtrListIdUnknown</link>
<link linkend="xmlSecPtr">xmlSecPtr</link>   (<link linkend="xmlSecPtrDuplicateItemMethod">*xmlSecPtrDuplicateItemMethod</link>) (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr);
void        (<link linkend="xmlSecPtrDestroyItemMethod">*xmlSecPtrDestroyItemMethod</link>)   (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr);
void        (<link linkend="xmlSecPtrDebugDumpItemMethod">*xmlSecPtrDebugDumpItemMethod</link>) (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
struct      <link linkend="xmlSecPtrListKlass">xmlSecPtrListKlass</link>;
#define     <link linkend="xmlSecPtrListKlassGetName">xmlSecPtrListKlassGetName</link>       (klass)
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecPtr">xmlSecPtr</title>
<programlisting>typedef void*	xmlSecPtr;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListId">xmlSecPtrListId</title>
<programlisting>typedef const struct _xmlSecPtrListKlass	xmlSecPtrListKlass, *xmlSecPtrListId;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrList">struct xmlSecPtrList</title>
<programlisting>struct xmlSecPtrList {
    xmlSecPtrListId		id;        

    xmlSecPtr*			data;
    size_t			use;
    size_t			max;
    xmlSecAllocMode 		allocMode;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListCreate">xmlSecPtrListCreate ()</title>
<programlisting><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> xmlSecPtrListCreate        (<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDuplicate">xmlSecPtrListDuplicate ()</title>
<programlisting><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> xmlSecPtrListDuplicate     (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDestroy">xmlSecPtrListDestroy ()</title>
<programlisting>void        xmlSecPtrListDestroy            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetSize">xmlSecPtrListGetSize ()</title>
<programlisting><link linkend="size-t">size_t</link>      xmlSecPtrListGetSize            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetItem">xmlSecPtrListGetItem ()</title>
<programlisting><link linkend="xmlSecPtr">xmlSecPtr</link>   xmlSecPtrListGetItem            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="size-t">size_t</link> pos);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListAdd">xmlSecPtrListAdd ()</title>
<programlisting>int         xmlSecPtrListAdd                (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtr">xmlSecPtr</link> item);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>item</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListSet">xmlSecPtrListSet ()</title>
<programlisting>int         xmlSecPtrListSet                (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtr">xmlSecPtr</link> item,
                                             <link linkend="size-t">size_t</link> pos);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>item</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListRemove">xmlSecPtrListRemove ()</title>
<programlisting>int         xmlSecPtrListRemove             (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="size-t">size_t</link> pos);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>pos</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDebugDump">xmlSecPtrListDebugDump ()</title>
<programlisting>void        xmlSecPtrListDebugDump          (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDebugXmlDump">xmlSecPtrListDebugXmlDump ()</title>
<programlisting>void        xmlSecPtrListDebugXmlDump       (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetName">xmlSecPtrListGetName()</title>
<programlisting>#define     xmlSecPtrListGetName(list)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListIsValid">xmlSecPtrListIsValid()</title>
<programlisting>#define     xmlSecPtrListIsValid(list)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is not NULL and <parameter>list</parameter>-&gt;id is not NULL
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> the pointer to list.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListCheckId">xmlSecPtrListCheckId()</title>
<programlisting>#define     xmlSecPtrListCheckId(list, dataId)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is valid and <parameter>list</parameter>'s id is equal to <parameter>dataId</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry> the pointer to list.
</entry></row>
<row><entry align="right"><parameter>dataId</parameter>&nbsp;:</entry>
<entry> the list Id.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListIdUnknown">xmlSecPtrListIdUnknown</title>
<programlisting>#define xmlSecPtrListIdUnknown 			NULL
</programlisting>
<para>
The "unknown" id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDuplicateItemMethod">xmlSecPtrDuplicateItemMethod ()</title>
<programlisting><link linkend="xmlSecPtr">xmlSecPtr</link>   (*xmlSecPtrDuplicateItemMethod) (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ptr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDestroyItemMethod">xmlSecPtrDestroyItemMethod ()</title>
<programlisting>void        (*xmlSecPtrDestroyItemMethod)   (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ptr</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDebugDumpItemMethod">xmlSecPtrDebugDumpItemMethod ()</title>
<programlisting>void        (*xmlSecPtrDebugDumpItemMethod) (<link linkend="xmlSecPtr">xmlSecPtr</link> ptr,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ptr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListKlass">struct xmlSecPtrListKlass</title>
<programlisting>struct xmlSecPtrListKlass {
    const xmlChar*			name;
    xmlSecPtrDuplicateItemMethod	duplicateItem;
    xmlSecPtrDestroyItemMethod		destroyItem;
    xmlSecPtrDebugDumpItemMethod	debugDumpItem;
    xmlSecPtrDebugDumpItemMethod	debugXmlDumpItem;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListKlassGetName">xmlSecPtrListKlassGetName()</title>
<programlisting>#define     xmlSecPtrListKlassGetName(klass)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>klass</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
