<refentry id="xmlsec-list">
<refmeta>
<refentrytitle>list</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>list</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



struct      <link linkend="xmlSecPtrList">xmlSecPtrList</link>;
void        <link linkend="xmlSecPtrListSetDefaultAllocMode">xmlSecPtrListSetDefaultAllocMode</link>
                                            (<link linkend="xmlSecAllocMode">xmlSecAllocMode</link> defAllocMode,
                                             <link linkend="xmlSecSize">xmlSecSize</link> defInitialSize);
int         <link linkend="xmlSecPtrListInitialize">xmlSecPtrListInitialize</link>         (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);
void        <link linkend="xmlSecPtrListFinalize">xmlSecPtrListFinalize</link>           (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);
<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> <link linkend="xmlSecPtrListCreate">xmlSecPtrListCreate</link>        (<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);
void        <link linkend="xmlSecPtrListDestroy">xmlSecPtrListDestroy</link>            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);
void        <link linkend="xmlSecPtrListEmpty">xmlSecPtrListEmpty</link>              (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);
int         <link linkend="xmlSecPtrListCopy">xmlSecPtrListCopy</link>               (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> dst,
                                             <link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> src);
<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <link linkend="xmlSecPtrListDuplicate">xmlSecPtrListDuplicate</link>     (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);
<link linkend="xmlSecSize">xmlSecSize</link>  <link linkend="xmlSecPtrListGetSize">xmlSecPtrListGetSize</link>            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);
<link linkend="xmlSecPtr">xmlSecPtr</link>   <link linkend="xmlSecPtrListGetItem">xmlSecPtrListGetItem</link>            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);
int         <link linkend="xmlSecPtrListAdd">xmlSecPtrListAdd</link>                (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSec">xmlSecPtr</link> item);
int         <link linkend="xmlSecPtrListSet">xmlSecPtrListSet</link>                (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSec">xmlSecPtr</link> item,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);
int         <link linkend="xmlSecPtrListRemove">xmlSecPtrListRemove</link>             (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);
void        <link linkend="xmlSecPtrListDebugDump">xmlSecPtrListDebugDump</link>          (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecPtrListDebugXmlDump">xmlSecPtrListDebugXmlDump</link>       (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecPtrListGetName">xmlSecPtrListGetName</link>            (list)
#define     <link linkend="xmlSecPtrListIsValid">xmlSecPtrListIsValid</link>            (list)
#define     <link linkend="xmlSecPtrListCheckId">xmlSecPtrListCheckId</link>            (list, dataId)
#define     <link linkend="xmlSecPtrListIdUnknown">xmlSecPtrListIdUnknown</link>
<link linkend="xmlSecPtr">xmlSecPtr</link>   (<link linkend="xmlSecPtrDuplicateItemMethod">*xmlSecPtrDuplicateItemMethod</link>) (<link linkend="xmlSec">xmlSecPtr</link> ptr);
void        (<link linkend="xmlSecPtrDestroyItemMethod">*xmlSecPtrDestroyItemMethod</link>)   (<link linkend="xmlSec">xmlSecPtr</link> ptr);
void        (<link linkend="xmlSecPtrDebugDumpItemMethod">*xmlSecPtrDebugDumpItemMethod</link>) (<link linkend="xmlSec">xmlSecPtr</link> ptr,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
struct      <link linkend="xmlSecPtrListKlass">xmlSecPtrListKlass</link>;
#define     <link linkend="xmlSecPtrListKlassGetName">xmlSecPtrListKlassGetName</link>       (klass)
#define     <link linkend="xmlSecStringListId">xmlSecStringListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecStringListGetKlass">xmlSecStringListGetKlass</link>    (void);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecPtrList">struct xmlSecPtrList</title>
<programlisting>struct xmlSecPtrList {

    xmlSecPtrListId		id;        

    xmlSecPtr*			data;
    xmlSecSize			use;
    xmlSecSize			max;
    xmlSecAllocMode 		allocMode;
};
</programlisting>
<para>
The pointers list.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <structfield>id</structfield></term>
<listitem><simpara>				the list items description.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSec">xmlSecPtr</link> *<structfield>data</structfield></term>
<listitem><simpara>			the list data.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>use</structfield></term>
<listitem><simpara>			the current list size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>max</structfield></term>
<listitem><simpara>			the max (allocated) list size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecAllocMode">xmlSecAllocMode</link> <structfield>allocMode</structfield></term>
<listitem><simpara>			the memory allocation mode.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListSetDefaultAllocMode">xmlSecPtrListSetDefaultAllocMode ()</title>
<programlisting>void        xmlSecPtrListSetDefaultAllocMode
                                            (<link linkend="xmlSecAllocMode">xmlSecAllocMode</link> defAllocMode,
                                             <link linkend="xmlSecSize">xmlSecSize</link> defInitialSize);</programlisting>
<para>
Sets new default allocation mode and minimal initial list size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>defAllocMode</parameter>&nbsp;:</term>
<listitem><simpara>	the new default memory allocation mode.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>defInitialSize</parameter>&nbsp;:</term>
<listitem><simpara>	the new default minimal initial size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListInitialize">xmlSecPtrListInitialize ()</title>
<programlisting>int         xmlSecPtrListInitialize         (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);</programlisting>
<para>
Initializes the list of given klass. Caller is responsible 
for cleaning up by calling <link linkend="xmlSecPtrListFinalize">xmlSecPtrListFinalize</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>			the list klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListFinalize">xmlSecPtrListFinalize ()</title>
<programlisting>void        xmlSecPtrListFinalize           (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);</programlisting>
<para>
Cleans up the list initialized with <link linkend="xmlSecPtrListInitialize">xmlSecPtrListInitialize</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListCreate">xmlSecPtrListCreate ()</title>
<programlisting><link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> xmlSecPtrListCreate        (<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> id);</programlisting>
<para>
Creates new list object. Caller is responsible for freeing returned list
by calling <link linkend="xmlSecPtrListDestroy">xmlSecPtrListDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&nbsp;:</term>
<listitem><simpara>			the list klass.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated list or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDestroy">xmlSecPtrListDestroy ()</title>
<programlisting>void        xmlSecPtrListDestroy            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);</programlisting>
<para>
Destroys <parameter>list</parameter> created with <link linkend="xmlSecPtrListCreate">xmlSecPtrListCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListEmpty">xmlSecPtrListEmpty ()</title>
<programlisting>void        xmlSecPtrListEmpty              (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);</programlisting>
<para>
Remove all items from <parameter>list</parameter> (if any).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListCopy">xmlSecPtrListCopy ()</title>
<programlisting>int         xmlSecPtrListCopy               (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> dst,
                                             <link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> src);</programlisting>
<para>
Copies <parameter>src</parameter> list items to <parameter>dst</parameter> list using <link linkend="duplicateItem">duplicateItem</link> method
of the list klass. If <link linkend="duplicateItem">duplicateItem</link> method is NULL then 
we jsut copy pointers to items.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to destination list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to source list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDuplicate">xmlSecPtrListDuplicate ()</title>
<programlisting><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> xmlSecPtrListDuplicate     (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);</programlisting>
<para>
Creates a new copy of <parameter>list</parameter> and all its items.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated list or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetSize">xmlSecPtrListGetSize ()</title>
<programlisting><link linkend="xmlSecSize">xmlSecSize</link>  xmlSecPtrListGetSize            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list);</programlisting>
<para>
Gets list size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the number of itmes in <parameter>list</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetItem">xmlSecPtrListGetItem ()</title>
<programlisting><link linkend="xmlSecPtr">xmlSecPtr</link>   xmlSecPtrListGetItem            (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);</programlisting>
<para>
Gets item from the list.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara>		the item position.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the list item at position <parameter>pos</parameter> or NULL if <parameter>pos</parameter> is greater
than the number of items in the list or an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListAdd">xmlSecPtrListAdd ()</title>
<programlisting>int         xmlSecPtrListAdd                (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSec">xmlSecPtr</link> item);</programlisting>
<para>
Adds <parameter>item</parameter> to the end of the <parameter>list</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>item</parameter>&nbsp;:</term>
<listitem><simpara>		the item.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListSet">xmlSecPtrListSet ()</title>
<programlisting>int         xmlSecPtrListSet                (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSec">xmlSecPtr</link> item,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);</programlisting>
<para>
Sets the value of list item at position <parameter>pos</parameter>. The old value
is destroyed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>item</parameter>&nbsp;:</term>
<listitem><simpara>		the item.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara>		the pos.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListRemove">xmlSecPtrListRemove ()</title>
<programlisting>int         xmlSecPtrListRemove             (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecSize">xmlSecSize</link> pos);</programlisting>
<para>
Destroys list item at the position <parameter>pos</parameter> and sets it value to NULL.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara>		the position.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDebugDump">xmlSecPtrListDebugDump ()</title>
<programlisting>void        xmlSecPtrListDebugDump          (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>list</parameter> to the <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListDebugXmlDump">xmlSecPtrListDebugXmlDump ()</title>
<programlisting>void        xmlSecPtrListDebugXmlDump       (<link linkend="xmlSecPtrList">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>list</parameter> to the <parameter>output</parameter> in XML format.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListGetName">xmlSecPtrListGetName()</title>
<programlisting>#define     xmlSecPtrListGetName(list)</programlisting>
<para>
Macro. Returns lists's name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> 		the ponter to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListIsValid">xmlSecPtrListIsValid()</title>
<programlisting>#define     xmlSecPtrListIsValid(list)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is not NULL and <parameter>list</parameter>-&gt;id is not NULL
or 0 otherwise.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListCheckId">xmlSecPtrListCheckId()</title>
<programlisting>#define     xmlSecPtrListCheckId(list, dataId)</programlisting>
<para>
Macro. Returns 1 if <parameter>list</parameter> is valid and <parameter>list</parameter>'s id is equal to <parameter>dataId</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataId</parameter>&nbsp;:</term>
<listitem><simpara> 		the list Id.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListIdUnknown">xmlSecPtrListIdUnknown</title>
<programlisting>#define xmlSecPtrListIdUnknown 			NULL
</programlisting>
<para>
The "unknown" id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDuplicateItemMethod">xmlSecPtrDuplicateItemMethod ()</title>
<programlisting><link linkend="xmlSecPtr">xmlSecPtr</link>   (*xmlSecPtrDuplicateItemMethod) (<link linkend="xmlSec">xmlSecPtr</link> ptr);</programlisting>
<para>
Duplicates item <parameter>ptr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>		the poinetr to list item.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to new item copy or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDestroyItemMethod">xmlSecPtrDestroyItemMethod ()</title>
<programlisting>void        (*xmlSecPtrDestroyItemMethod)   (<link linkend="xmlSec">xmlSecPtr</link> ptr);</programlisting>
<para>
Destroys list item <parameter>ptr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>		the poinetr to list item.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrDebugDumpItemMethod">xmlSecPtrDebugDumpItemMethod ()</title>
<programlisting>void        (*xmlSecPtrDebugDumpItemMethod) (<link linkend="xmlSec">xmlSecPtr</link> ptr,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints debug information about <parameter>item</parameter> to <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&nbsp;:</term>
<listitem><simpara>		the poinetr to list item.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara>		the output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListKlass">struct xmlSecPtrListKlass</title>
<programlisting>struct xmlSecPtrListKlass {

    const xmlChar*			name;
    xmlSecPtrDuplicateItemMethod	duplicateItem;
    xmlSecPtrDestroyItemMethod		destroyItem;
    xmlSecPtrDebugDumpItemMethod	debugDumpItem;
    xmlSecPtrDebugDumpItemMethod	debugXmlDumpItem;
};
</programlisting>
<para>
List klass.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term>const <link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></term>
<listitem><simpara>		the list klass name.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrDuplicateItemMethod">xmlSecPtrDuplicateItemMethod</link> <structfield>duplicateItem</structfield></term>
<listitem><simpara>	the duplciate item method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrDestroyItemMethod">xmlSecPtrDestroyItemMethod</link> <structfield>destroyItem</structfield></term>
<listitem><simpara>	the destroy item method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrDebugDumpItemMethod">xmlSecPtrDebugDumpItemMethod</link> <structfield>debugDumpItem</structfield></term>
<listitem><simpara>	the debug dump item method.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecPtrDebugDumpItemMethod">xmlSecPtrDebugDumpItemMethod</link> <structfield>debugXmlDumpItem</structfield></term>
<listitem><simpara>	the debug dump item in xml format method.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecPtrListKlassGetName">xmlSecPtrListKlassGetName()</title>
<programlisting>#define     xmlSecPtrListKlassGetName(klass)</programlisting>
<para>
Macro. Returns the list klass name.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>klass</parameter>&nbsp;:</term>
<listitem><simpara>		the list klass.
2
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecStringListId">xmlSecStringListId</title>
<programlisting>#define     xmlSecStringListId</programlisting>
<para>
Strings list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecStringListGetKlass">xmlSecStringListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecStringListGetKlass    (void);</programlisting>
<para>
The strins list class.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>strings list klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
