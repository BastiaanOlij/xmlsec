<refentry id="xmlsec-openssl-app">
<refmeta>
<refentrytitle role="top_of_page">app</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC-OPENSSL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>app</refname>
<refpurpose>Application functions implementation for OpenSSL.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppInit">xmlSecOpenSSLAppInit</link>            (const <link linkend="char">char</link> *config);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppShutdown">xmlSecOpenSSLAppShutdown</link>        (void);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit">xmlSecOpenSSLAppDefaultKeysMngrInit</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrAdoptKey">xmlSecOpenSSLAppDefaultKeysMngrAdoptKey</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrLoad">xmlSecOpenSSLAppDefaultKeysMngrLoad</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *uri);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppDefaultKeysMngrSave">xmlSecOpenSSLAppDefaultKeysMngrSave</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoad">xmlSecOpenSSLAppKeysMngrCertLoad</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoadMemory">xmlSecOpenSSLAppKeysMngrCertLoadMemory</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeysMngrCertLoadBIO">xmlSecOpenSSLAppKeysMngrCertLoadBIO</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeysMngrAddCertsPath">xmlSecOpenSSLAppKeysMngrAddCertsPath</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *path);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeysMngrAddCertsFile">xmlSecOpenSSLAppKeysMngrAddCertsFile</link>
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *file);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoad">xmlSecOpenSSLAppKeyLoad</link>        (const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoadMemory">xmlSecOpenSSLAppKeyLoadMemory</link>  (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyLoadBIO">xmlSecOpenSSLAppKeyLoadBIO</link>     (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12Load">xmlSecOpenSSLAppPkcs12Load</link>     (const <link linkend="char">char</link> *filename,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12LoadMemory">xmlSecOpenSSLAppPkcs12LoadMemory</link>
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppPkcs12LoadBIO">xmlSecOpenSSLAppPkcs12LoadBIO</link>  (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeyCertLoad">xmlSecOpenSSLAppKeyCertLoad</link>     (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeyCertLoadMemory">xmlSecOpenSSLAppKeyCertLoadMemory</link>
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="int">int</link>         <link linkend="xmlSecOpenSSLAppKeyCertLoadBIO">xmlSecOpenSSLAppKeyCertLoadBIO</link>  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="xmlSecKey">xmlSecKeyPtr</link> <link linkend="xmlSecOpenSSLAppKeyFromCertLoadBIO">xmlSecOpenSSLAppKeyFromCertLoadBIO</link>
                                            (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);
<link linkend="void">void</link>*       <link linkend="xmlSecOpenSSLAppGetDefaultPwdCallback">xmlSecOpenSSLAppGetDefaultPwdCallback</link>
                                            (void);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Application functions implementation for OpenSSL.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppInit" role="function">xmlSecOpenSSLAppInit ()</title>
<indexterm><primary>xmlSecOpenSSLAppInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppInit            (const <link linkend="char">char</link> *config);</programlisting>
<para>
General crypto engine initialization. This function is used
by XMLSec command line utility and called before
<parameter>xmlSecInit</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>config</parameter>&nbsp;:</term>
<listitem><simpara>             the path to certs.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppShutdown" role="function">xmlSecOpenSSLAppShutdown ()</title>
<indexterm><primary>xmlSecOpenSSLAppShutdown</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppShutdown        (void);</programlisting>
<para>
General crypto engine shutdown. This function is used
by XMLSec command line utility and called after
<parameter>xmlSecShutdown</parameter> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrInit" role="function">xmlSecOpenSSLAppDefaultKeysMngrInit ()</title>
<indexterm><primary>xmlSecOpenSSLAppDefaultKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppDefaultKeysMngrInit
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Initializes <parameter>mngr</parameter> with simple keys store <link linkend="xmlSecSimpleKeysStoreId"><type>xmlSecSimpleKeysStoreId</type></link>
and a default OpenSSL crypto key data stores.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrAdoptKey" role="function">xmlSecOpenSSLAppDefaultKeysMngrAdoptKey ()</title>
<indexterm><primary>xmlSecOpenSSLAppDefaultKeysMngrAdoptKey</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppDefaultKeysMngrAdoptKey
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="xmlSecKey">xmlSecKeyPtr</link> key);</programlisting>
<para>
Adds <parameter>key</parameter> to the keys manager <parameter>mngr</parameter> created with <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit"><type>xmlSecOpenSSLAppDefaultKeysMngrInit</type></link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrLoad" role="function">xmlSecOpenSSLAppDefaultKeysMngrLoad ()</title>
<indexterm><primary>xmlSecOpenSSLAppDefaultKeysMngrLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppDefaultKeysMngrLoad
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *uri);</programlisting>
<para>
Loads XML keys file from <parameter>uri</parameter> to the keys manager <parameter>mngr</parameter> created
with <link linkend="xmlSecOpenSSLAppDefaultKeysMngrInit"><type>xmlSecOpenSSLAppDefaultKeysMngrInit</type></link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uri</parameter>&nbsp;:</term>
<listitem><simpara>                the uri.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppDefaultKeysMngrSave" role="function">xmlSecOpenSSLAppDefaultKeysMngrSave ()</title>
<indexterm><primary>xmlSecOpenSSLAppDefaultKeysMngrSave</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppDefaultKeysMngrSave
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Saves keys from <parameter>mngr</parameter> to  XML keys file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>           the destination filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>               the type of keys to save (public/private/symmetric).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoad" role="function">xmlSecOpenSSLAppKeysMngrCertLoad ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeysMngrCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeysMngrCertLoad
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from <parameter>filename</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>           the certificate file.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>               the flag that indicates is the certificate in <parameter>filename</parameter>
                     trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoadMemory" role="function">xmlSecOpenSSLAppKeysMngrCertLoadMemory ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeysMngrCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeysMngrCertLoadMemory
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from binary buffer <parameter>data</parameter> and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>           the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>               the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrCertLoadBIO" role="function">xmlSecOpenSSLAppKeysMngrCertLoadBIO ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeysMngrCertLoadBIO</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeysMngrCertLoadBIO
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             <link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             <link linkend="xmlSecKeyDataType">xmlSecKeyDataType</link> type);</programlisting>
<para>
Reads cert from an OpenSSL BIO object and adds to the list of trusted or known
untrusted certs in <parameter>store</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>                the certificate BIO.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara>               the flag that indicates is the certificate trusted or not.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrAddCertsPath" role="function">xmlSecOpenSSLAppKeysMngrAddCertsPath ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeysMngrAddCertsPath</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeysMngrAddCertsPath
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *path);</programlisting>
<para>
Reads cert from <parameter>path</parameter> and adds to the list of trusted certificates.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>               the path to trusted certificates.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeysMngrAddCertsFile" role="function">xmlSecOpenSSLAppKeysMngrAddCertsFile ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeysMngrAddCertsFile</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeysMngrAddCertsFile
                                            (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr,
                                             const <link linkend="char">char</link> *file);</programlisting>
<para>
Reads certs from <parameter>file</parameter> and adds to the list of trusted certificates.
It is possible for <parameter>file</parameter> to contain multiple certs.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>               the file containing trusted certificates.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoad" role="function">xmlSecOpenSSLAppKeyLoad ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyLoad</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoad        (const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the a file.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>           the key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoadMemory" role="function">xmlSecOpenSSLAppKeyLoadMemory ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyLoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoadMemory  (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the memory buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the binary key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>           the size of binary key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyLoadBIO" role="function">xmlSecOpenSSLAppKeyLoadBIO ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyLoadBIO</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyLoadBIO     (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key from the an OpenSSL BIO object.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>                the key BIO.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the key file format.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the key file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the key password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12Load" role="function">xmlSecOpenSSLAppPkcs12Load ()</title>
<indexterm><primary>xmlSecOpenSSLAppPkcs12Load</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12Load     (const <link linkend="char">char</link> *filename,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 file.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>           the PKCS12 key filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12LoadMemory" role="function">xmlSecOpenSSLAppPkcs12LoadMemory ()</title>
<indexterm><primary>xmlSecOpenSSLAppPkcs12LoadMemory</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12LoadMemory
                                            (const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in memory buffer.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the PKCS12 binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>           the PKCS12 binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppPkcs12LoadBIO" role="function">xmlSecOpenSSLAppPkcs12LoadBIO ()</title>
<indexterm><primary>xmlSecOpenSSLAppPkcs12LoadBIO</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppPkcs12LoadBIO  (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             const <link linkend="char">char</link> *pwd,
                                             <link linkend="void">void</link> *pwdCallback,
                                             <link linkend="void">void</link> *pwdCallbackCtx);</programlisting>
<para>
Reads key and all associated certificates from the PKCS12 data in an OpenSSL BIO object.
For uniformity, call xmlSecOpenSSLAppKeyLoad instead of this function. Pass
in format=xmlSecKeyDataFormatPkcs12.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>                the PKCS12 key bio.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwd</parameter>&nbsp;:</term>
<listitem><simpara>                the PKCS12 file password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallback</parameter>&nbsp;:</term>
<listitem><simpara>        the password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pwdCallbackCtx</parameter>&nbsp;:</term>
<listitem><simpara>     the user context for password callback.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoad" role="function">xmlSecOpenSSLAppKeyCertLoad ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyCertLoad</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeyCertLoad     (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="char">char</link> *filename,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from $<parameter>filename</parameter> and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filename</parameter>&nbsp;:</term>
<listitem><simpara>           the certificate filename.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoadMemory" role="function">xmlSecOpenSSLAppKeyCertLoadMemory ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyCertLoadMemory</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeyCertLoadMemory
                                            (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> dataSize,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the certificate binary data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dataSize</parameter>&nbsp;:</term>
<listitem><simpara>           the certificate binary data size.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyCertLoadBIO" role="function">xmlSecOpenSSLAppKeyCertLoadBIO ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyCertLoadBIO</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecOpenSSLAppKeyCertLoadBIO  (<link linkend="xmlSecKey">xmlSecKeyPtr</link> key,
                                             <link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Reads the certificate from memory buffer and adds it to key.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>                the certificate bio.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the certificate file format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppKeyFromCertLoadBIO" role="function">xmlSecOpenSSLAppKeyFromCertLoadBIO ()</title>
<indexterm><primary>xmlSecOpenSSLAppKeyFromCertLoadBIO</primary></indexterm><programlisting><link linkend="xmlSecKey">xmlSecKeyPtr</link> xmlSecOpenSSLAppKeyFromCertLoadBIO
                                            (<link linkend="BIO:CAPS">BIO</link> *bio,
                                             <link linkend="xmlSecKeyDataFormat">xmlSecKeyDataFormat</link> format);</programlisting>
<para>
Loads public key from cert.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>bio</parameter>&nbsp;:</term>
<listitem><simpara>                the BIO.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&nbsp;:</term>
<listitem><simpara>             the cert format.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to key or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLAppGetDefaultPwdCallback" role="function">xmlSecOpenSSLAppGetDefaultPwdCallback ()</title>
<indexterm><primary>xmlSecOpenSSLAppGetDefaultPwdCallback</primary></indexterm><programlisting><link linkend="void">void</link>*       xmlSecOpenSSLAppGetDefaultPwdCallback
                                            (void);</programlisting>
<para>
Gets default password callback.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> default password callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
