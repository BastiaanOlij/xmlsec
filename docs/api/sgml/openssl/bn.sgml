<refentry id="xmlsec-openssl-bn">
<refmeta>
<refentrytitle>bn</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC-OPENSSL Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bn</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



<link linkend="BIGNUM-CAPS">BIGNUM</link>*     <link linkend="xmlSecOpenSSLNodeGetBNValue">xmlSecOpenSSLNodeGetBNValue</link>     (const <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="BIGNUM-CAPS">BIGNUM</link> **a);
int         <link linkend="xmlSecOpenSSLNodeSetBNValue">xmlSecOpenSSLNodeSetBNValue</link>     (<link linkend="xmlNode">xmlNodePtr</link> cur,
                                             const <link linkend="BIGNUM-CAPS">BIGNUM</link> *a,
                                             int addLineBreaks);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecOpenSSLNodeGetBNValue">xmlSecOpenSSLNodeGetBNValue ()</title>
<programlisting><link linkend="BIGNUM-CAPS">BIGNUM</link>*     xmlSecOpenSSLNodeGetBNValue     (const <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="BIGNUM-CAPS">BIGNUM</link> **a);</programlisting>
<para>
Converts the node content from CryptoBinary format 
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-CryptoBinary">sec-CryptoBinary</link>) 
to a BIGNUM. If no BIGNUM buffer provided then a new
BIGNUM is created (caller is responsible for freeing it).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara> the poitner to an XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> the BIGNUM buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a pointer to BIGNUM produced from CryptoBinary string
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecOpenSSLNodeSetBNValue">xmlSecOpenSSLNodeSetBNValue ()</title>
<programlisting>int         xmlSecOpenSSLNodeSetBNValue     (<link linkend="xmlNode">xmlNodePtr</link> cur,
                                             const <link linkend="BIGNUM-CAPS">BIGNUM</link> *a,
                                             int addLineBreaks);</programlisting>
<para>
Converts BIGNUM to CryptoBinary string
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-CryptoBinary">sec-CryptoBinary</link>) 
and sets it as the content of the given node. If the 
addLineBreaks is set then line breaks are added 
before and after the CryptoBinary string.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara> the pointer to an XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>a</parameter>&nbsp;:</term>
<listitem><simpara> the BIGNUM.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>addLineBreaks</parameter>&nbsp;:</term>
<listitem><simpara> if the flag is equal to 1 then 
	linebreaks will be added before and after
	new buffer content.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or -1 otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
