<refentry id="xmlsec-keysmngr">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-keysmngr.top_of_page">keysmngr</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>keysmngr</refname>
<refpurpose>Keys manager object support.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-keysmngr.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="xmlSecKeysMngr"><returnvalue>xmlSecKeysMngrPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrCreate">xmlSecKeysMngrCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrDestroy">xmlSecKeysMngrDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrFindKey">xmlSecKeysMngrFindKey</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrAdoptKeysStore">xmlSecKeysMngrAdoptKeysStore</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyStore"><returnvalue>xmlSecKeyStorePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrGetKeysStore">xmlSecKeysMngrGetKeysStore</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrAdoptDataStore">xmlSecKeysMngrAdoptDataStore</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrGetDataStore">xmlSecKeysMngrGetDataStore</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecGetKeyCallback">*xmlSecGetKeyCallback</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeysMngrGetKey">xmlSecKeysMngrGetKey</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyStore"><returnvalue>xmlSecKeyStorePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyStoreCreate">xmlSecKeyStoreCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyStoreDestroy">xmlSecKeyStoreDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecKeyStoreFindKey">xmlSecKeyStoreFindKey</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreGetName">xmlSecKeyStoreGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreIsValid">xmlSecKeyStoreIsValid</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreCheckId">xmlSecKeyStoreCheckId</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreCheckSize">xmlSecKeyStoreCheckSize</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreIdUnknown">xmlSecKeyStoreIdUnknown</link></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyStoreInitializeMethod">*xmlSecKeyStoreInitializeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyStoreFinalizeMethod">*xmlSecKeyStoreFinalizeMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecKeyStoreFindKeyMethod">*xmlSecKeyStoreFindKeyMethod</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecKeyStoreKlassGetName">xmlSecKeyStoreKlassGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecKeyStoreId"><returnvalue>xmlSecKeyStoreId</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreGetKlass">xmlSecSimpleKeysStoreGetKlass</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreAdoptKey">xmlSecSimpleKeysStoreAdoptKey</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreLoad">xmlSecSimpleKeysStoreLoad</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreSave">xmlSecSimpleKeysStoreSave</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreGetKeys">xmlSecSimpleKeysStoreGetKeys</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-keysmngr.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeysMngr">xmlSecKeysMngr</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyStore">xmlSecKeyStore</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecKeyStoreKlass">xmlSecKeyStoreKlass</link></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecSimpleKeysStoreId">xmlSecSimpleKeysStoreId</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-keysmngr.description" role="desc">
<title role="desc.title">Description</title>
<para>
Keys manager object support.
</para>

</refsect1>
<refsect1 id="xmlsec-keysmngr.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecKeysMngrCreate" role="function">
<title>xmlSecKeysMngrCreate&#160;()</title>
<indexterm zone="xmlSecKeysMngrCreate"><primary>xmlSecKeysMngrCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeysMngr"><returnvalue>xmlSecKeysMngrPtr</returnvalue></link>
xmlSecKeysMngrCreate (<parameter><type>void</type></parameter>);</programlisting>
<para>Creates new keys manager. Caller is responsible for freeing it with
<link linkend="xmlSecKeysMngrDestroy"><type>xmlSecKeysMngrDestroy</type></link> function.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> the pointer to newly allocated keys manager or NULL if
an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrDestroy" role="function">
<title>xmlSecKeysMngrDestroy&#160;()</title>
<indexterm zone="xmlSecKeysMngrDestroy"><primary>xmlSecKeysMngrDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeysMngrDestroy (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>);</programlisting>
<para>Destroys keys manager created with <link linkend="xmlSecKeysMngrCreate"><type>xmlSecKeysMngrCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrFindKey" role="function">
<title>xmlSecKeysMngrFindKey&#160;()</title>
<indexterm zone="xmlSecKeysMngrFindKey"><primary>xmlSecKeysMngrFindKey</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
xmlSecKeysMngrFindKey (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>,
                       <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                       <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Lookups key in the keys manager keys store. The caller is responsible
for destroying the returned key using <link linkend="xmlSecKeyDestroy"><type>xmlSecKeyDestroy</type></link> method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the desired key name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to a key or NULL if key is not found or an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrAdoptKeysStore" role="function">
<title>xmlSecKeysMngrAdoptKeysStore&#160;()</title>
<indexterm zone="xmlSecKeysMngrAdoptKeysStore"><primary>xmlSecKeysMngrAdoptKeysStore</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeysMngrAdoptKeysStore (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>,
                              <parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>);</programlisting>
<para>Adopts keys store in the keys manager <parameter>mngr</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrGetKeysStore" role="function">
<title>xmlSecKeysMngrGetKeysStore&#160;()</title>
<indexterm zone="xmlSecKeysMngrGetKeysStore"><primary>xmlSecKeysMngrGetKeysStore</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyStore"><returnvalue>xmlSecKeyStorePtr</returnvalue></link>
xmlSecKeysMngrGetKeysStore (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>);</programlisting>
<para>Gets the keys store.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the keys store in the keys manager <parameter>mngr</parameter>
or NULL if
there is no store or an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrAdoptDataStore" role="function">
<title>xmlSecKeysMngrAdoptDataStore&#160;()</title>
<indexterm zone="xmlSecKeysMngrAdoptDataStore"><primary>xmlSecKeysMngrAdoptDataStore</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecKeysMngrAdoptDataStore (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>,
                              <parameter><link linkend="xmlSecKeyDataStore"><type>xmlSecKeyDataStorePtr</type></link> store</parameter>);</programlisting>
<para>Adopts data store in the keys manager.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to data store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrGetDataStore" role="function">
<title>xmlSecKeysMngrGetDataStore&#160;()</title>
<indexterm zone="xmlSecKeysMngrGetDataStore"><primary>xmlSecKeysMngrGetDataStore</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyDataStore"><returnvalue>xmlSecKeyDataStorePtr</returnvalue></link>
xmlSecKeysMngrGetDataStore (<parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> mngr</parameter>,
                            <parameter><link linkend="xmlSecKeyDataStoreId"><type>xmlSecKeyDataStoreId</type></link> id</parameter>);</programlisting>
<para>Lookups the data store of given klass <parameter>id</parameter>
 in the keys manager.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>mngr</para></entry>
<entry role="parameter_description"><para>the pointer to keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the desired data store klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to data store or NULL if it is not found or an error
occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecGetKeyCallback" role="function">
<title>xmlSecGetKeyCallback&#160;()</title>
<indexterm zone="xmlSecGetKeyCallback"><primary>xmlSecGetKeyCallback</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecGetKeyCallback<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> keyInfoNode</parameter>,
                         <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads the &lt;dsig:KeyInfo/> node <parameter>keyInfoNode</parameter>
 and extracts the key.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoNode</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to key or NULL if the key is not found or
an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeysMngrGetKey" role="function">
<title>xmlSecKeysMngrGetKey&#160;()</title>
<indexterm zone="xmlSecKeysMngrGetKey"><primary>xmlSecKeysMngrGetKey</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
xmlSecKeysMngrGetKey (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> keyInfoNode</parameter>,
                      <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Reads the &lt;dsig:KeyInfo/> node <parameter>keyInfoNode</parameter>
 and extracts the key.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>keyInfoNode</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to key or NULL if the key is not found or
an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreCreate" role="function">
<title>xmlSecKeyStoreCreate&#160;()</title>
<indexterm zone="xmlSecKeyStoreCreate"><primary>xmlSecKeyStoreCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyStore"><returnvalue>xmlSecKeyStorePtr</returnvalue></link>
xmlSecKeyStoreCreate (<parameter><link linkend="xmlSecKeyStoreId"><type>xmlSecKeyStoreId</type></link> id</parameter>);</programlisting>
<para>Creates new store of the specified klass <parameter>klass</parameter>
. Caller is responsible
for freeing the returned store by calling <link linkend="xmlSecKeyStoreDestroy"><type>xmlSecKeyStoreDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>id</para></entry>
<entry role="parameter_description"><para>the key store klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to newly allocated keys store or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreDestroy" role="function">
<title>xmlSecKeyStoreDestroy&#160;()</title>
<indexterm zone="xmlSecKeyStoreDestroy"><primary>xmlSecKeyStoreDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecKeyStoreDestroy (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>);</programlisting>
<para>Destroys the store created with <link linkend="xmlSecKeyStoreCreate"><type>xmlSecKeyStoreCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreFindKey" role="function">
<title>xmlSecKeyStoreFindKey&#160;()</title>
<indexterm zone="xmlSecKeyStoreFindKey"><primary>xmlSecKeyStoreFindKey</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
xmlSecKeyStoreFindKey (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>,
                       <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                       <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Lookups key in the store. The caller is responsible for destroying
the returned key using <link linkend="xmlSecKeyDestroy"><type>xmlSecKeyDestroy</type></link> method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the desired key name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to &lt;dsig:KeyInfo/> node processing context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to a key or NULL if key is not found or an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreGetName" role="macro">
<title>xmlSecKeyStoreGetName()</title>
<indexterm zone="xmlSecKeyStoreGetName"><primary>xmlSecKeyStoreGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyStoreGetName(store)</programlisting>
<para>Macro. Returns key store name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreIsValid" role="macro">
<title>xmlSecKeyStoreIsValid()</title>
<indexterm zone="xmlSecKeyStoreIsValid"><primary>xmlSecKeyStoreIsValid</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyStoreIsValid(store)</programlisting>
<para>Macro. Returns 1 if <parameter>store</parameter>
 is not NULL and <parameter>store->id</parameter>
 is not NULL
or 0 otherwise.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreCheckId" role="macro">
<title>xmlSecKeyStoreCheckId()</title>
<indexterm zone="xmlSecKeyStoreCheckId"><primary>xmlSecKeyStoreCheckId</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyStoreCheckId(store, storeId)</programlisting>
<para>Macro. Returns 1 if <parameter>store</parameter>
 is valid and <parameter>store</parameter>
's id is equal to <parameter>storeId</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>storeId</para></entry>
<entry role="parameter_description"><para>the store Id.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreCheckSize" role="macro">
<title>xmlSecKeyStoreCheckSize()</title>
<indexterm zone="xmlSecKeyStoreCheckSize"><primary>xmlSecKeyStoreCheckSize</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyStoreCheckSize(store, size)</programlisting>
<para>Macro. Returns 1 if <parameter>store</parameter>
 is valid and <parameter>stores</parameter>
's object has at least <parameter>size</parameter>
 bytes.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the expected size.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreIdUnknown" role="macro">
<title>xmlSecKeyStoreIdUnknown</title>
<indexterm zone="xmlSecKeyStoreIdUnknown"><primary>xmlSecKeyStoreIdUnknown</primary></indexterm>
<programlisting language="C">#define xmlSecKeyStoreIdUnknown                         ((xmlSecKeyDataStoreId)NULL)
</programlisting>
<para>The "unknown" id.</para>
</refsect2>
<refsect2 id="xmlSecKeyStoreInitializeMethod" role="function">
<title>xmlSecKeyStoreInitializeMethod&#160;()</title>
<indexterm zone="xmlSecKeyStoreInitializeMethod"><primary>xmlSecKeyStoreInitializeMethod</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyStoreInitializeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>);</programlisting>
<para>Keys store specific initialization method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreFinalizeMethod" role="function">
<title>xmlSecKeyStoreFinalizeMethod&#160;()</title>
<indexterm zone="xmlSecKeyStoreFinalizeMethod"><primary>xmlSecKeyStoreFinalizeMethod</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyStoreFinalizeMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>);</programlisting>
<para>Keys store specific finalization (destroy) method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreFindKeyMethod" role="function">
<title>xmlSecKeyStoreFindKeyMethod&#160;()</title>
<indexterm zone="xmlSecKeyStoreFindKeyMethod"><primary>xmlSecKeyStoreFindKeyMethod</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKey"><returnvalue>xmlSecKeyPtr</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecKeyStoreFindKeyMethod<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>,
                                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                                <parameter><link linkend="xmlSecKeyInfoCtx"><type>xmlSecKeyInfoCtxPtr</type></link> keyInfoCtx</parameter>);</programlisting>
<para>Keys store specific find method. The caller is responsible for destroying
the returned key using <link linkend="xmlSecKeyDestroy"><type>xmlSecKeyDestroy</type></link> method.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the desired key name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keyInfoCtx</para></entry>
<entry role="parameter_description"><para>the pointer to key info context.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to a key or NULL if key is not found or an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecKeyStoreKlassGetName" role="macro">
<title>xmlSecKeyStoreKlassGetName()</title>
<indexterm zone="xmlSecKeyStoreKlassGetName"><primary>xmlSecKeyStoreKlassGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecKeyStoreKlassGetName(klass)</programlisting>
<para>Macro. Returns store klass name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>klass</para></entry>
<entry role="parameter_description"><para>the pointer to store klass.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecSimpleKeysStoreGetKlass" role="function">
<title>xmlSecSimpleKeysStoreGetKlass&#160;()</title>
<indexterm zone="xmlSecSimpleKeysStoreGetKlass"><primary>xmlSecSimpleKeysStoreGetKlass</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecKeyStoreId"><returnvalue>xmlSecKeyStoreId</returnvalue></link>
xmlSecSimpleKeysStoreGetKlass (<parameter><type>void</type></parameter>);</programlisting>
<para>The simple list based keys store klass.</para>
<refsect3 role="returns">
<title>Returns</title>
<para> simple list based keys store klass.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecSimpleKeysStoreAdoptKey" role="function">
<title>xmlSecSimpleKeysStoreAdoptKey&#160;()</title>
<indexterm zone="xmlSecSimpleKeysStoreAdoptKey"><primary>xmlSecSimpleKeysStoreAdoptKey</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecSimpleKeysStoreAdoptKey (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>,
                               <parameter><link linkend="xmlSecKey"><type>xmlSecKeyPtr</type></link> key</parameter>);</programlisting>
<para>Adds <parameter>key</parameter>
 to the <parameter>store</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to simple keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>key</para></entry>
<entry role="parameter_description"><para>the pointer to key.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecSimpleKeysStoreLoad" role="function">
<title>xmlSecSimpleKeysStoreLoad&#160;()</title>
<indexterm zone="xmlSecSimpleKeysStoreLoad"><primary>xmlSecSimpleKeysStoreLoad</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecSimpleKeysStoreLoad (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>,
                           <parameter>const <link linkend="char"><type>char</type></link> *uri</parameter>,
                           <parameter><link linkend="xmlSecKeysMngr"><type>xmlSecKeysMngrPtr</type></link> keysMngr</parameter>);</programlisting>
<para>Reads keys from an XML file.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to simple keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>uri</para></entry>
<entry role="parameter_description"><para>the filename.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>keysMngr</para></entry>
<entry role="parameter_description"><para>the pointer to associated keys manager.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecSimpleKeysStoreSave" role="function">
<title>xmlSecSimpleKeysStoreSave&#160;()</title>
<indexterm zone="xmlSecSimpleKeysStoreSave"><primary>xmlSecSimpleKeysStoreSave</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecSimpleKeysStoreSave (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>,
                           <parameter>const <link linkend="char"><type>char</type></link> *filename</parameter>,
                           <parameter><link linkend="xmlSecKeyDataType"><type>xmlSecKeyDataType</type></link> type</parameter>);</programlisting>
<para>Writes keys from <parameter>store</parameter>
 to an XML file.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to simple keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>filename</para></entry>
<entry role="parameter_description"><para>the filename.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the saved keys type (public, private, ...).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecSimpleKeysStoreGetKeys" role="function">
<title>xmlSecSimpleKeysStoreGetKeys&#160;()</title>
<indexterm zone="xmlSecSimpleKeysStoreGetKeys"><primary>xmlSecSimpleKeysStoreGetKeys</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecPtrList"><returnvalue>xmlSecPtrListPtr</returnvalue></link>
xmlSecSimpleKeysStoreGetKeys (<parameter><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link> store</parameter>);</programlisting>
<para>Gets list of keys from simple keys store.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>store</para></entry>
<entry role="parameter_description"><para>the pointer to simple keys store.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the list of keys stored in the keys store or NULL
if an error occurs.</para>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-keysmngr.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecKeysMngr" role="struct">
<title>struct xmlSecKeysMngr</title>
<indexterm zone="xmlSecKeysMngr"><primary>xmlSecKeysMngr</primary></indexterm>
<programlisting language="C">struct xmlSecKeysMngr {
    xmlSecKeyStorePtr           keysStore;
    xmlSecPtrList               storesList;
    xmlSecGetKeyCallback        getKey;
};
</programlisting>
<para>The keys manager structure.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyStore"><type>xmlSecKeyStorePtr</type></link>&#160;<structfield id="xmlSecKeysMngr.keysStore">keysStore</structfield>;</para></entry>
<entry role="struct_member_description"><para>the key store (list of keys known to keys manager).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecPtrList"><type>xmlSecPtrList</type></link>&#160;<structfield id="xmlSecKeysMngr.storesList">storesList</structfield>;</para></entry>
<entry role="struct_member_description"><para>the list of key data stores known to keys manager.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecGetKeyCallback"><type>xmlSecGetKeyCallback</type></link>&#160;<structfield id="xmlSecKeysMngr.getKey">getKey</structfield>;</para></entry>
<entry role="struct_member_description"><para>the callback used to read &lt;dsig:KeyInfo/> node.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyStore" role="struct">
<title>struct xmlSecKeyStore</title>
<indexterm zone="xmlSecKeyStore"><primary>xmlSecKeyStore</primary></indexterm>
<programlisting language="C">struct xmlSecKeyStore {
    xmlSecKeyStoreId                    id;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The keys store.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyStoreId"><type>xmlSecKeyStoreId</type></link>&#160;<structfield id="xmlSecKeyStore.id">id</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store id (<link linkend="xmlSecKeyStoreId"><type>xmlSecKeyStoreId</type></link>).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyStore.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyStore.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecKeyStoreKlass" role="struct">
<title>struct xmlSecKeyStoreKlass</title>
<indexterm zone="xmlSecKeyStoreKlass"><primary>xmlSecKeyStoreKlass</primary></indexterm>
<programlisting language="C">struct xmlSecKeyStoreKlass {
    xmlSecSize                          klassSize;
    xmlSecSize                          objSize;

    /* data */
    const xmlChar*                      name;

    /* constructors/destructor */
    xmlSecKeyStoreInitializeMethod      initialize;
    xmlSecKeyStoreFinalizeMethod        finalize;
    xmlSecKeyStoreFindKeyMethod         findKey;

    /* for the future */
    void*                               reserved0;
    void*                               reserved1;
};
</programlisting>
<para>The keys store id (klass).</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyStoreKlass.klassSize">klassSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store klass size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecSize"><type>xmlSecSize</type></link>&#160;<structfield id="xmlSecKeyStoreKlass.objSize">objSize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store obj size.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecKeyStoreKlass.name">name</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's name.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyStoreInitializeMethod"><type>xmlSecKeyStoreInitializeMethod</type></link>&#160;<structfield id="xmlSecKeyStoreKlass.initialize">initialize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's initialization method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyStoreFinalizeMethod"><type>xmlSecKeyStoreFinalizeMethod</type></link>&#160;<structfield id="xmlSecKeyStoreKlass.finalize">finalize</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's finalization (destroy) method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecKeyStoreFindKeyMethod"><type>xmlSecKeyStoreFindKeyMethod</type></link>&#160;<structfield id="xmlSecKeyStoreKlass.findKey">findKey</structfield>;</para></entry>
<entry role="struct_member_description"><para>the store's find method.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyStoreKlass.reserved0">reserved0</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="void"><type>void</type></link>&#160;*<structfield id="xmlSecKeyStoreKlass.reserved1">reserved1</structfield>;</para></entry>
<entry role="struct_member_description"><para>reserved for the future.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecSimpleKeysStoreId" role="macro">
<title>xmlSecSimpleKeysStoreId</title>
<indexterm zone="xmlSecSimpleKeysStoreId"><primary>xmlSecSimpleKeysStoreId</primary></indexterm>
<programlisting language="C">#define xmlSecSimpleKeysStoreId         xmlSecSimpleKeysStoreGetKlass()
</programlisting>
<para>A simple keys store klass id.</para>
</refsect2>

</refsect1>

</refentry>
