<refentry id="xmlsec-xmlsec">
<refmeta>
<refentrytitle>xmlsec</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>xmlsec</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSec">xmlSecPtr</link>;
#define     <link linkend="xmlSecSize">xmlSecSize</link>
#define     <link linkend="xmlSecByte">xmlSecByte</link>
int         <link linkend="xmlSecInit">xmlSecInit</link>                      (void);
int         <link linkend="xmlSecShutdown">xmlSecShutdown</link>                  (void);
#define     <link linkend="xmlSecCheckVersionExact">xmlSecCheckVersionExact</link>         ()
#define     <link linkend="xmlSecCheckVersion">xmlSecCheckVersion</link>              ()
enum        <link linkend="xmlSecCheckVersionMode">xmlSecCheckVersionMode</link>;
int         <link linkend="xmlSecCheckVersionExt">xmlSecCheckVersionExt</link>           (int major,
                                             int minor,
                                             int subminor,
                                             <link linkend="xmlSecCheckVersionMode">xmlSecCheckVersionMode</link> mode);
#define     <link linkend="ATTRIBUTE-UNUSED-CAPS">ATTRIBUTE_UNUSED</link>
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecPtr">xmlSecPtr</title>
<programlisting>typedef void*					xmlSecPtr;
</programlisting>
<para>
Void pointer.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecSize">xmlSecSize</title>
<programlisting>#define     xmlSecSize</programlisting>
<para>
Size of something. Should be typedef instead of define
but it will break ABI (todo).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecByte">xmlSecByte</title>
<programlisting>#define xmlSecByte				unsigned char
</programlisting>
<para>
One byte. Should be typedef instead of define
but it will break ABI (todo).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecInit">xmlSecInit ()</title>
<programlisting>int         xmlSecInit                      (void);</programlisting>
<para>
Initializes XML Security Library. The depended libraries
(LibXML and LibXSLT) must be initialized before.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecShutdown">xmlSecShutdown ()</title>
<programlisting>int         xmlSecShutdown                  (void);</programlisting>
<para>
Clean ups the XML Security Library.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCheckVersionExact">xmlSecCheckVersionExact()</title>
<programlisting>#define     xmlSecCheckVersionExact()</programlisting>
<para>
Macro. Returns 1 if the loaded xmlsec library version exactly matches 
the one used to compile the caller, 0 if it does not or a negative
value if an error occurs.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecCheckVersion">xmlSecCheckVersion()</title>
<programlisting>#define     xmlSecCheckVersion()</programlisting>
<para>
Macro. Returns 1 if the loaded xmlsec library version ABI compatible with
the one used to compile the caller, 0 if it does not or a negative
value if an error occurs.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecCheckVersionMode">enum xmlSecCheckVersionMode</title>
<programlisting>typedef enum {
    xmlSecCheckVersionExact = 0,
    xmlSecCheckVersionABICompatible
} xmlSecCheckVersionMode;
</programlisting>
<para>
The xmlsec library version mode.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecCheckVersionExact</literal></term>
<listitem><simpara>		the version should match exactly.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecCheckVersionABICompatible</literal></term>
<listitem><simpara>	the version should be ABI compatible.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecCheckVersionExt">xmlSecCheckVersionExt ()</title>
<programlisting>int         xmlSecCheckVersionExt           (int major,
                                             int minor,
                                             int subminor,
                                             <link linkend="xmlSecCheckVersionMode">xmlSecCheckVersionMode</link> mode);</programlisting>
<para>
Checks if the loaded version of xmlsec library could be used.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>major</parameter>&nbsp;:</term>
<listitem><simpara>		the major version number.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>minor</parameter>&nbsp;:</term>
<listitem><simpara>		the minor version number.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subminor</parameter>&nbsp;:</term>
<listitem><simpara>		the subminor version number.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara>		the version check mode.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>1 if the loaded xmlsec library version is OK to use
0 if it is not or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ATTRIBUTE-UNUSED-CAPS">ATTRIBUTE_UNUSED</title>
<programlisting>#define     ATTRIBUTE_UNUSED</programlisting>
<para>
Macro used to signal to GCC unused function parameters</para>
<para>

</para></refsect2>

</refsect1>




</refentry>
