<refentry id="xmlsec-nss-crypto">
<refmeta>
<refentrytitle>crypto</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC-NSS Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>crypto</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



<link linkend="xmlSecCryptoDLFunctions">xmlSecCryptoDLFunctionsPtr</link> <link linkend="xmlSecCryptoGetFunctions-nss">xmlSecCryptoGetFunctions_nss</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssInit">xmlSecNssInit</link>                   (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssShutdown">xmlSecNssShutdown</link>               (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssKeysMngrInit">xmlSecNssKeysMngrInit</link>           (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="int">int</link>         <link linkend="xmlSecNssGenerateRandom">xmlSecNssGenerateRandom</link>         (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buffer,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="void">void</link>        <link linkend="xmlSecNssErrorsDefaultCallback">xmlSecNssErrorsDefaultCallback</link>  (const <link linkend="char">char</link> *file,
                                             <link linkend="int">int</link> line,
                                             const <link linkend="char">char</link> *func,
                                             const <link linkend="char">char</link> *errorObject,
                                             const <link linkend="char">char</link> *errorSubject,
                                             <link linkend="int">int</link> reason,
                                             const <link linkend="char">char</link> *msg);
#define     <link linkend="xmlSecNssKeyDataAesId">xmlSecNssKeyDataAesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecNssKeyDataAesGetKlass">xmlSecNssKeyDataAesGetKlass</link> (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssKeyDataAesSet">xmlSecNssKeyDataAesSet</link>          (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);
#define     <link linkend="xmlSecNssTransformAes128CbcId">xmlSecNssTransformAes128CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformAes128CbcGetKlass">xmlSecNssTransformAes128CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformAes192CbcId">xmlSecNssTransformAes192CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformAes192CbcGetKlass">xmlSecNssTransformAes192CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformAes256CbcId">xmlSecNssTransformAes256CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformAes256CbcGetKlass">xmlSecNssTransformAes256CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformKWAes128Id">xmlSecNssTransformKWAes128Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformKWAes128GetKlass">xmlSecNssTransformKWAes128GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformKWAes192Id">xmlSecNssTransformKWAes192Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformKWAes192GetKlass">xmlSecNssTransformKWAes192GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformKWAes256Id">xmlSecNssTransformKWAes256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformKWAes256GetKlass">xmlSecNssTransformKWAes256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssKeyDataDesId">xmlSecNssKeyDataDesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecNssKeyDataDesGetKlass">xmlSecNssKeyDataDesGetKlass</link> (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssKeyDataDesSet">xmlSecNssKeyDataDesSet</link>          (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);
#define     <link linkend="xmlSecNssTransformDes3CbcId">xmlSecNssTransformDes3CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformDes3CbcGetKlass">xmlSecNssTransformDes3CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformKWDes3Id">xmlSecNssTransformKWDes3Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformKWDes3GetKlass">xmlSecNssTransformKWDes3GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssKeyDataDsaId">xmlSecNssKeyDataDsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecNssKeyDataDsaGetKlass">xmlSecNssKeyDataDsaGetKlass</link> (void);
#define     <link linkend="xmlSecNssTransformDsaSha1Id">xmlSecNssTransformDsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformDsaSha1GetKlass">xmlSecNssTransformDsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssKeyDataHmacId">xmlSecNssKeyDataHmacId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecNssKeyDataHmacGetKlass">xmlSecNssKeyDataHmacGetKlass</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecNssKeyDataHmacSet">xmlSecNssKeyDataHmacSet</link>         (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);
#define     <link linkend="xmlSecNssTransformHmacSha1Id">xmlSecNssTransformHmacSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformHmacSha1GetKlass">xmlSecNssTransformHmacSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformHmacRipemd160Id">xmlSecNssTransformHmacRipemd160Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformHmacRipemd160GetKlass">xmlSecNssTransformHmacRipemd160GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformHmacMd5Id">xmlSecNssTransformHmacMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformHmacMd5GetKlass">xmlSecNssTransformHmacMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssKeyDataRsaId">xmlSecNssKeyDataRsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecNssKeyDataRsaGetKlass">xmlSecNssKeyDataRsaGetKlass</link> (void);
#define     <link linkend="xmlSecNssTransformRsaSha1Id">xmlSecNssTransformRsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformRsaSha1GetKlass">xmlSecNssTransformRsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformRsaPkcs1Id">xmlSecNssTransformRsaPkcs1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformRsaPkcs1GetKlass">xmlSecNssTransformRsaPkcs1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecNssTransformSha1Id">xmlSecNssTransformSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecNssTransformSha1GetKlass">xmlSecNssTransformSha1GetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>









<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecCryptoGetFunctions-nss">xmlSecCryptoGetFunctions_nss ()</title>
<indexterm><primary>xmlSecCryptoGetFunctions_nss</primary></indexterm><programlisting><link linkend="xmlSecCryptoDLFunctions">xmlSecCryptoDLFunctionsPtr</link> xmlSecCryptoGetFunctions_nss
                                            (void);</programlisting>
<para>
Gets the pointer to xmlsec-nss functions table.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the xmlsec-nss functions table or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssInit">xmlSecNssInit ()</title>
<indexterm><primary>xmlSecNssInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssInit                   (void);</programlisting>
<para>
XMLSec library specific crypto engine initialization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssShutdown">xmlSecNssShutdown ()</title>
<indexterm><primary>xmlSecNssShutdown</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssShutdown               (void);</programlisting>
<para>
XMLSec library specific crypto engine shutdown.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeysMngrInit">xmlSecNssKeysMngrInit ()</title>
<indexterm><primary>xmlSecNssKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssKeysMngrInit           (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Adds NSS specific key data stores in keys manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssGenerateRandom">xmlSecNssGenerateRandom ()</title>
<indexterm><primary>xmlSecNssGenerateRandom</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssGenerateRandom         (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buffer,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Generates <parameter>size</parameter> random bytes and puts result in <parameter>buffer</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara>		the destination buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the numer of bytes to generate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssErrorsDefaultCallback">xmlSecNssErrorsDefaultCallback ()</title>
<indexterm><primary>xmlSecNssErrorsDefaultCallback</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecNssErrorsDefaultCallback  (const <link linkend="char">char</link> *file,
                                             <link linkend="int">int</link> line,
                                             const <link linkend="char">char</link> *func,
                                             const <link linkend="char">char</link> *errorObject,
                                             const <link linkend="char">char</link> *errorSubject,
                                             <link linkend="int">int</link> reason,
                                             const <link linkend="char">char</link> *msg);</programlisting>
<para>
The default errors reporting callback function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>		the error location file name (__FILE__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>line</parameter>&nbsp;:</term>
<listitem><simpara>		the error location line number (__LINE__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>		the error location function name (__FUNCTION__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errorObject</parameter>&nbsp;:</term>
<listitem><simpara>	the error specific error object 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errorSubject</parameter>&nbsp;:</term>
<listitem><simpara>	the error specific error subject.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>		the error code.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>		the additional error message.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataAesId">xmlSecNssKeyDataAesId</title>
<indexterm><primary>xmlSecNssKeyDataAesId</primary></indexterm><programlisting>#define     xmlSecNssKeyDataAesId</programlisting>
<para>
The AES key data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataAesGetKlass">xmlSecNssKeyDataAesGetKlass ()</title>
<indexterm><primary>xmlSecNssKeyDataAesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecNssKeyDataAesGetKlass (void);</programlisting>
<para>
The AES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataAesSet">xmlSecNssKeyDataAesSet ()</title>
<indexterm><primary>xmlSecNssKeyDataAesSet</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssKeyDataAesSet          (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);</programlisting>
<para>
Sets the value of AES key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to AES key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&nbsp;:</term>
<listitem><simpara>		the key value size (in bytes).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes128CbcId">xmlSecNssTransformAes128CbcId</title>
<indexterm><primary>xmlSecNssTransformAes128CbcId</primary></indexterm><programlisting>#define     xmlSecNssTransformAes128CbcId</programlisting>
<para>
The AES128 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes128CbcGetKlass">xmlSecNssTransformAes128CbcGetKlass ()</title>
<indexterm><primary>xmlSecNssTransformAes128CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformAes128CbcGetKlass
                                            (void);</programlisting>
<para>
AES 128 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 128 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes192CbcId">xmlSecNssTransformAes192CbcId</title>
<indexterm><primary>xmlSecNssTransformAes192CbcId</primary></indexterm><programlisting>#define     xmlSecNssTransformAes192CbcId</programlisting>
<para>
The AES192 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes192CbcGetKlass">xmlSecNssTransformAes192CbcGetKlass ()</title>
<indexterm><primary>xmlSecNssTransformAes192CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformAes192CbcGetKlass
                                            (void);</programlisting>
<para>
AES 192 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 192 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes256CbcId">xmlSecNssTransformAes256CbcId</title>
<indexterm><primary>xmlSecNssTransformAes256CbcId</primary></indexterm><programlisting>#define     xmlSecNssTransformAes256CbcId</programlisting>
<para>
The AES256 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformAes256CbcGetKlass">xmlSecNssTransformAes256CbcGetKlass ()</title>
<indexterm><primary>xmlSecNssTransformAes256CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformAes256CbcGetKlass
                                            (void);</programlisting>
<para>
AES 256 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to AES 256 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes128Id">xmlSecNssTransformKWAes128Id</title>
<indexterm><primary>xmlSecNssTransformKWAes128Id</primary></indexterm><programlisting>#define     xmlSecNssTransformKWAes128Id</programlisting>
<para>
The AES 128 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes128GetKlass">xmlSecNssTransformKWAes128GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformKWAes128GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformKWAes128GetKlass
                                            (void);</programlisting>
<para>
The AES-128 key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-128 key wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes192Id">xmlSecNssTransformKWAes192Id</title>
<indexterm><primary>xmlSecNssTransformKWAes192Id</primary></indexterm><programlisting>#define     xmlSecNssTransformKWAes192Id</programlisting>
<para>
The AES 192 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes192GetKlass">xmlSecNssTransformKWAes192GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformKWAes192GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformKWAes192GetKlass
                                            (void);</programlisting>
<para>
The AES-192 key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-192 key wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes256Id">xmlSecNssTransformKWAes256Id</title>
<indexterm><primary>xmlSecNssTransformKWAes256Id</primary></indexterm><programlisting>#define     xmlSecNssTransformKWAes256Id</programlisting>
<para>
The AES 256 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWAes256GetKlass">xmlSecNssTransformKWAes256GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformKWAes256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformKWAes256GetKlass
                                            (void);</programlisting>
<para>
The AES-256 key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>AES-256 key wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataDesId">xmlSecNssKeyDataDesId</title>
<indexterm><primary>xmlSecNssKeyDataDesId</primary></indexterm><programlisting>#define     xmlSecNssKeyDataDesId</programlisting>
<para>
The DES key data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataDesGetKlass">xmlSecNssKeyDataDesGetKlass ()</title>
<indexterm><primary>xmlSecNssKeyDataDesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecNssKeyDataDesGetKlass (void);</programlisting>
<para>
The DES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>DES key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataDesSet">xmlSecNssKeyDataDesSet ()</title>
<indexterm><primary>xmlSecNssKeyDataDesSet</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssKeyDataDesSet          (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);</programlisting>
<para>
Sets the value of DES key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to DES key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&nbsp;:</term>
<listitem><simpara>		the key value size (in bytes).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformDes3CbcId">xmlSecNssTransformDes3CbcId</title>
<indexterm><primary>xmlSecNssTransformDes3CbcId</primary></indexterm><programlisting>#define     xmlSecNssTransformDes3CbcId</programlisting>
<para>
The Triple DES CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformDes3CbcGetKlass">xmlSecNssTransformDes3CbcGetKlass ()</title>
<indexterm><primary>xmlSecNssTransformDes3CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformDes3CbcGetKlass
                                            (void);</programlisting>
<para>
Triple DES CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to Triple DES encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWDes3Id">xmlSecNssTransformKWDes3Id</title>
<indexterm><primary>xmlSecNssTransformKWDes3Id</primary></indexterm><programlisting>#define     xmlSecNssTransformKWDes3Id</programlisting>
<para>
The DES3 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformKWDes3GetKlass">xmlSecNssTransformKWDes3GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformKWDes3GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformKWDes3GetKlass
                                            (void);</programlisting>
<para>
The Triple DES key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>Triple DES key wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataDsaId">xmlSecNssKeyDataDsaId</title>
<indexterm><primary>xmlSecNssKeyDataDsaId</primary></indexterm><programlisting>#define     xmlSecNssKeyDataDsaId</programlisting>
<para>
The DSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataDsaGetKlass">xmlSecNssKeyDataDsaGetKlass ()</title>
<indexterm><primary>xmlSecNssKeyDataDsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecNssKeyDataDsaGetKlass (void);</programlisting>
<para>
The DSA key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to DSA key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformDsaSha1Id">xmlSecNssTransformDsaSha1Id</title>
<indexterm><primary>xmlSecNssTransformDsaSha1Id</primary></indexterm><programlisting>#define     xmlSecNssTransformDsaSha1Id</programlisting>
<para>
The DSA SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformDsaSha1GetKlass">xmlSecNssTransformDsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformDsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformDsaSha1GetKlass
                                            (void);</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>DSA-SHA1 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataHmacId">xmlSecNssKeyDataHmacId</title>
<indexterm><primary>xmlSecNssKeyDataHmacId</primary></indexterm><programlisting>#define     xmlSecNssKeyDataHmacId</programlisting>
<para>
The DHMAC key data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataHmacGetKlass">xmlSecNssKeyDataHmacGetKlass ()</title>
<indexterm><primary>xmlSecNssKeyDataHmacGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecNssKeyDataHmacGetKlass
                                            (void);</programlisting>
<para>
The HMAC key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>HMAC key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataHmacSet">xmlSecNssKeyDataHmacSet ()</title>
<indexterm><primary>xmlSecNssKeyDataHmacSet</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecNssKeyDataHmacSet         (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);</programlisting>
<para>
Sets the value of HMAC key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to HMAC key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&nbsp;:</term>
<listitem><simpara>		the key value size (in bytes).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacSha1Id">xmlSecNssTransformHmacSha1Id</title>
<indexterm><primary>xmlSecNssTransformHmacSha1Id</primary></indexterm><programlisting>#define     xmlSecNssTransformHmacSha1Id</programlisting>
<para>
The HMAC with SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacSha1GetKlass">xmlSecNssTransformHmacSha1GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformHmacSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformHmacSha1GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA1 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-SHA1 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacRipemd160Id">xmlSecNssTransformHmacRipemd160Id</title>
<indexterm><primary>xmlSecNssTransformHmacRipemd160Id</primary></indexterm><programlisting>#define     xmlSecNssTransformHmacRipemd160Id</programlisting>
<para>
The HMAC with RipeMD160 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacRipemd160GetKlass">xmlSecNssTransformHmacRipemd160GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformHmacRipemd160GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformHmacRipemd160GetKlass
                                            (void);</programlisting>
<para>
The HMAC-RIPEMD160 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-RIPEMD160 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacMd5Id">xmlSecNssTransformHmacMd5Id</title>
<indexterm><primary>xmlSecNssTransformHmacMd5Id</primary></indexterm><programlisting>#define     xmlSecNssTransformHmacMd5Id</programlisting>
<para>
The HMAC with MD5 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformHmacMd5GetKlass">xmlSecNssTransformHmacMd5GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformHmacMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformHmacMd5GetKlass
                                            (void);</programlisting>
<para>
The HMAC-MD5 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the HMAC-MD5 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataRsaId">xmlSecNssKeyDataRsaId</title>
<indexterm><primary>xmlSecNssKeyDataRsaId</primary></indexterm><programlisting>#define     xmlSecNssKeyDataRsaId</programlisting>
<para>
The RSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssKeyDataRsaGetKlass">xmlSecNssKeyDataRsaGetKlass ()</title>
<indexterm><primary>xmlSecNssKeyDataRsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecNssKeyDataRsaGetKlass (void);</programlisting>
<para>
The RSA key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to RSA key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformRsaSha1Id">xmlSecNssTransformRsaSha1Id</title>
<indexterm><primary>xmlSecNssTransformRsaSha1Id</primary></indexterm><programlisting>#define     xmlSecNssTransformRsaSha1Id</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformRsaSha1GetKlass">xmlSecNssTransformRsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformRsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformRsaSha1GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-SHA1 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformRsaPkcs1Id">xmlSecNssTransformRsaPkcs1Id</title>
<indexterm><primary>xmlSecNssTransformRsaPkcs1Id</primary></indexterm><programlisting>#define     xmlSecNssTransformRsaPkcs1Id</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformRsaPkcs1GetKlass">xmlSecNssTransformRsaPkcs1GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformRsaPkcs1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformRsaPkcs1GetKlass
                                            (void);</programlisting>
<para>
The RSA-PKCS1 key transport transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>RSA-PKCS1 key transport transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformSha1Id">xmlSecNssTransformSha1Id</title>
<indexterm><primary>xmlSecNssTransformSha1Id</primary></indexterm><programlisting>#define     xmlSecNssTransformSha1Id</programlisting>
<para>
The SHA1 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecNssTransformSha1GetKlass">xmlSecNssTransformSha1GetKlass ()</title>
<indexterm><primary>xmlSecNssTransformSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecNssTransformSha1GetKlass
                                            (void);</programlisting>
<para>
SHA-1 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to SHA-1 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
