<refentry id="xmlsec-buffer">
<refmeta>
<refentrytitle>buffer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>buffer</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="xmlSecAllocMode">xmlSecAllocMode</link>;
struct      <link linkend="xmlSecBuffer">xmlSecBuffer</link>;
void        <link linkend="xmlSecBufferSetDefaultAllocMode">xmlSecBufferSetDefaultAllocMode</link> (<link linkend="xmlSecAllocMode">xmlSecAllocMode</link> defAllocMode,
                                             <link linkend="xmlSecSize">xmlSecSize</link> defInitialSize);
<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> <link linkend="xmlSecBufferCreate">xmlSecBufferCreate</link>          (<link linkend="xmlSecSize">xmlSecSize</link> size);
void        <link linkend="xmlSecBufferDestroy">xmlSecBufferDestroy</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
int         <link linkend="xmlSecBufferInitialize">xmlSecBufferInitialize</link>          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
void        <link linkend="xmlSecBufferFinalize">xmlSecBufferFinalize</link>            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
<link linkend="xmlSecByte">xmlSecByte</link>* <link linkend="xmlSecBufferGetData">xmlSecBufferGetData</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
int         <link linkend="xmlSecBufferSetData">xmlSecBufferSetData</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="xmlSecSize">xmlSecSize</link>  <link linkend="xmlSecBufferGetSize">xmlSecBufferGetSize</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
int         <link linkend="xmlSecBufferSetSize">xmlSecBufferSetSize</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
<link linkend="xmlSecSize">xmlSecSize</link>  <link linkend="xmlSecBufferGetMaxSize">xmlSecBufferGetMaxSize</link>          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
int         <link linkend="xmlSecBufferSetMaxSize">xmlSecBufferSetMaxSize</link>          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
void        <link linkend="xmlSecBufferEmpty">xmlSecBufferEmpty</link>               (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
int         <link linkend="xmlSecBufferAppend">xmlSecBufferAppend</link>              (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
int         <link linkend="xmlSecBufferPrepend">xmlSecBufferPrepend</link>             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
int         <link linkend="xmlSecBufferRemoveHead">xmlSecBufferRemoveHead</link>          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
int         <link linkend="xmlSecBufferRemoveTail">xmlSecBufferRemoveTail</link>          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);
int         <link linkend="xmlSecBufferBase64NodeContentRead">xmlSecBufferBase64NodeContentRead</link>
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);
int         <link linkend="xmlSecBufferBase64NodeContentWrite">xmlSecBufferBase64NodeContentWrite</link>
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlNode">xmlNodePtr</link> node,
                                             int columns);
<link linkend="xmlOutputBuffer">xmlOutputBufferPtr</link> <link linkend="xmlSecBufferCreateOutputBuffer">xmlSecBufferCreateOutputBuffer</link>
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecAllocMode">enum xmlSecAllocMode</title>
<programlisting>typedef enum {
    xmlSecAllocModeExact = 0,
    xmlSecAllocModeDouble
} xmlSecAllocMode;
</programlisting>
<para>
The memory allocation mode (used by <parameter>xmlSecBuffer</parameter> and <parameter>xmlSecList</parameter>).</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecAllocModeExact</literal></term>
<listitem><simpara> 	the memory allocation mode that minimizes total 
			allocated memory size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecAllocModeDouble</literal></term>
<listitem><simpara>	the memory allocation mode that tries to minimize
			the number of malloc calls.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBuffer">struct xmlSecBuffer</title>
<programlisting>struct xmlSecBuffer {
    xmlSecByte* 	data;
    xmlSecSize 		size;
    xmlSecSize		maxSize;
    xmlSecAllocMode 	allocMode;
};
</programlisting>
<para>
Binary data buffer.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlSecByte">xmlSecByte</link> *<structfield>data</structfield></term>
<listitem><simpara> the pointer to buffer data.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>size</structfield></term>
<listitem><simpara> the current data size.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecSize">xmlSecSize</link> <structfield>maxSize</structfield></term>
<listitem><simpara> the max data size (allocated buffer size).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecAllocMode">xmlSecAllocMode</link> <structfield>allocMode</structfield></term>
<listitem><simpara> the buffer memory allocation mode.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferSetDefaultAllocMode">xmlSecBufferSetDefaultAllocMode ()</title>
<programlisting>void        xmlSecBufferSetDefaultAllocMode (<link linkend="xmlSecAllocMode">xmlSecAllocMode</link> defAllocMode,
                                             <link linkend="xmlSecSize">xmlSecSize</link> defInitialSize);</programlisting>
<para>
Sets new global default allocation mode and minimal intial size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>defAllocMode</parameter>&nbsp;:</term>
<listitem><simpara>	the new default buffer allocation mode.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>defInitialSize</parameter>&nbsp;:</term>
<listitem><simpara>	the new default buffer minimal intial size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferCreate">xmlSecBufferCreate ()</title>
<programlisting><link linkend="xmlSecBuffer">xmlSecBufferPtr</link> xmlSecBufferCreate          (<link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Allocates and initalizes new memory buffer with given size.
Caller is responsible for calling <link linkend="xmlSecBufferDestroy">xmlSecBufferDestroy</link> function
to free the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara> 		the intial size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated buffer or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferDestroy">xmlSecBufferDestroy ()</title>
<programlisting>void        xmlSecBufferDestroy             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Desrtoys buffer object created with <link linkend="xmlSecBufferCreate">xmlSecBufferCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferInitialize">xmlSecBufferInitialize ()</title>
<programlisting>int         xmlSecBufferInitialize          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Initializes buffer object <parameter>buf</parameter>. Caller is responsible for calling
<link linkend="xmlSecBufferFinalize">xmlSecBufferFinalize</link> function to free allocated resources.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the initial buffer size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferFinalize">xmlSecBufferFinalize ()</title>
<programlisting>void        xmlSecBufferFinalize            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Frees allocated resource for a buffer intialized with <link linkend="xmlSecBufferInitialize">xmlSecBufferInitialize</link>
function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferGetData">xmlSecBufferGetData ()</title>
<programlisting><link linkend="xmlSecByte">xmlSecByte</link>* xmlSecBufferGetData             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Gets pointer to buffer's data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to buffer's data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferSetData">xmlSecBufferSetData ()</title>
<programlisting>int         xmlSecBufferSetData             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Sets the value of the buffer to <parameter>data</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the data size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferGetSize">xmlSecBufferGetSize ()</title>
<programlisting><link linkend="xmlSecSize">xmlSecSize</link>  xmlSecBufferGetSize             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Gets the current buffer data size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the current data size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferSetSize">xmlSecBufferSetSize ()</title>
<programlisting>int         xmlSecBufferSetSize             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Sets new buffer data size. If necessary, buffer grows to 
have at least <parameter>size</parameter> bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the new data size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferGetMaxSize">xmlSecBufferGetMaxSize ()</title>
<programlisting><link linkend="xmlSecSize">xmlSecSize</link>  xmlSecBufferGetMaxSize          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Gets the maximum (allocated) buffer size.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the maximum (allocated) buffer size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferSetMaxSize">xmlSecBufferSetMaxSize ()</title>
<programlisting>int         xmlSecBufferSetMaxSize          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Sets new buffer maximum size. If necessary, buffer grows to 
have at least <parameter>size</parameter> bytes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the new maximum size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferEmpty">xmlSecBufferEmpty ()</title>
<programlisting>void        xmlSecBufferEmpty               (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Empties the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferAppend">xmlSecBufferAppend ()</title>
<programlisting>int         xmlSecBufferAppend              (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Appends the <parameter>data</parameter> after the current data stored in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the data size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferPrepend">xmlSecBufferPrepend ()</title>
<programlisting>int         xmlSecBufferPrepend             (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *data,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Prepends the <parameter>data</parameter> before the current data stored in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>		the data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the data size.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferRemoveHead">xmlSecBufferRemoveHead ()</title>
<programlisting>int         xmlSecBufferRemoveHead          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Removes <parameter>size</parameter> bytes from the beginning of the current buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the number of bytes to be removed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferRemoveTail">xmlSecBufferRemoveTail ()</title>
<programlisting>int         xmlSecBufferRemoveTail          (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> size);</programlisting>
<para>
Removes <parameter>size</parameter> bytes from the end of current buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>		the number of bytes to be removed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferBase64NodeContentRead">xmlSecBufferBase64NodeContentRead ()</title>
<programlisting>int         xmlSecBufferBase64NodeContentRead
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlNode">xmlNodePtr</link> node);</programlisting>
<para>
Reads the content of the <parameter>node</parameter>, base64 decodes it and stores the
result in the buffer.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferBase64NodeContentWrite">xmlSecBufferBase64NodeContentWrite ()</title>
<programlisting>int         xmlSecBufferBase64NodeContentWrite
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf,
                                             <link linkend="xmlNode">xmlNodePtr</link> node,
                                             int columns);</programlisting>
<para>
Sets the content of the <parameter>node</parameter> to the base64 encoded buffer data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to a node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>columns</parameter>&nbsp;:</term>
<listitem><simpara>		the max line size fro base64 encoded data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecBufferCreateOutputBuffer">xmlSecBufferCreateOutputBuffer ()</title>
<programlisting><link linkend="xmlOutputBuffer">xmlOutputBufferPtr</link> xmlSecBufferCreateOutputBuffer
                                            (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buf);</programlisting>
<para>
Creates new LibXML output buffer to store data in the <parameter>buf</parameter>. Caller is 
responsible for destroying <parameter>buf</parameter> when processing is done.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>		the pointer to buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated output buffer or NULL if an error
occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
