<refentry id="xmlsec-nodeset">
<refmeta>
<refentrytitle>nodeset</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>nodeset</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>



enum        <link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link>;
enum        <link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link>;
struct      <link linkend="xmlSecNodeSet">xmlSecNodeSet</link>;
int         (<link linkend="xmlSecNodeSetWalkCallback">*xmlSecNodeSetWalkCallback</link>)    (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlNode">xmlNodePtr</link> parent,
                                             void *data);
<link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <link linkend="xmlSecNodeSetCreate">xmlSecNodeSetCreate</link>        (<link linkend="xmlDoc">xmlDocPtr</link> doc,
                                             <link linkend="xmlNodeSet">xmlNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link> type);
void        <link linkend="xmlSecNodeSetDestroy">xmlSecNodeSetDestroy</link>            (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset);
void        <link linkend="xmlSecNodeSetDocDestroy">xmlSecNodeSetDocDestroy</link>         (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset);
int         <link linkend="xmlSecNodeSetContains">xmlSecNodeSetContains</link>           (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlNode">xmlNodePtr</link> node,
                                             <link linkend="xmlNode">xmlNodePtr</link> parent);
<link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <link linkend="xmlSecNodeSetAdd">xmlSecNodeSetAdd</link>           (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> newNSet,
                                             <link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link> op);
<link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <link linkend="xmlSecNodeSetAddList">xmlSecNodeSetAddList</link>       (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> newNSet,
                                             <link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link> op);
<link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <link linkend="xmlSecNodeSetGetChildren">xmlSecNodeSetGetChildren</link>   (<link linkend="xmlDoc">xmlDocPtr</link> doc,
                                             const <link linkend="xmlNode">xmlNodePtr</link> parent,
                                             int withComments,
                                             int invert);
int         <link linkend="xmlSecNodeSetWalk">xmlSecNodeSetWalk</link>               (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSetWalkCallback">xmlSecNodeSetWalkCallback</link> walkFunc,
                                             void *data);
int         <link linkend="xmlSecNodeSetDumpTextNodes">xmlSecNodeSetDumpTextNodes</link>      (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlOutputBuffer">xmlOutputBufferPtr</link> out);
void        <link linkend="xmlSecNodeSetDebugDump">xmlSecNodeSetDebugDump</link>          (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecNodeSetType">enum xmlSecNodeSetType</title>
<programlisting>typedef enum {
    xmlSecNodeSetNormal = 0,
    xmlSecNodeSetInvert,
    xmlSecNodeSetTree,
    xmlSecNodeSetTreeWithoutComments, 
    xmlSecNodeSetTreeInvert,
    xmlSecNodeSetTreeWithoutCommentsInvert,
    xmlSecNodeSetList
} xmlSecNodeSetType;
</programlisting>
<para>
The basic nodes sets types.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecNodeSetNormal</literal></term>
<listitem><simpara> 	nodes set = nodes in the list.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetInvert</literal></term>
<listitem><simpara>  	nodes set = all document nodes minus nodes in the list.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetTree</literal></term>
<listitem><simpara> 		nodes set = nodes in the list and all their subtress.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetTreeWithoutComments</literal></term>
<listitem><simpara> 		nodes set = nodes in the list and 
			all their subtress but no comment nodes.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetTreeInvert</literal></term>
<listitem><simpara> 	nodes set = all document nodes minus nodes in the 
				list and all their subtress.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetTreeWithoutCommentsInvert</literal></term>
<listitem><simpara> 	nodes set = all document nodes 
				minus (nodes in the list and all their subtress 
			plus all comment nodes).
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetList</literal></term>
<listitem><simpara> 		nodes set = all nodes in the chidren list of nodes sets.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetOp">enum xmlSecNodeSetOp</title>
<programlisting>typedef enum {
    xmlSecNodeSetIntersection = 0,
    xmlSecNodeSetSubtraction,
    xmlSecNodeSetUnion
} xmlSecNodeSetOp;
</programlisting>
<para>
The simple nodes sets operations.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><literal>xmlSecNodeSetIntersection</literal></term>
<listitem><simpara> 	intersection.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetSubtraction</literal></term>
<listitem><simpara> 	subtraction.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>xmlSecNodeSetUnion</literal></term>
<listitem><simpara> 	union.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSet">struct xmlSecNodeSet</title>
<programlisting>struct xmlSecNodeSet {

    xmlNodeSetPtr	nodes;
    xmlDocPtr		doc;
    int			destroyDoc;
    xmlSecNodeSetType	type;
    xmlSecNodeSetOp	op;
    xmlSecNodeSetPtr	next;
    xmlSecNodeSetPtr	prev;
    xmlSecNodeSetPtr	children;
};
</programlisting>
<para>
The enchanced nodes set.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="xmlNodeSet">xmlNodeSetPtr</link> <structfield>nodes</structfield></term>
<listitem><simpara> 			the nodes list.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlDoc">xmlDocPtr</link> <structfield>doc</structfield></term>
<listitem><simpara> 			the parent XML document.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term>int <structfield>destroyDoc</structfield></term>
<listitem><simpara>			the flag: if set to 1 then <parameter>doc</parameter> will
			be destroyed when node set is destroyed.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link> <structfield>type</structfield></term>
<listitem><simpara> 			the nodes set type.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link> <structfield>op</structfield></term>
<listitem><simpara> 			the operation type.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> <structfield>next</structfield></term>
<listitem><simpara> 			the next nodes set.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> <structfield>prev</structfield></term>
<listitem><simpara> 			the previous nodes set.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> <structfield>children</structfield></term>
<listitem><simpara> 			the children list (valid only if type 
			equal to <link linkend="xmlSecNodeSetList">xmlSecNodeSetList</link>).
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetWalkCallback">xmlSecNodeSetWalkCallback ()</title>
<programlisting>int         (*xmlSecNodeSetWalkCallback)    (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlNode">xmlNodePtr</link> cur,
                                             <link linkend="xmlNode">xmlNodePtr</link> parent,
                                             void *data);</programlisting>
<para>
The callback function called once per each node in the nodes set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 			the pointer to <link linkend="xmlSecNodeSet">xmlSecNodeSet</link> structure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cur</parameter>&nbsp;:</term>
<listitem><simpara> 			the pointer current XML node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> 			the pointer to the <parameter>cur</parameter> parent node.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> 			the pointer to application specific data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs
an walk procedure should be interrupted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetCreate">xmlSecNodeSetCreate ()</title>
<programlisting><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> xmlSecNodeSetCreate        (<link linkend="xmlDoc">xmlDocPtr</link> doc,
                                             <link linkend="xmlNodeSet">xmlNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link> type);</programlisting>
<para>
Creates new nodes set. Caller is responsible for freeng returend object
by calling <link linkend="xmlSecNodeSetDestroy">xmlSecNodeSetDestroy</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>doc</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to parent XML document.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nodes</parameter>&nbsp;:</term>
<listitem><simpara> 		the list of nodes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> 		the nodes set type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to newly allocated node set or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetDestroy">xmlSecNodeSetDestroy ()</title>
<programlisting>void        xmlSecNodeSetDestroy            (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset);</programlisting>
<para>
Destroys the nodes set created with <link linkend="xmlSecNodeSetCreate">xmlSecNodeSetCreate</link> function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetDocDestroy">xmlSecNodeSetDocDestroy ()</title>
<programlisting>void        xmlSecNodeSetDocDestroy         (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset);</programlisting>
<para>
Instructs node set to destroy nodes parent doc when node set is destroyed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetContains">xmlSecNodeSetContains ()</title>
<programlisting>int         xmlSecNodeSetContains           (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlNode">xmlNodePtr</link> node,
                                             <link linkend="xmlNode">xmlNodePtr</link> parent);</programlisting>
<para>
Checks whether the <parameter>node</parameter> is in the nodes set or not.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to XML node to check.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to <parameter>node</parameter> parent node.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>1 if the <parameter>node</parameter> is in the nodes set <parameter>nset</parameter>, 0 if it is not
and a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetAdd">xmlSecNodeSetAdd ()</title>
<programlisting><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> xmlSecNodeSetAdd           (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> newNSet,
                                             <link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link> op);</programlisting>
<para>
Adds <parameter>newNSet</parameter> to the <parameter>nset</parameter> using operation <parameter>op</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to currrent nodes set (or NULL).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>newNSet</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to new nodes set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>op</parameter>&nbsp;:</term>
<listitem><simpara> 		the operation type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to combined nodes set or NULL if an error 
occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetAddList">xmlSecNodeSetAddList ()</title>
<programlisting><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> xmlSecNodeSetAddList       (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> newNSet,
                                             <link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link> op);</programlisting>
<para>
Adds <parameter>newNSet</parameter> to the <parameter>nset</parameter> as child using operation <parameter>op</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to currrent nodes set (or NULL).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>newNSet</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to new nodes set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>op</parameter>&nbsp;:</term>
<listitem><simpara> 		the operation type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the pointer to combined nodes set or NULL if an error 
occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetGetChildren">xmlSecNodeSetGetChildren ()</title>
<programlisting><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> xmlSecNodeSetGetChildren   (<link linkend="xmlDoc">xmlDocPtr</link> doc,
                                             const <link linkend="xmlNode">xmlNodePtr</link> parent,
                                             int withComments,
                                             int invert);</programlisting>
<para>
Creates a new nodes set that contains:
 - if <parameter>withComments</parameter> is not 0 and <parameter>invert</parameter> is 0:
   all nodes in the <parameter>parent</parameter> subtree;
 - if <parameter>withComments</parameter> is 0 and <parameter>invert</parameter> is 0:
   all nodes in the <parameter>parent</parameter> subtree except comment nodes;
 - if <parameter>withComments</parameter> is not 0 and <parameter>invert</parameter> not is 0:
   all nodes in the <parameter>doc</parameter> except nodes in the <parameter>parent</parameter> subtree;
 - if <parameter>withComments</parameter> is 0 and <parameter>invert</parameter> is 0:
   all nodes in the <parameter>doc</parameter> except nodes in the <parameter>parent</parameter> subtree 
   and comment nodes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>doc</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to an XML document.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara>	 	the pointer to parent XML node or NULL if we want to include all document nodes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>withComments</parameter>&nbsp;:</term>
<listitem><simpara> 	the flag include  comments or not.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>invert</parameter>&nbsp;:</term>
<listitem><simpara> 		the "invert" flag.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>pointer to the newly created <link linkend="xmlSecNodeSet">xmlSecNodeSet</link> structure
or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetWalk">xmlSecNodeSetWalk ()</title>
<programlisting>int         xmlSecNodeSetWalk               (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlSecNodeSetWalkCallback">xmlSecNodeSetWalkCallback</link> walkFunc,
                                             void *data);</programlisting>
<para>
Calls the function <parameter>walkFunc</parameter> once per each node in the nodes set <parameter>nset</parameter>.
If the <parameter>walkFunc</parameter> returns a negative value, then the walk procedure 
is interrupted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>walkFunc</parameter>&nbsp;:</term>
<listitem><simpara> 		the callback functions.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara> 		the application specific data passed to the <parameter>walkFunc</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetDumpTextNodes">xmlSecNodeSetDumpTextNodes ()</title>
<programlisting>int         xmlSecNodeSetDumpTextNodes      (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="xmlOutputBuffer">xmlOutputBufferPtr</link> out);</programlisting>
<para>
Dumps content of all the text nodes from <parameter>nset</parameter> to <parameter>out</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&nbsp;:</term>
<listitem><simpara>		the output buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecNodeSetDebugDump">xmlSecNodeSetDebugDump ()</title>
<programlisting>void        xmlSecNodeSetDebugDump          (<link linkend="xmlSecNodeSet">xmlSecNodeSetPtr</link> nset,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>
Prints information about <parameter>nset</parameter> to the <parameter>output</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>nset</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to node set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&nbsp;:</term>
<listitem><simpara> 		the pointer to output FILE.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
