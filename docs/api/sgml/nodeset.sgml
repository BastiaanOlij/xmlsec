<refentry id="xmlsec-nodeset">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-nodeset.top_of_page">nodeset</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nodeset</refname>
<refpurpose>Nodeset object implementation.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-nodeset.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><phrase role="c_punctuation">(</phrase><link linkend="xmlSecNodeSetWalkCallback">*xmlSecNodeSetWalkCallback</link><phrase role="c_punctuation">)</phrase>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetCreate">xmlSecNodeSetCreate</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetDestroy">xmlSecNodeSetDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetDocDestroy">xmlSecNodeSetDocDestroy</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetContains">xmlSecNodeSetContains</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetAdd">xmlSecNodeSetAdd</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetAddList">xmlSecNodeSetAddList</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetGetChildren">xmlSecNodeSetGetChildren</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetWalk">xmlSecNodeSetWalk</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetDumpTextNodes">xmlSecNodeSetDumpTextNodes</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeSetDebugDump">xmlSecNodeSetDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-nodeset.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link></entry></row>
<row><entry role="datatype_keyword">enum</entry><entry role="function_name"><link linkend="xmlSecNodeSetOp">xmlSecNodeSetOp</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecNodeSet">xmlSecNodeSet</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-nodeset.description" role="desc">
<title role="desc.title">Description</title>
<para>
Nodeset object implementation.
</para>

</refsect1>
<refsect1 id="xmlsec-nodeset.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecNodeSetWalkCallback" role="function">
<title>xmlSecNodeSetWalkCallback&#160;()</title>
<indexterm zone="xmlSecNodeSetWalkCallback"><primary>xmlSecNodeSetWalkCallback</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
<phrase role="c_punctuation">(</phrase>*xmlSecNodeSetWalkCallback<phrase role="c_punctuation">)</phrase> (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                              <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>,
                              <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                              <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>The callback function called once per each node in the nodes set.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to <link linkend="xmlSecNodeSet"><type>xmlSecNodeSet</type></link> structure.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer current XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to the <parameter>cur</parameter>
parent node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the pointer to application specific data.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs
an walk procedure should be interrupted.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetCreate" role="function">
<title>xmlSecNodeSetCreate&#160;()</title>
<indexterm zone="xmlSecNodeSetCreate"><primary>xmlSecNodeSetCreate</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
xmlSecNodeSetCreate (<parameter><link linkend="xmlDoc"><type>xmlDocPtr</type></link> doc</parameter>,
                     <parameter><link linkend="xmlNodeSet"><type>xmlNodeSetPtr</type></link> nodes</parameter>,
                     <parameter><link linkend="xmlSecNodeSetType"><type>xmlSecNodeSetType</type></link> type</parameter>);</programlisting>
<para>Creates new nodes set. Caller is responsible for freeing returned object
by calling <link linkend="xmlSecNodeSetDestroy"><type>xmlSecNodeSetDestroy</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>doc</para></entry>
<entry role="parameter_description"><para>the pointer to parent XML document.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodes</para></entry>
<entry role="parameter_description"><para>the list of nodes.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>type</para></entry>
<entry role="parameter_description"><para>the nodes set type.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly allocated node set or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetDestroy" role="function">
<title>xmlSecNodeSetDestroy&#160;()</title>
<indexterm zone="xmlSecNodeSetDestroy"><primary>xmlSecNodeSetDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecNodeSetDestroy (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>);</programlisting>
<para>Destroys the nodes set created with <link linkend="xmlSecNodeSetCreate"><type>xmlSecNodeSetCreate</type></link> function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetDocDestroy" role="function">
<title>xmlSecNodeSetDocDestroy&#160;()</title>
<indexterm zone="xmlSecNodeSetDocDestroy"><primary>xmlSecNodeSetDocDestroy</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecNodeSetDocDestroy (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>);</programlisting>
<para>Instructs node set to destroy nodes parent doc when node set is destroyed.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetContains" role="function">
<title>xmlSecNodeSetContains&#160;()</title>
<indexterm zone="xmlSecNodeSetContains"><primary>xmlSecNodeSetContains</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecNodeSetContains (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                       <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                       <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>);</programlisting>
<para>Checks whether the <parameter>node</parameter>
 is in the nodes set or not.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to XML node to check.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to <parameter>node</parameter>
parent node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 1 if the <parameter>node</parameter>
is in the nodes set <parameter>nset</parameter>
, 0 if it is not
and a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetAdd" role="function">
<title>xmlSecNodeSetAdd&#160;()</title>
<indexterm zone="xmlSecNodeSetAdd"><primary>xmlSecNodeSetAdd</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
xmlSecNodeSetAdd (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                  <parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> newNSet</parameter>,
                  <parameter><link linkend="xmlSecNodeSetOp"><type>xmlSecNodeSetOp</type></link> op</parameter>);</programlisting>
<para>Adds <parameter>newNSet</parameter>
 to the <parameter>nset</parameter>
 using operation <parameter>op</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to currrent nodes set (or NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNSet</para></entry>
<entry role="parameter_description"><para>the pointer to new nodes set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>op</para></entry>
<entry role="parameter_description"><para>the operation type.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to combined nodes set or NULL if an error
occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetAddList" role="function">
<title>xmlSecNodeSetAddList&#160;()</title>
<indexterm zone="xmlSecNodeSetAddList"><primary>xmlSecNodeSetAddList</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
xmlSecNodeSetAddList (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                      <parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> newNSet</parameter>,
                      <parameter><link linkend="xmlSecNodeSetOp"><type>xmlSecNodeSetOp</type></link> op</parameter>);</programlisting>
<para>Adds <parameter>newNSet</parameter>
 to the <parameter>nset</parameter>
 as child using operation <parameter>op</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to currrent nodes set (or NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNSet</para></entry>
<entry role="parameter_description"><para>the pointer to new nodes set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>op</para></entry>
<entry role="parameter_description"><para>the operation type.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to combined nodes set or NULL if an error
occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetGetChildren" role="function">
<title>xmlSecNodeSetGetChildren&#160;()</title>
<indexterm zone="xmlSecNodeSetGetChildren"><primary>xmlSecNodeSetGetChildren</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecNodeSet"><returnvalue>xmlSecNodeSetPtr</returnvalue></link>
xmlSecNodeSetGetChildren (<parameter><link linkend="xmlDoc"><type>xmlDocPtr</type></link> doc</parameter>,
                          <parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                          <parameter><link linkend="int"><type>int</type></link> withComments</parameter>,
                          <parameter><link linkend="int"><type>int</type></link> invert</parameter>);</programlisting>
<para>Creates a new nodes set that contains:</para>
<itemizedlist>
<listitem><para>if <parameter>withComments</parameter>
 is not 0 and <parameter>invert</parameter>
 is 0:
all nodes in the <parameter>parent</parameter>
 subtree;</para></listitem>
<listitem><para>if <parameter>withComments</parameter>
 is 0 and <parameter>invert</parameter>
 is 0:
all nodes in the <parameter>parent</parameter>
 subtree except comment nodes;</para></listitem>
<listitem><para>if <parameter>withComments</parameter>
 is not 0 and <parameter>invert</parameter>
 not is 0:
all nodes in the <parameter>doc</parameter>
 except nodes in the <parameter>parent</parameter>
 subtree;</para></listitem>
<listitem><para>if <parameter>withComments</parameter>
 is 0 and <parameter>invert</parameter>
 is 0:
all nodes in the <parameter>doc</parameter>
 except nodes in the <parameter>parent</parameter>
 subtree
and comment nodes.</para></listitem>
</itemizedlist>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>doc</para></entry>
<entry role="parameter_description"><para>the pointer to an XML document.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to parent XML node or NULL if we want to include all document nodes.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>withComments</para></entry>
<entry role="parameter_description"><para>the flag include  comments or not.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>invert</para></entry>
<entry role="parameter_description"><para>the "invert" flag.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the newly created <link linkend="xmlSecNodeSet"><type>xmlSecNodeSet</type></link> structure
or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetWalk" role="function">
<title>xmlSecNodeSetWalk&#160;()</title>
<indexterm zone="xmlSecNodeSetWalk"><primary>xmlSecNodeSetWalk</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecNodeSetWalk (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                   <parameter><link linkend="xmlSecNodeSetWalkCallback"><type>xmlSecNodeSetWalkCallback</type></link> walkFunc</parameter>,
                   <parameter><link linkend="void"><type>void</type></link> *data</parameter>);</programlisting>
<para>Calls the function <parameter>walkFunc</parameter>
 once per each node in the nodes set <parameter>nset</parameter>
.
If the <parameter>walkFunc</parameter>
 returns a negative value, then the walk procedure
is interrupted.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>walkFunc</para></entry>
<entry role="parameter_description"><para>the callback functions.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>data</para></entry>
<entry role="parameter_description"><para>the application specific data passed to the <parameter>walkFunc</parameter>
.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetDumpTextNodes" role="function">
<title>xmlSecNodeSetDumpTextNodes&#160;()</title>
<indexterm zone="xmlSecNodeSetDumpTextNodes"><primary>xmlSecNodeSetDumpTextNodes</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecNodeSetDumpTextNodes (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                            <parameter><link linkend="xmlOutputBuffer"><type>xmlOutputBufferPtr</type></link> out</parameter>);</programlisting>
<para>Dumps content of all the text nodes from <parameter>nset</parameter>
 to <parameter>out</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>out</para></entry>
<entry role="parameter_description"><para>the output buffer.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetDebugDump" role="function">
<title>xmlSecNodeSetDebugDump&#160;()</title>
<indexterm zone="xmlSecNodeSetDebugDump"><primary>xmlSecNodeSetDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecNodeSetDebugDump (<parameter><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link> nset</parameter>,
                        <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints information about <parameter>nset</parameter>
 to the <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>nset</para></entry>
<entry role="parameter_description"><para>the pointer to node set.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-nodeset.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecNodeSetType" role="enum">
<title>enum xmlSecNodeSetType</title>
<indexterm zone="xmlSecNodeSetType"><primary>xmlSecNodeSetType</primary></indexterm>
<para>The basic nodes sets types.</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetNormal">xmlSecNodeSetNormal</para></entry>
<entry role="enum_member_description"><para>nodes set = nodes in the list.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetInvert">xmlSecNodeSetInvert</para></entry>
<entry role="enum_member_description"><para>nodes set = all document nodes minus nodes in the list.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetTree">xmlSecNodeSetTree</para></entry>
<entry role="enum_member_description"><para>nodes set = nodes in the list and all their subtress.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetTreeWithoutComments">xmlSecNodeSetTreeWithoutComments</para></entry>
<entry role="enum_member_description"><para>nodes set = nodes in the list and
                             all their subtress but no comment nodes.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetTreeInvert">xmlSecNodeSetTreeInvert</para></entry>
<entry role="enum_member_description"><para>nodes set = all document nodes minus nodes in the
                             list and all their subtress.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetTreeWithoutCommentsInvert">xmlSecNodeSetTreeWithoutCommentsInvert</para></entry>
<entry role="enum_member_description"><para>nodes set = all document nodes
                             minus (nodes in the list and all their subtress
                             plus all comment nodes).</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetList">xmlSecNodeSetList</para></entry>
<entry role="enum_member_description"><para>nodes set = all nodes in the chidren list of nodes sets.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSetOp" role="enum">
<title>enum xmlSecNodeSetOp</title>
<indexterm zone="xmlSecNodeSetOp"><primary>xmlSecNodeSetOp</primary></indexterm>
<para>The simple nodes sets operations.</para>
<refsect3 role="enum_members">
<title>Members</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="enum_members_name" colwidth="300px"/>
<colspec colname="enum_members_description"/>
<colspec colname="enum_members_annotations" colwidth="200px"/>
<tbody>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetIntersection">xmlSecNodeSetIntersection</para></entry>
<entry role="enum_member_description"><para>intersection.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetSubtraction">xmlSecNodeSetSubtraction</para></entry>
<entry role="enum_member_description"><para>subtraction.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
<row role="constant"><entry role="enum_member_name"><para id="xmlSecNodeSetUnion">xmlSecNodeSetUnion</para></entry>
<entry role="enum_member_description"><para>union.</para>
</entry>
<entry role="enum_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeSet" role="struct">
<title>struct xmlSecNodeSet</title>
<indexterm zone="xmlSecNodeSet"><primary>xmlSecNodeSet</primary></indexterm>
<programlisting language="C">struct xmlSecNodeSet {
    xmlNodeSetPtr       nodes;
    xmlDocPtr           doc;
    int                 destroyDoc;
    xmlSecNodeSetType   type;
    xmlSecNodeSetOp     op;
    xmlSecNodeSetPtr    next;
    xmlSecNodeSetPtr    prev;
    xmlSecNodeSetPtr    children;
};
</programlisting>
<para>The enchanced nodes set.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para><link linkend="xmlNodeSet"><type>xmlNodeSetPtr</type></link>&#160;<structfield id="xmlSecNodeSet.nodes">nodes</structfield>;</para></entry>
<entry role="struct_member_description"><para>the nodes list.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlDoc"><type>xmlDocPtr</type></link>&#160;<structfield id="xmlSecNodeSet.doc">doc</structfield>;</para></entry>
<entry role="struct_member_description"><para>the parent XML document.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecNodeSet.destroyDoc">destroyDoc</structfield>;</para></entry>
<entry role="struct_member_description"><para>the flag: if set to 1 then <parameter>doc</parameter>
will
be destroyed when node set is destroyed.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecNodeSetType"><type>xmlSecNodeSetType</type></link>&#160;<structfield id="xmlSecNodeSet.type">type</structfield>;</para></entry>
<entry role="struct_member_description"><para>the nodes set type.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecNodeSetOp"><type>xmlSecNodeSetOp</type></link>&#160;<structfield id="xmlSecNodeSet.op">op</structfield>;</para></entry>
<entry role="struct_member_description"><para>the operation type.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link>&#160;<structfield id="xmlSecNodeSet.next">next</structfield>;</para></entry>
<entry role="struct_member_description"><para>the next nodes set.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link>&#160;<structfield id="xmlSecNodeSet.prev">prev</structfield>;</para></entry>
<entry role="struct_member_description"><para>the previous nodes set.</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecNodeSet"><type>xmlSecNodeSetPtr</type></link>&#160;<structfield id="xmlSecNodeSet.children">children</structfield>;</para></entry>
<entry role="struct_member_description"><para>the children list (valid only if type
equal to <link linkend="xmlSecNodeSetList"><type>xmlSecNodeSetList</type></link>).</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>

</refsect1>

</refentry>
