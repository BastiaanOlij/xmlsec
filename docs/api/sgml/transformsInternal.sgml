<refentry id="xmlsec-transformsInternal">
<refmeta>
<refentrytitle>transformsInternal.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>transformsInternal.h</refname><refpurpose>The internal transform's functions.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



enum        <link linkend="xmlSecTransformResult">xmlSecTransformResult</link>;
struct      <link linkend="xmlSecTransformState">xmlSecTransformState</link>;
<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> <link linkend="xmlSecTransformStateCreate">xmlSecTransformStateCreate</link>
                                            (<link linkend="xmlDocPtr">xmlDocPtr</link> doc,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodeSet,
                                             const char *uri);
void        <link linkend="xmlSecTransformStateDestroy">xmlSecTransformStateDestroy</link>     (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state);
int         <link linkend="xmlSecTransformStateUpdate">xmlSecTransformStateUpdate</link>      (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
int         <link linkend="xmlSecTransformStateFinal">xmlSecTransformStateFinal</link>       (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformResult">xmlSecTransformResult</link> type);
int         <link linkend="xmlSecTransformStateFinalToNode">xmlSecTransformStateFinalToNode</link> (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             int addBase64,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformStateFinalVerifyNode">xmlSecTransformStateFinalVerifyNode</link>
                                            (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformRegister">xmlSecTransformRegister</link>         (<link linkend="xmlSecTransformId">xmlSecTransformId</link> keyId);
int         <link linkend="xmlSecTransformsInit">xmlSecTransformsInit</link>            (void);
int         <link linkend="xmlSecTransformsNodeRead">xmlSecTransformsNodeRead</link>        (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> transformsNode);
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformFind">xmlSecTransformFind</link>       (const <link linkend="xmlChar">xmlChar</link> *href,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformNodeRead">xmlSecTransformNodeRead</link>  (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage,
                                             int dontDestroy);
int         <link linkend="xmlSecTransformNodeWrite">xmlSecTransformNodeWrite</link>        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecTransformResult">enum xmlSecTransformResult</title>
<programlisting>typedef enum {
    xmlSecTransformResultBinary,
    xmlSecTransformResultXml
} xmlSecTransformResult;
</programlisting>
<para>
The transform result types.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="enum">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><literal>xmlSecTransformResultBinary</literal></entry>
<entry> binary data.
</entry>
</row>
<row>
<entry><literal>xmlSecTransformResultXml</literal></entry>
<entry> XML document plus nodes set.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformState">struct xmlSecTransformState</title>
<programlisting>struct xmlSecTransformState {
    /* initial state */
    xmlDocPtr				initDoc;
    xmlSecNodeSetPtr			initNodeSet;
    char				*initUri;

    /* current state: xml */    
    xmlDocPtr				curDoc;	
    xmlSecNodeSetPtr			curNodeSet;
    
    /* current state: binary */
    xmlSecBufferPtr			curBuf;	
    xmlSecTransformPtr			curFirstBinTransform; 
    xmlSecTransformPtr			curLastBinTransform; 

    /*  optimization: special case for c14n transforms */
    xmlSecTransformPtr			curC14NTransform; 
};
</programlisting>
<para>
The current transforms state.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="xmlDocPtr">xmlDocPtr</link> <structfield>initDoc</structfield></entry>
<entry> the pointer to the original xml document.
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>initNodeSet</structfield></entry>
<entry> the original nodes set.
</entry>
</row>
<row>
<entry>char *<structfield>initUri</structfield></entry>
<entry> the original uri.
</entry>
</row>
<row>
<entry><link linkend="xmlDocPtr">xmlDocPtr</link> <structfield>curDoc</structfield></entry>
<entry> the pointer to the current doc.
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>curNodeSet</structfield></entry>
<entry>	the pointer to the current nodes set.
</entry>
</row>
<row>
<entry><link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> <structfield>curBuf</structfield></entry>
<entry> the pointer to the current binary data.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>curFirstBinTransform</structfield></entry>
<entry> the pointer to the first pending binary transform.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>curLastBinTransform</structfield></entry>
<entry> the pointer to the last pending binary transform.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>curC14NTransform</structfield></entry>
<entry> the current pending c14n transform.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateCreate">xmlSecTransformStateCreate ()</title>
<programlisting><link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> xmlSecTransformStateCreate
                                            (<link linkend="xmlDocPtr">xmlDocPtr</link> doc,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodeSet,
                                             const char *uri);</programlisting>
<para>
Creates new transform state.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>doc</parameter>&nbsp;:</entry>
<entry> the pointer to XML document that contains &lt;dsig:Signature&gt; node.
</entry></row>
<row><entry align="right"><parameter>nodeSet</parameter>&nbsp;:</entry>
<entry> the original nodes set.
</entry></row>
<row><entry align="right"><parameter>uri</parameter>&nbsp;:</entry>
<entry> the original uri.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to newly allocated <link linkend="xmlSecTransformState">xmlSecTransformState</link> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateDestroy">xmlSecTransformStateDestroy ()</title>
<programlisting>void        xmlSecTransformStateDestroy     (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state);</programlisting>
<para>
Destroys the transform state.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransformState">xmlSecTransformState</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateUpdate">xmlSecTransformStateUpdate ()</title>
<programlisting>int         xmlSecTransformStateUpdate      (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Updates the current <parameter>state</parameter> with <parameter>transform</parameter>. Note all transforms are
applied immidiatelly.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransformState">xmlSecTransformState</link> structure.
</entry></row>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateFinal">xmlSecTransformStateFinal ()</title>
<programlisting>int         xmlSecTransformStateFinal       (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformResult">xmlSecTransformResult</link> type);</programlisting>
<para>
Finalazies transforms <parameter>state</parameter> (applies all pending transforms) and 
creates a result of the desired <parameter>type</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransformState">xmlSecTransformState</link> structure.
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry> the desired final type.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateFinalToNode">xmlSecTransformStateFinalToNode ()</title>
<programlisting>int         xmlSecTransformStateFinalToNode (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             int addBase64,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>addBase64</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStateFinalVerifyNode">xmlSecTransformStateFinalVerifyNode ()</title>
<programlisting>int         xmlSecTransformStateFinalVerifyNode
                                            (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRegister">xmlSecTransformRegister ()</title>
<programlisting>int         xmlSecTransformRegister         (<link linkend="xmlSecTransformId">xmlSecTransformId</link> keyId);</programlisting>
<para>
Adds the <parameter>transformId</parameter> to the internal table of known transforms.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyId</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformsInit">xmlSecTransformsInit ()</title>
<programlisting>int         xmlSecTransformsInit            (void);</programlisting>
<para>
Trnasforms engine initialization (called from <link linkend="xmlSecInit">xmlSecInit</link>() function).
The applications should not call this function directly.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformsNodeRead">xmlSecTransformsNodeRead ()</title>
<programlisting>int         xmlSecTransformsNodeRead        (<link linkend="xmlSecTransformStatePtr">xmlSecTransformStatePtr</link> state,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> transformsNode);</programlisting>
<para>
Reads the transform node and updates <parameter>state</parameter>,</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>state</parameter>&nbsp;:</entry>
<entry> the pointer to current transform state.
</entry></row>
<row><entry align="right"><parameter>transformsNode</parameter>&nbsp;:</entry>
<entry> the pointer to the &lt;dsig:Transform&gt; node.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformFind">xmlSecTransformFind ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformFind       (const <link linkend="xmlChar">xmlChar</link> *href,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);</programlisting>
<para>
Searches the list of known transforms for transform with given href</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>href</parameter>&nbsp;:</entry>
<entry> the transform href.
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the id of the found transform or NULL if an error occurs 
or transform is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeRead">xmlSecTransformNodeRead ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformNodeRead  (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage,
                                             int dontDestroy);</programlisting>
<para>
Reads transform from the <parameter>transformNode</parameter> as follows:
   1) reads "Algorithm" attribute;
   2) checks the list of known algorithms;
   3) calls transform create method;
   4) calls transform read transform node method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> the pointer to &lt;dsig:Transform&gt; node.
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry> the usage of the transfomr (signature, encryption, etc.).
</entry></row>
<row><entry align="right"><parameter>dontDestroy</parameter>&nbsp;:</entry>
<entry> the flag whether we need to destroy the transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to newly allocated <link linkend="xmlSecTransform">xmlSecTransform</link> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeWrite">xmlSecTransformNodeWrite ()</title>
<programlisting>int         xmlSecTransformNodeWrite        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);</programlisting>
<para>
Writes Agorithm attribute in the transform node.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> the pointer to &lt;dsig:Transform&gt; node.
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the transform id.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
