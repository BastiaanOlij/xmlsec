<refentry id="xmlsec-xmltree">
<refmeta>
<refentrytitle>xmltree</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>xmltree</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="xmlSecNodeGetName">xmlSecNodeGetName</link>               (node)
const <link linkend="xmlChar">xmlChar</link>* <link linkend="xmlSecGetNodeNsHref">xmlSecGetNodeNsHref</link>          (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur);
int         <link linkend="xmlSecCheckNodeName">xmlSecCheckNodeName</link>             (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecGetNextElementNode">xmlSecGetNextElementNode</link>        (<link linkend="xmlNodePtr">xmlNodePtr</link> cur);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecFindChild">xmlSecFindChild</link>                 (const <link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecFindParent">xmlSecFindParent</link>                (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecFindNode">xmlSecFindNode</link>                  (const <link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecAddChild">xmlSecAddChild</link>                  (<link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecAddNextSibling">xmlSecAddNextSibling</link>            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
<link linkend="xmlNodePtr">xmlNodePtr</link>  <link linkend="xmlSecAddPrevSibling">xmlSecAddPrevSibling</link>            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);
int         <link linkend="xmlSecReplaceNode">xmlSecReplaceNode</link>               (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> newNode);
int         <link linkend="xmlSecReplaceContent">xmlSecReplaceContent</link>            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> newNode);
int         <link linkend="xmlSecReplaceNodeBuffer">xmlSecReplaceNodeBuffer</link>         (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);
void        <link linkend="xmlSecAddIDs">xmlSecAddIDs</link>                    (<link linkend="xmlDocPtr">xmlDocPtr</link> doc,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> **ids);
#define     <link linkend="xmlSecIsHex">xmlSecIsHex</link>                     (c)
#define     <link linkend="xmlSecGetHex">xmlSecGetHex</link>                    (c)
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecNodeGetName">xmlSecNodeGetName()</title>
<programlisting>#define     xmlSecNodeGetName(node)</programlisting>
<para>
Macro. Returns node's name.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>		the pointer to node.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecGetNodeNsHref">xmlSecGetNodeNsHref ()</title>
<programlisting>const <link linkend="xmlChar">xmlChar</link>* xmlSecGetNodeNsHref          (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cur</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecCheckNodeName">xmlSecCheckNodeName ()</title>
<programlisting>int         xmlSecCheckNodeName             (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Checks that the node has a given name and a given namespace href.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cur</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name,
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the namespace href.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>1 if the node matches or 0 otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecGetNextElementNode">xmlSecGetNextElementNode ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecGetNextElementNode        (<link linkend="xmlNodePtr">xmlNodePtr</link> cur);</programlisting>
<para>
Seraches for the next element node.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cur</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to next element node or NULL if it is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecFindChild">xmlSecFindChild ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecFindChild                 (const <link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Searches a direct child of the <parameter>parent</parameter> node having given name and 
namespace href.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> the pointer to XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the namespace href (may be NULL).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to the found node or NULL if an error occurs or 
node is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecFindParent">xmlSecFindParent ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecFindParent                (const <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Searches the ancestors axis of the <parameter>cur</parameter> node for a node having given name 
and namespace href.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>cur</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the namespace href (may be NULL).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to the found node or NULL if an error occurs or 
node is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecFindNode">xmlSecFindNode ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecFindNode                  (const <link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Searches all children of the <parameter>parent</parameter> node having given name and 
namespace href.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> the pointer to XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the namespace href (may be NULL).
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to the found node or NULL if an error occurs or 
node is not found.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecAddChild">xmlSecAddChild ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecAddChild                  (<link linkend="xmlNodePtr">xmlNodePtr</link> parent,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Adds a child to the node <parameter>parent</parameter> with given <parameter>name</parameter> and namespace <parameter>ns</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>parent</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the new node name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the new node namespace.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new node or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecAddNextSibling">xmlSecAddNextSibling ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecAddNextSibling            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Adds next sibling to the node <parameter>node</parameter> with given <parameter>name</parameter> and namespace <parameter>ns</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the new node name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the new node namespace.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new node or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecAddPrevSibling">xmlSecAddPrevSibling ()</title>
<programlisting><link linkend="xmlNodePtr">xmlNodePtr</link>  xmlSecAddPrevSibling            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             const <link linkend="xmlChar">xmlChar</link> *ns);</programlisting>
<para>
Adds prev sibling to the node <parameter>node</parameter> with given <parameter>name</parameter> and namespace <parameter>ns</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry> the new node name.
</entry></row>
<row><entry align="right"><parameter>ns</parameter>&nbsp;:</entry>
<entry> the new node namespace.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new node or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecReplaceNode">xmlSecReplaceNode ()</title>
<programlisting>int         xmlSecReplaceNode               (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> newNode);</programlisting>
<para>
Swaps the <parameter>node</parameter> and <parameter>newNode</parameter> in the XML tree.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the current node.
</entry></row>
<row><entry align="right"><parameter>newNode</parameter>&nbsp;:</entry>
<entry> the new node.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecReplaceContent">xmlSecReplaceContent ()</title>
<programlisting>int         xmlSecReplaceContent            (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> newNode);</programlisting>
<para>
Swaps the content of <parameter>node</parameter> and <parameter>newNode</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the current node.
</entry></row>
<row><entry align="right"><parameter>newNode</parameter>&nbsp;:</entry>
<entry> the new node.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecReplaceNodeBuffer">xmlSecReplaceNodeBuffer ()</title>
<programlisting>int         xmlSecReplaceNodeBuffer         (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             unsigned char *buffer,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Swaps the <parameter>node</parameter> and the parsed XML data from the <parameter>buffer</parameter> in the XML tree.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the current node.
</entry></row>
<row><entry align="right"><parameter>buffer</parameter>&nbsp;:</entry>
<entry> the XML data.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the XML data size.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecAddIDs">xmlSecAddIDs ()</title>
<programlisting>void        xmlSecAddIDs                    (<link linkend="xmlDocPtr">xmlDocPtr</link> doc,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> cur,
                                             const <link linkend="xmlChar">xmlChar</link> **ids);</programlisting>
<para>
Walks thru all children of the <parameter>cur</parameter> node and adds all attributes 
from the <parameter>ids</parameter> list to the <parameter>doc</parameter> document IDs attributes hash.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>doc</parameter>&nbsp;:</entry>
<entry> the pointer to an XML document.
</entry></row>
<row><entry align="right"><parameter>cur</parameter>&nbsp;:</entry>
<entry> the pointer to an XML node.
</entry></row>
<row><entry align="right"><parameter>ids</parameter>&nbsp;:</entry>
<entry> the pointer to a NULL terminated list of ID attributes.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecIsHex">xmlSecIsHex()</title>
<programlisting>#define     xmlSecIsHex(c)</programlisting>
<para>
Macro. Returns 1 if <parameter>c</parameter> is a hex digit or 0 other wise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>c</parameter>&nbsp;:</entry>
<entry> 			the character.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecGetHex">xmlSecGetHex()</title>
<programlisting>#define     xmlSecGetHex(c)</programlisting>
<para>
Macro. Returns the hex value of the <parameter>c</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>c</parameter>&nbsp;:</entry>
<entry> 			the character,
</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
