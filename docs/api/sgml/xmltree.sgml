<refentry id="xmlsec-xmltree">
<refmeta>
<refentrytitle role="top_of_page" id="xmlsec-xmltree.top_of_page">xmltree</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xmltree</refname>
<refpurpose>XML tree operations.</refpurpose>
</refnamediv>

<refsect1 id="xmlsec-xmltree.functions" role="functions_proto">
<title role="functions_proto.title">Functions</title>
<informaltable pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="functions_return" colwidth="150px"/>
<colspec colname="functions_name"/>
<tbody>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecNodeGetName">xmlSecNodeGetName</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecGetNodeNsHref">xmlSecGetNodeNsHref</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecCheckNodeName">xmlSecCheckNodeName</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecGetNextElementNode">xmlSecGetNextElementNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecFindChild">xmlSecFindChild</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecFindParent">xmlSecFindParent</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecFindNode">xmlSecFindNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecAddChild">xmlSecAddChild</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecAddChildNode">xmlSecAddChildNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecAddNextSibling">xmlSecAddNextSibling</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecAddPrevSibling">xmlSecAddPrevSibling</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceNode">xmlSecReplaceNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceNodeAndReturn">xmlSecReplaceNodeAndReturn</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceContent">xmlSecReplaceContent</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceContentAndReturn">xmlSecReplaceContentAndReturn</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceNodeBuffer">xmlSecReplaceNodeBuffer</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecReplaceNodeBufferAndReturn">xmlSecReplaceNodeBufferAndReturn</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecNodeEncodeAndSetContent">xmlSecNodeEncodeAndSetContent</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecAddIDs">xmlSecAddIDs</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecGenerateAndAddID">xmlSecGenerateAndAddID</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecGenerateID">xmlSecGenerateID</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlDoc"><returnvalue>xmlDocPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecCreateTree">xmlSecCreateTree</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecIsEmptyNode">xmlSecIsEmptyNode</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecIsEmptyString">xmlSecIsEmptyString</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecGetQName">xmlSecGetQName</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecPrintXmlString">xmlSecPrintXmlString</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecIsHex">xmlSecIsHex</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="define_keyword">#define</entry><entry role="function_name"><link linkend="xmlSecGetHex">xmlSecGetHex</link><phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecQName2IntegerInfoConst"><returnvalue>xmlSecQName2IntegerInfoConstPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerGetInfo">xmlSecQName2IntegerGetInfo</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerGetInteger">xmlSecQName2IntegerGetInteger</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerGetIntegerFromString">xmlSecQName2IntegerGetIntegerFromString</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerGetStringFromInteger">xmlSecQName2IntegerGetStringFromInteger</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerNodeRead">xmlSecQName2IntegerNodeRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerNodeWrite">xmlSecQName2IntegerNodeWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerAttributeRead">xmlSecQName2IntegerAttributeRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerAttributeWrite">xmlSecQName2IntegerAttributeWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerDebugDump">xmlSecQName2IntegerDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerDebugXmlDump">xmlSecQName2IntegerDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlSecQName2BitMaskInfoConst"><returnvalue>xmlSecQName2BitMaskInfoConstPtr</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskGetInfo">xmlSecQName2BitMaskGetInfo</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskGetBitMask">xmlSecQName2BitMaskGetBitMask</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskNodesRead">xmlSecQName2BitMaskNodesRead</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskGetBitMaskFromString">xmlSecQName2BitMaskGetBitMaskFromString</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskGetStringFromBitMask">xmlSecQName2BitMaskGetStringFromBitMask</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="int"><returnvalue>int</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskNodesWrite">xmlSecQName2BitMaskNodesWrite</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskDebugDump">xmlSecQName2BitMaskDebugDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>
<row><entry role="function_type"><link linkend="void"><returnvalue>void</returnvalue></link>
</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskDebugXmlDump">xmlSecQName2BitMaskDebugXmlDump</link>&#160;<phrase role="c_punctuation">()</phrase></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>
<refsect1 id="xmlsec-xmltree.other" role="other_proto">
<title role="other_proto.title">Types and Values</title>
<informaltable role="enum_members_table" pgwide="1" frame="none">
<tgroup cols="2">
<colspec colname="name" colwidth="150px"/>
<colspec colname="description"/>
<tbody>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerInfo">xmlSecQName2IntegerInfo</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="xmlSecQName2IntegerInfoConst">xmlSecQName2IntegerInfoConstPtr</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="xmlSecBitMask">xmlSecBitMask</link></entry></row>
<row><entry role="datatype_keyword">struct</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskInfo">xmlSecQName2BitMaskInfo</link></entry></row>
<row><entry role="typedef_keyword">typedef</entry><entry role="function_name"><link linkend="xmlSecQName2BitMaskInfoConst">xmlSecQName2BitMaskInfoConstPtr</link></entry></row>

</tbody>
</tgroup>
</informaltable>
</refsect1>


<refsect1 id="xmlsec-xmltree.description" role="desc">
<title role="desc.title">Description</title>
<para>
XML tree operations.
</para>

</refsect1>
<refsect1 id="xmlsec-xmltree.functions_details" role="details">
<title role="details.title">Functions</title>
<refsect2 id="xmlSecNodeGetName" role="macro">
<title>xmlSecNodeGetName()</title>
<indexterm zone="xmlSecNodeGetName"><primary>xmlSecNodeGetName</primary></indexterm>
<programlisting language="C">#define             xmlSecNodeGetName(node)</programlisting>
<para>Macro. Returns node's name.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecGetNodeNsHref" role="function">
<title>xmlSecGetNodeNsHref&#160;()</title>
<indexterm zone="xmlSecGetNodeNsHref"><primary>xmlSecGetNodeNsHref</primary></indexterm>
<programlisting language="C">const <link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecGetNodeNsHref (<parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>);</programlisting>
<para>Get's node's namespace href.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> node's namespace href.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecCheckNodeName" role="function">
<title>xmlSecCheckNodeName&#160;()</title>
<indexterm zone="xmlSecCheckNodeName"><primary>xmlSecCheckNodeName</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecCheckNodeName (<parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>,
                     <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                     <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Checks that the node has a given name and a given namespace href.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name,</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the namespace href.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 1 if the node matches or 0 otherwise.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecGetNextElementNode" role="function">
<title>xmlSecGetNextElementNode&#160;()</title>
<indexterm zone="xmlSecGetNextElementNode"><primary>xmlSecGetNextElementNode</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecGetNextElementNode (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>);</programlisting>
<para>Seraches for the next element node.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to next element node or NULL if it is not found.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecFindChild" role="function">
<title>xmlSecFindChild&#160;()</title>
<indexterm zone="xmlSecFindChild"><primary>xmlSecFindChild</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecFindChild (<parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                 <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                 <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Searches a direct child of the <parameter>parent</parameter>
 node having given name and
namespace href.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the namespace href (may be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to the found node or NULL if an error occurs or
node is not found.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecFindParent" role="function">
<title>xmlSecFindParent&#160;()</title>
<indexterm zone="xmlSecFindParent"><primary>xmlSecFindParent</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecFindParent (<parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>,
                  <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                  <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Searches the ancestors axis of the <parameter>cur</parameter>
 node for a node having given name
and namespace href.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the namespace href (may be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to the found node or NULL if an error occurs or
node is not found.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecFindNode" role="function">
<title>xmlSecFindNode&#160;()</title>
<indexterm zone="xmlSecFindNode"><primary>xmlSecFindNode</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecFindNode (<parameter>const <link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Searches all children of the <parameter>parent</parameter>
 node having given name and
namespace href.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the namespace href (may be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the pointer to the found node or NULL if an error occurs or
node is not found.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecAddChild" role="function">
<title>xmlSecAddChild&#160;()</title>
<indexterm zone="xmlSecAddChild"><primary>xmlSecAddChild</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecAddChild (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Adds a child to the node <parameter>parent</parameter>
 with given <parameter>name</parameter>
 and namespace <parameter>ns</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the new node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the new node namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the new node or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecAddChildNode" role="function">
<title>xmlSecAddChildNode&#160;()</title>
<indexterm zone="xmlSecAddChildNode"><primary>xmlSecAddChildNode</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecAddChildNode (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> parent</parameter>,
                    <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> child</parameter>);</programlisting>
<para>Adds <parameter>child</parameter>
 node to the <parameter>parent</parameter>
 node.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>parent</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>child</para></entry>
<entry role="parameter_description"><para>the new node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the new node or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecAddNextSibling" role="function">
<title>xmlSecAddNextSibling&#160;()</title>
<indexterm zone="xmlSecAddNextSibling"><primary>xmlSecAddNextSibling</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecAddNextSibling (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                      <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                      <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Adds next sibling to the node <parameter>node</parameter>
 with given <parameter>name</parameter>
 and namespace <parameter>ns</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the new node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the new node namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the new node or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecAddPrevSibling" role="function">
<title>xmlSecAddPrevSibling&#160;()</title>
<indexterm zone="xmlSecAddPrevSibling"><primary>xmlSecAddPrevSibling</primary></indexterm>
<programlisting language="C"><link linkend="xmlNode"><returnvalue>xmlNodePtr</returnvalue></link>
xmlSecAddPrevSibling (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                      <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                      <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *ns</parameter>);</programlisting>
<para>Adds prev sibling to the node <parameter>node</parameter>
 with given <parameter>name</parameter>
 and namespace <parameter>ns</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the new node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ns</para></entry>
<entry role="parameter_description"><para>the new node namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the new node or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceNode" role="function">
<title>xmlSecReplaceNode&#160;()</title>
<indexterm zone="xmlSecReplaceNode"><primary>xmlSecReplaceNode</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceNode (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                   <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> newNode</parameter>);</programlisting>
<para>Swaps the <parameter>node</parameter>
 and <parameter>newNode</parameter>
 in the XML tree.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNode</para></entry>
<entry role="parameter_description"><para>the new node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceNodeAndReturn" role="function">
<title>xmlSecReplaceNodeAndReturn&#160;()</title>
<indexterm zone="xmlSecReplaceNodeAndReturn"><primary>xmlSecReplaceNodeAndReturn</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceNodeAndReturn (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                            <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> newNode</parameter>,
                            <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> *replaced</parameter>);</programlisting>
<para>Swaps the <parameter>node</parameter>
 and <parameter>newNode</parameter>
 in the XML tree.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNode</para></entry>
<entry role="parameter_description"><para>the new node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>replaced</para></entry>
<entry role="parameter_description"><para>the replaced node, or release it if NULL is given</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceContent" role="function">
<title>xmlSecReplaceContent&#160;()</title>
<indexterm zone="xmlSecReplaceContent"><primary>xmlSecReplaceContent</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceContent (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                      <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> newNode</parameter>);</programlisting>
<para>Swaps the content of <parameter>node</parameter>
 and <parameter>newNode</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNode</para></entry>
<entry role="parameter_description"><para>the new node.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceContentAndReturn" role="function">
<title>xmlSecReplaceContentAndReturn&#160;()</title>
<indexterm zone="xmlSecReplaceContentAndReturn"><primary>xmlSecReplaceContentAndReturn</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceContentAndReturn (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                               <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> newNode</parameter>,
                               <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> *replaced</parameter>);</programlisting>
<para>Swaps the content of <parameter>node</parameter>
 and <parameter>newNode</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>newNode</para></entry>
<entry role="parameter_description"><para>the new node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>replaced</para></entry>
<entry role="parameter_description"><para>the replaced nodes, or release them if NULL is given</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceNodeBuffer" role="function">
<title>xmlSecReplaceNodeBuffer&#160;()</title>
<indexterm zone="xmlSecReplaceNodeBuffer"><primary>xmlSecReplaceNodeBuffer</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceNodeBuffer (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                         <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buffer</parameter>,
                         <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> size</parameter>);</programlisting>
<para>Swaps the <parameter>node</parameter>
 and the parsed XML data from the <parameter>buffer</parameter>
 in the XML tree.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the XML data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the XML data size.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecReplaceNodeBufferAndReturn" role="function">
<title>xmlSecReplaceNodeBufferAndReturn&#160;()</title>
<indexterm zone="xmlSecReplaceNodeBufferAndReturn"><primary>xmlSecReplaceNodeBufferAndReturn</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecReplaceNodeBufferAndReturn (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                  <parameter>const <link linkend="xmlSecByte"><type>xmlSecByte</type></link> *buffer</parameter>,
                                  <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> size</parameter>,
                                  <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> *replaced</parameter>);</programlisting>
<para>Swaps the <parameter>node</parameter>
 and the parsed XML data from the <parameter>buffer</parameter>
 in the XML tree.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the current node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the XML data.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>size</para></entry>
<entry role="parameter_description"><para>the XML data size.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>replaced</para></entry>
<entry role="parameter_description"><para>the replaced nodes, or release them if NULL is given</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecNodeEncodeAndSetContent" role="function">
<title>xmlSecNodeEncodeAndSetContent&#160;()</title>
<indexterm zone="xmlSecNodeEncodeAndSetContent"><primary>xmlSecNodeEncodeAndSetContent</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecNodeEncodeAndSetContent (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *buffer</parameter>);</programlisting>
<para>Encodes "special" characters in the <parameter>buffer</parameter>
 and sets the result
as the node content.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>buffer</para></entry>
<entry role="parameter_description"><para>the pointer to the node content.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecAddIDs" role="function">
<title>xmlSecAddIDs&#160;()</title>
<indexterm zone="xmlSecAddIDs"><primary>xmlSecAddIDs</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecAddIDs (<parameter><link linkend="xmlDoc"><type>xmlDocPtr</type></link> doc</parameter>,
              <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> cur</parameter>,
              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> **ids</parameter>);</programlisting>
<para>Walks thru all children of the <parameter>cur</parameter>
 node and adds all attributes
from the <parameter>ids</parameter>
 list to the <parameter>doc</parameter>
 document IDs attributes hash.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>doc</para></entry>
<entry role="parameter_description"><para>the pointer to an XML document.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>cur</para></entry>
<entry role="parameter_description"><para>the pointer to an XML node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>ids</para></entry>
<entry role="parameter_description"><para>the pointer to a NULL terminated list of ID attributes.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecGenerateAndAddID" role="function">
<title>xmlSecGenerateAndAddID&#160;()</title>
<indexterm zone="xmlSecGenerateAndAddID"><primary>xmlSecGenerateAndAddID</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecGenerateAndAddID (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                        <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *attrName</parameter>,
                        <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *prefix</parameter>,
                        <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> len</parameter>);</programlisting>
<para>Generates a unique ID in the format &lt;<parameter>prefix</parameter>
>base64-encoded(<parameter>len</parameter>
 random bytes)
and puts it in the attribute <parameter>attrName</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the node to ID attr to.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attrName</para></entry>
<entry role="parameter_description"><para>the ID attr name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>prefix</para></entry>
<entry role="parameter_description"><para>the prefix to add to the generated ID (can be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>len</para></entry>
<entry role="parameter_description"><para>the length of ID.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecGenerateID" role="function">
<title>xmlSecGenerateID&#160;()</title>
<indexterm zone="xmlSecGenerateID"><primary>xmlSecGenerateID</primary></indexterm>
<programlisting language="C"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecGenerateID (<parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *prefix</parameter>,
                  <parameter><link linkend="xmlSecSize"><type>xmlSecSize</type></link> len</parameter>);</programlisting>
<para>Generates a unique ID in the format &lt;<parameter>prefix</parameter>
>base64-encoded(<parameter>len</parameter>
 random bytes).
The caller is responsible for freeing returned string using <parameter>xmlFree</parameter>
 function.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>prefix</para></entry>
<entry role="parameter_description"><para>the prefix to add to the generated ID (can be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>len</para></entry>
<entry role="parameter_description"><para>the length of ID.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to generated ID string or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecCreateTree" role="function">
<title>xmlSecCreateTree&#160;()</title>
<indexterm zone="xmlSecCreateTree"><primary>xmlSecCreateTree</primary></indexterm>
<programlisting language="C"><link linkend="xmlDoc"><returnvalue>xmlDocPtr</returnvalue></link>
xmlSecCreateTree (<parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *rootNodeName</parameter>,
                  <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *rootNodeNs</parameter>);</programlisting>
<para>Creates a new XML tree with one root node <parameter>rootNodeName</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>rootNodeName</para></entry>
<entry role="parameter_description"><para>the root node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>rootNodeNs</para></entry>
<entry role="parameter_description"><para>the root node namespace (otpional).</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the newly created tree or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecIsEmptyNode" role="function">
<title>xmlSecIsEmptyNode&#160;()</title>
<indexterm zone="xmlSecIsEmptyNode"><primary>xmlSecIsEmptyNode</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecIsEmptyNode (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>);</programlisting>
<para>Checks whethere the <parameter>node</parameter>
 is empty (i.e. has only whitespaces children).</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the node to check</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 1 if <parameter>node</parameter>
is empty, 0 otherwise or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecIsEmptyString" role="function">
<title>xmlSecIsEmptyString&#160;()</title>
<indexterm zone="xmlSecIsEmptyString"><primary>xmlSecIsEmptyString</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecIsEmptyString (<parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *str</parameter>);</programlisting>
<para>Checks whethere the <parameter>str</parameter>
 is empty (i.e. has only whitespaces children).</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>str</para></entry>
<entry role="parameter_description"><para>the string to check</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 1 if <parameter>str</parameter>
is empty, 0 otherwise or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecGetQName" role="function">
<title>xmlSecGetQName&#160;()</title>
<indexterm zone="xmlSecGetQName"><primary>xmlSecGetQName</primary></indexterm>
<programlisting language="C"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecGetQName (<parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *href</parameter>,
                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *local</parameter>);</programlisting>
<para>Creates QName (prefix:local) from <parameter>href</parameter>
 and <parameter>local</parameter>
 in the context of the <parameter>node</parameter>
.
Caller is responsible for freeing returned string with xmlFree.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the context node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>href</para></entry>
<entry role="parameter_description"><para>the QName href (can be NULL).</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>local</para></entry>
<entry role="parameter_description"><para>the QName local part.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> qname or NULL if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecPrintXmlString" role="function">
<title>xmlSecPrintXmlString&#160;()</title>
<indexterm zone="xmlSecPrintXmlString"><primary>xmlSecPrintXmlString</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecPrintXmlString (<parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *fd</parameter>,
                      <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *str</parameter>);</programlisting>
<para>Encodes the <parameter>str</parameter>
 (e.g. replaces '&amp;' with '&amp;') and writes it to <parameter>fd</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>fd</para></entry>
<entry role="parameter_description"><para>the file descriptor to write the XML string to</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>str</para></entry>
<entry role="parameter_description"><para>the string</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> he number of bytes transmitted or a negative value if an error occurs.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecIsHex" role="macro">
<title>xmlSecIsHex()</title>
<indexterm zone="xmlSecIsHex"><primary>xmlSecIsHex</primary></indexterm>
<programlisting language="C">#define             xmlSecIsHex(c)</programlisting>
<para>Macro. Returns 1 if <parameter>c</parameter>
 is a hex digit or 0 other wise.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>c</para></entry>
<entry role="parameter_description"><para>the character.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecGetHex" role="macro">
<title>xmlSecGetHex()</title>
<indexterm zone="xmlSecGetHex"><primary>xmlSecGetHex</primary></indexterm>
<programlisting language="C">#define             xmlSecGetHex(c)</programlisting>
<para>Macro. Returns the hex value of the <parameter>c</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>c</para></entry>
<entry role="parameter_description"><para>the character,</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerGetInfo" role="function">
<title>xmlSecQName2IntegerGetInfo&#160;()</title>
<indexterm zone="xmlSecQName2IntegerGetInfo"><primary>xmlSecQName2IntegerGetInfo</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecQName2IntegerInfoConst"><returnvalue>xmlSecQName2IntegerInfoConstPtr</returnvalue></link>
xmlSecQName2IntegerGetInfo (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                            <parameter><link linkend="int"><type>int</type></link> intValue</parameter>);</programlisting>
<para>Maps integer <parameter>intValue</parameter>
 to a QName prefix.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> the QName info that is mapped to <parameter>intValue</parameter>
or NULL if such value
is not found.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerGetInteger" role="function">
<title>xmlSecQName2IntegerGetInteger&#160;()</title>
<indexterm zone="xmlSecQName2IntegerGetInteger"><primary>xmlSecQName2IntegerGetInteger</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerGetInteger (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qnameHref</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qnameLocalPart</parameter>,
                               <parameter><link linkend="int"><type>int</type></link> *intValue</parameter>);</programlisting>
<para>Maps qname qname to an integer and returns it in <parameter>intValue</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qnameHref</para></entry>
<entry role="parameter_description"><para>the qname href value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qnameLocalPart</para></entry>
<entry role="parameter_description"><para>the qname local part value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the pointer to result integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerGetIntegerFromString" role="function">
<title>xmlSecQName2IntegerGetIntegerFromString&#160;()</title>
<indexterm zone="xmlSecQName2IntegerGetIntegerFromString"><primary>xmlSecQName2IntegerGetIntegerFromString</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerGetIntegerFromString
                               (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                                <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qname</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> *intValue</parameter>);</programlisting>
<para>Converts <parameter>qname</parameter>
 into integer in context of <parameter>node</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>the qname string.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the pointer to result integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerGetStringFromInteger" role="function">
<title>xmlSecQName2IntegerGetStringFromInteger&#160;()</title>
<indexterm zone="xmlSecQName2IntegerGetStringFromInteger"><primary>xmlSecQName2IntegerGetStringFromInteger</primary></indexterm>
<programlisting language="C"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecQName2IntegerGetStringFromInteger
                               (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                                <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                <parameter><link linkend="int"><type>int</type></link> intValue</parameter>);</programlisting>
<para>Creates qname string for <parameter>intValue</parameter>
 in context of given <parameter>node</parameter>
. Caller
is responsible for freeing returned string with <parameter>xmlFree</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly allocated string on success or NULL if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerNodeRead" role="function">
<title>xmlSecQName2IntegerNodeRead&#160;()</title>
<indexterm zone="xmlSecQName2IntegerNodeRead"><primary>xmlSecQName2IntegerNodeRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerNodeRead (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                             <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                             <parameter><link linkend="int"><type>int</type></link> *intValue</parameter>);</programlisting>
<para>Reads the content of <parameter>node</parameter>
 and converts it to an integer using mapping
from <parameter>info</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the pointer to result integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerNodeWrite" role="function">
<title>xmlSecQName2IntegerNodeWrite&#160;()</title>
<indexterm zone="xmlSecQName2IntegerNodeWrite"><primary>xmlSecQName2IntegerNodeWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerNodeWrite (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                              <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                              <parameter><link linkend="int"><type>int</type></link> intValue</parameter>);</programlisting>
<para>Creates new child node in <parameter>node</parameter>
 and sets its value to <parameter>intValue</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the parent node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeName</para></entry>
<entry role="parameter_description"><para>the child node name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeNs</para></entry>
<entry role="parameter_description"><para>the child node namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerAttributeRead" role="function">
<title>xmlSecQName2IntegerAttributeRead&#160;()</title>
<indexterm zone="xmlSecQName2IntegerAttributeRead"><primary>xmlSecQName2IntegerAttributeRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerAttributeRead (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                                  <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                  <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *attrName</parameter>,
                                  <parameter><link linkend="int"><type>int</type></link> *intValue</parameter>);</programlisting>
<para>Gets the value of <parameter>attrName</parameter>
 atrtibute from <parameter>node</parameter>
 and converts it to integer
according to <parameter>info</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the element node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attrName</para></entry>
<entry role="parameter_description"><para>the attribute name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the pointer to result integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerAttributeWrite" role="function">
<title>xmlSecQName2IntegerAttributeWrite&#160;()</title>
<indexterm zone="xmlSecQName2IntegerAttributeWrite"><primary>xmlSecQName2IntegerAttributeWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2IntegerAttributeWrite (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                                   <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                   <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *attrName</parameter>,
                                   <parameter><link linkend="int"><type>int</type></link> intValue</parameter>);</programlisting>
<para>Converts <parameter>intValue</parameter>
 to a qname and sets it to the value of
attribute <parameter>attrName</parameter>
 in <parameter>node</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the parent node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>attrName</para></entry>
<entry role="parameter_description"><para>the name of attribute.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerDebugDump" role="function">
<title>xmlSecQName2IntegerDebugDump&#160;()</title>
<indexterm zone="xmlSecQName2IntegerDebugDump"><primary>xmlSecQName2IntegerDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecQName2IntegerDebugDump (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                              <parameter><link linkend="int"><type>int</type></link> intValue</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                              <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints <parameter>intValue</parameter>
 into <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the value name to print.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2IntegerDebugXmlDump" role="function">
<title>xmlSecQName2IntegerDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecQName2IntegerDebugXmlDump"><primary>xmlSecQName2IntegerDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecQName2IntegerDebugXmlDump (<parameter><link linkend="xmlSecQName2IntegerInfoConst"><type>xmlSecQName2IntegerInfoConstPtr</type></link> info</parameter>,
                                 <parameter><link linkend="int"><type>int</type></link> intValue</parameter>,
                                 <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                                 <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints <parameter>intValue</parameter>
 into <parameter>output</parameter>
 in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>intValue</para></entry>
<entry role="parameter_description"><para>the integer value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the value name to print.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskGetInfo" role="function">
<title>xmlSecQName2BitMaskGetInfo&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskGetInfo"><primary>xmlSecQName2BitMaskGetInfo</primary></indexterm>
<programlisting language="C"><link linkend="xmlSecQName2BitMaskInfoConst"><returnvalue>xmlSecQName2BitMaskInfoConstPtr</returnvalue></link>
xmlSecQName2BitMaskGetInfo (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                            <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> mask</parameter>);</programlisting>
<para>Converts <parameter>mask</parameter>
 to qname.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the bit mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to the qname info for <parameter>mask</parameter>
or NULL if mask is unknown.</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskGetBitMask" role="function">
<title>xmlSecQName2BitMaskGetBitMask&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskGetBitMask"><primary>xmlSecQName2BitMaskGetBitMask</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2BitMaskGetBitMask (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qnameLocalPart</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qnameHref</parameter>,
                               <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> *mask</parameter>);</programlisting>
<para>Converts <parameter>qnameLocalPart</parameter>
 to <parameter>mask</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qnameLocalPart</para></entry>
<entry role="parameter_description"><para>the qname LocalPart value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qnameHref</para></entry>
<entry role="parameter_description"><para>the qname Href value.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the pointer to result mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskNodesRead" role="function">
<title>xmlSecQName2BitMaskNodesRead&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskNodesRead"><primary>xmlSecQName2BitMaskNodesRead</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2BitMaskNodesRead (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                              <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> *node</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                              <parameter><link linkend="int"><type>int</type></link> stopOnUnknown</parameter>,
                              <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> *mask</parameter>);</programlisting>
<para>Reads &lt;<parameter>nodeNs</parameter>
:<parameter>nodeName</parameter>
> elements and puts the result bit mask
into <parameter>mask</parameter>
. When function exits, <parameter>node</parameter>
 points to the first element node
after all the &lt;<parameter>nodeNs</parameter>
:<parameter>nodeName</parameter>
> elements.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the start.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeName</para></entry>
<entry role="parameter_description"><para>the mask nodes name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeNs</para></entry>
<entry role="parameter_description"><para>the mask nodes namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>stopOnUnknown</para></entry>
<entry role="parameter_description"><para>if this flag is set then function exits if unknown
value was found.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the pointer to result mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskGetBitMaskFromString" role="function">
<title>xmlSecQName2BitMaskGetBitMaskFromString&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskGetBitMaskFromString"><primary>xmlSecQName2BitMaskGetBitMaskFromString</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2BitMaskGetBitMaskFromString
                               (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                                <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *qname</parameter>,
                                <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> *mask</parameter>);</programlisting>
<para>Converts <parameter>qname</parameter>
 into integer in context of <parameter>node</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>qname</para></entry>
<entry role="parameter_description"><para>the qname string.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the pointer to result msk value.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskGetStringFromBitMask" role="function">
<title>xmlSecQName2BitMaskGetStringFromBitMask&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskGetStringFromBitMask"><primary>xmlSecQName2BitMaskGetStringFromBitMask</primary></indexterm>
<programlisting language="C"><link linkend="xmlChar"><returnvalue>xmlChar</returnvalue></link>&#160;*
xmlSecQName2BitMaskGetStringFromBitMask
                               (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                                <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                                <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> mask</parameter>);</programlisting>
<para>Creates qname string for <parameter>mask</parameter>
 in context of given <parameter>node</parameter>
. Caller
is responsible for freeing returned string with <parameter>xmlFree</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->integer mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the pointer to node.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> pointer to newly allocated string on success or NULL if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskNodesWrite" role="function">
<title>xmlSecQName2BitMaskNodesWrite&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskNodesWrite"><primary>xmlSecQName2BitMaskNodesWrite</primary></indexterm>
<programlisting language="C"><link linkend="int"><returnvalue>int</returnvalue></link>
xmlSecQName2BitMaskNodesWrite (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                               <parameter><link linkend="xmlNode"><type>xmlNodePtr</type></link> node</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeName</parameter>,
                               <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *nodeNs</parameter>,
                               <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> mask</parameter>);</programlisting>
<para>Writes &lt;<parameter>nodeNs</parameter>
:<parameter>nodeName</parameter>
> elemnts with values from <parameter>mask</parameter>
 to <parameter>node</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>node</para></entry>
<entry role="parameter_description"><para>the parent element for mask nodes.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeName</para></entry>
<entry role="parameter_description"><para>the mask nodes name.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>nodeNs</para></entry>
<entry role="parameter_description"><para>the mask nodes namespace.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the bit mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3><refsect3 role="returns">
<title>Returns</title>
<para> 0 on success or a negative value if an error occurs,</para>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskDebugDump" role="function">
<title>xmlSecQName2BitMaskDebugDump&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskDebugDump"><primary>xmlSecQName2BitMaskDebugDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecQName2BitMaskDebugDump (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                              <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> mask</parameter>,
                              <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                              <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints debug information about <parameter>mask</parameter>
 to <parameter>output</parameter>
.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the bit mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the value name to print.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>
<refsect2 id="xmlSecQName2BitMaskDebugXmlDump" role="function">
<title>xmlSecQName2BitMaskDebugXmlDump&#160;()</title>
<indexterm zone="xmlSecQName2BitMaskDebugXmlDump"><primary>xmlSecQName2BitMaskDebugXmlDump</primary></indexterm>
<programlisting language="C"><link linkend="void"><returnvalue>void</returnvalue></link>
xmlSecQName2BitMaskDebugXmlDump (<parameter><link linkend="xmlSecQName2BitMaskInfoConst"><type>xmlSecQName2BitMaskInfoConstPtr</type></link> info</parameter>,
                                 <parameter><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link> mask</parameter>,
                                 <parameter>const <link linkend="xmlChar"><type>xmlChar</type></link> *name</parameter>,
                                 <parameter><link linkend="FILE:CAPS"><type>FILE</type></link> *output</parameter>);</programlisting>
<para>Prints debug information about <parameter>mask</parameter>
 to <parameter>output</parameter>
 in XML format.</para>
<refsect3 role="parameters">
<title>Parameters</title>
<informaltable role="parameters_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="parameters_name" colwidth="150px"/>
<colspec colname="parameters_description"/>
<colspec colname="parameters_annotations" colwidth="200px"/>
<tbody>
<row><entry role="parameter_name"><para>info</para></entry>
<entry role="parameter_description"><para>the qname&lt;->bit mask mapping information.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>mask</para></entry>
<entry role="parameter_description"><para>the bit mask.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>name</para></entry>
<entry role="parameter_description"><para>the value name to print.</para></entry>
<entry role="parameter_annotations"></entry></row>
<row><entry role="parameter_name"><para>output</para></entry>
<entry role="parameter_description"><para>the pointer to output FILE.</para></entry>
<entry role="parameter_annotations"></entry></row>
</tbody></tgroup></informaltable>
</refsect3></refsect2>

</refsect1>
<refsect1 id="xmlsec-xmltree.other_details" role="details">
<title role="details.title">Types and Values</title>
<refsect2 id="xmlSecQName2IntegerInfo" role="struct">
<title>struct xmlSecQName2IntegerInfo</title>
<indexterm zone="xmlSecQName2IntegerInfo"><primary>xmlSecQName2IntegerInfo</primary></indexterm>
<programlisting language="C">struct xmlSecQName2IntegerInfo {
    const xmlChar*      qnameHref;
    const xmlChar*      qnameLocalPart;
    int                 intValue;
};
</programlisting>
<para>QName &lt;-> Integer conversion definition.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecQName2IntegerInfo.qnameHref">qnameHref</structfield>;</para></entry>
<entry role="struct_member_description"><para>the QName href</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecQName2IntegerInfo.qnameLocalPart">qnameLocalPart</structfield>;</para></entry>
<entry role="struct_member_description"><para>the QName local</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="int"><type>int</type></link>&#160;<structfield id="xmlSecQName2IntegerInfo.intValue">intValue</structfield>;</para></entry>
<entry role="struct_member_description"><para>the integer value</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecQName2IntegerInfoConstPtr" role="typedef">
<title>xmlSecQName2IntegerInfoConstPtr</title>
<indexterm zone="xmlSecQName2IntegerInfoConstPtr"><primary>xmlSecQName2IntegerInfoConstPtr</primary></indexterm>
<programlisting language="C">typedef const xmlSecQName2IntegerInfo *         xmlSecQName2IntegerInfoConstPtr;
</programlisting>
<para>Pointer to constant QName &lt;-> Integer conversion definition.</para>
</refsect2>
<refsect2 id="xmlSecBitMask" role="typedef">
<title>xmlSecBitMask</title>
<indexterm zone="xmlSecBitMask"><primary>xmlSecBitMask</primary></indexterm>
<programlisting language="C">typedef unsigned int                                    xmlSecBitMask;
</programlisting>
<para>Bitmask datatype.</para>
</refsect2>
<refsect2 id="xmlSecQName2BitMaskInfo" role="struct">
<title>struct xmlSecQName2BitMaskInfo</title>
<indexterm zone="xmlSecQName2BitMaskInfo"><primary>xmlSecQName2BitMaskInfo</primary></indexterm>
<programlisting language="C">struct xmlSecQName2BitMaskInfo {
    const xmlChar*      qnameHref;
    const xmlChar*      qnameLocalPart;
    xmlSecBitMask       mask;
};
</programlisting>
<para>QName &lt;-> Bitmask conversion definition.</para>
<refsect3 role="struct_members">
<title>Members</title>
<informaltable role="struct_members_table" pgwide="1" frame="none">
<tgroup cols="3">
<colspec colname="struct_members_name" colwidth="300px"/>
<colspec colname="struct_members_description"/>
<colspec colname="struct_members_annotations" colwidth="200px"/>
<tbody>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecQName2BitMaskInfo.qnameHref">qnameHref</structfield>;</para></entry>
<entry role="struct_member_description"><para>the QName href</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para>const&#160;<link linkend="xmlChar"><type>xmlChar</type></link>&#160;*<structfield id="xmlSecQName2BitMaskInfo.qnameLocalPart">qnameLocalPart</structfield>;</para></entry>
<entry role="struct_member_description"><para>the QName local</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
<row><entry role="struct_member_name"><para><link linkend="xmlSecBitMask"><type>xmlSecBitMask</type></link>&#160;<structfield id="xmlSecQName2BitMaskInfo.mask">mask</structfield>;</para></entry>
<entry role="struct_member_description"><para>the bitmask value</para></entry>
<entry role="struct_member_annotations"></entry>
</row>
</tbody></tgroup></informaltable>
</refsect3>
</refsect2>
<refsect2 id="xmlSecQName2BitMaskInfoConstPtr" role="typedef">
<title>xmlSecQName2BitMaskInfoConstPtr</title>
<indexterm zone="xmlSecQName2BitMaskInfoConstPtr"><primary>xmlSecQName2BitMaskInfoConstPtr</primary></indexterm>
<programlisting language="C">typedef const xmlSecQName2BitMaskInfo*          xmlSecQName2BitMaskInfoConstPtr;
</programlisting>
<para>Pointer to constant QName &lt;-> Bitmask conversion definition.</para>
</refsect2>

</refsect1>

</refentry>
