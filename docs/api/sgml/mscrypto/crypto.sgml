<refentry id="xmlsec-mscrypto-crypto">
<refmeta>
<refentrytitle role="top_of_page">crypto</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC-MSCRYPTO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>crypto</refname>
<refpurpose>Crypto transforms implementation for MS Crypto.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



<link linkend="xmlSecCryptoDLFunctions">xmlSecCryptoDLFunctionsPtr</link> <link linkend="xmlSecCryptoGetFunctions-mscrypto">xmlSecCryptoGetFunctions_mscrypto</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoInit">xmlSecMSCryptoInit</link>              (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoShutdown">xmlSecMSCryptoShutdown</link>          (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoKeysMngrInit">xmlSecMSCryptoKeysMngrInit</link>      (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoGenerateRandom">xmlSecMSCryptoGenerateRandom</link>    (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buffer,
                                             <link linkend="size-t">size_t</link> size);
<link linkend="void">void</link>        <link linkend="xmlSecMSCryptoErrorsDefaultCallback">xmlSecMSCryptoErrorsDefaultCallback</link>
                                            (const <link linkend="char">char</link> *file,
                                             <link linkend="int">int</link> line,
                                             const <link linkend="char">char</link> *func,
                                             const <link linkend="char">char</link> *errorObject,
                                             const <link linkend="char">char</link> *errorSubject,
                                             <link linkend="int">int</link> reason,
                                             const <link linkend="char">char</link> *msg);
<link linkend="LPWSTR:CAPS">LPWSTR</link>      <link linkend="xmlSecMSCryptoConvertLocaleToUnicode">xmlSecMSCryptoConvertLocaleToUnicode</link>
                                            (const <link linkend="char">char</link> *str);
<link linkend="LPWSTR:CAPS">LPWSTR</link>      <link linkend="xmlSecMSCryptoConvertUtf8ToUnicode">xmlSecMSCryptoConvertUtf8ToUnicode</link>
                                            (const <link linkend="xmlChar">xmlChar</link> *str);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecMSCryptoConvertUnicodeToUtf8">xmlSecMSCryptoConvertUnicodeToUtf8</link>
                                            (<link linkend="LPCWSTR:CAPS">LPCWSTR</link> str);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecMSCryptoConvertLocaleToUtf8">xmlSecMSCryptoConvertLocaleToUtf8</link>
                                            (const <link linkend="char">char</link> *str);
<link linkend="char">char</link>*       <link linkend="xmlSecMSCryptoConvertUtf8ToLocale">xmlSecMSCryptoConvertUtf8ToLocale</link>
                                            (const <link linkend="xmlChar">xmlChar</link> *str);
<link linkend="xmlChar">xmlChar</link>*    <link linkend="xmlSecMSCryptoConvertTstrToUtf8">xmlSecMSCryptoConvertTstrToUtf8</link> (<link linkend="LPCTSTR:CAPS">LPCTSTR</link> str);
<link linkend="LPTSTR:CAPS">LPTSTR</link>      <link linkend="xmlSecMSCryptoConvertUtf8ToTstr">xmlSecMSCryptoConvertUtf8ToTstr</link> (const <link linkend="xmlChar">xmlChar</link> *str);
#define     <link linkend="xmlSecMSCryptoKeyDataDsaId">xmlSecMSCryptoKeyDataDsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataDsaGetKlass">xmlSecMSCryptoKeyDataDsaGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformDsaSha1Id">xmlSecMSCryptoTransformDsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformDsaSha1GetKlass">xmlSecMSCryptoTransformDsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoKeyDataGost2001Id">xmlSecMSCryptoKeyDataGost2001Id</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataGost2001GetKlass">xmlSecMSCryptoKeyDataGost2001GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformGost2001GostR3411-94Id">xmlSecMSCryptoTransformGost2001GostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformGost2001GostR3411-94GetKlass">xmlSecMSCryptoTransformGost2001GostR3411_94GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoKeyDataRsaId">xmlSecMSCryptoKeyDataRsaId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataRsaGetKlass">xmlSecMSCryptoKeyDataRsaGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaMd5Id">xmlSecMSCryptoTransformRsaMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaMd5GetKlass">xmlSecMSCryptoTransformRsaMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaSha1Id">xmlSecMSCryptoTransformRsaSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaSha1GetKlass">xmlSecMSCryptoTransformRsaSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaSha256Id">xmlSecMSCryptoTransformRsaSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaSha256GetKlass">xmlSecMSCryptoTransformRsaSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaSha384Id">xmlSecMSCryptoTransformRsaSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaSha384GetKlass">xmlSecMSCryptoTransformRsaSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaSha512Id">xmlSecMSCryptoTransformRsaSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaSha512GetKlass">xmlSecMSCryptoTransformRsaSha512GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaPkcs1Id">xmlSecMSCryptoTransformRsaPkcs1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaPkcs1GetKlass">xmlSecMSCryptoTransformRsaPkcs1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformRsaOaepId">xmlSecMSCryptoTransformRsaOaepId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformRsaOaepGetKlass">xmlSecMSCryptoTransformRsaOaepGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformMd5Id">xmlSecMSCryptoTransformMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformMd5GetKlass">xmlSecMSCryptoTransformMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformSha1Id">xmlSecMSCryptoTransformSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformSha1GetKlass">xmlSecMSCryptoTransformSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformSha256Id">xmlSecMSCryptoTransformSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformSha256GetKlass">xmlSecMSCryptoTransformSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformSha384Id">xmlSecMSCryptoTransformSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformSha384GetKlass">xmlSecMSCryptoTransformSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformSha512Id">xmlSecMSCryptoTransformSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformSha512GetKlass">xmlSecMSCryptoTransformSha512GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformGostR3411-94Id">xmlSecMSCryptoTransformGostR3411_94Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformGostR3411-94GetKlass">xmlSecMSCryptoTransformGostR3411_94GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoKeyDataAesId">xmlSecMSCryptoKeyDataAesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataAesGetKlass">xmlSecMSCryptoKeyDataAesGetKlass</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoKeyDataAesSet">xmlSecMSCryptoKeyDataAesSet</link>     (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);
#define     <link linkend="xmlSecMSCryptoTransformAes128CbcId">xmlSecMSCryptoTransformAes128CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformAes128CbcGetKlass">xmlSecMSCryptoTransformAes128CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformAes192CbcId">xmlSecMSCryptoTransformAes192CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformAes192CbcGetKlass">xmlSecMSCryptoTransformAes192CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformAes256CbcId">xmlSecMSCryptoTransformAes256CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformAes256CbcGetKlass">xmlSecMSCryptoTransformAes256CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformKWAes128Id">xmlSecMSCryptoTransformKWAes128Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformKWAes128GetKlass">xmlSecMSCryptoTransformKWAes128GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformKWAes192Id">xmlSecMSCryptoTransformKWAes192Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformKWAes192GetKlass">xmlSecMSCryptoTransformKWAes192GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformKWAes256Id">xmlSecMSCryptoTransformKWAes256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformKWAes256GetKlass">xmlSecMSCryptoTransformKWAes256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoKeyDataDesId">xmlSecMSCryptoKeyDataDesId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataDesGetKlass">xmlSecMSCryptoKeyDataDesGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformDes3CbcId">xmlSecMSCryptoTransformDes3CbcId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformDes3CbcGetKlass">xmlSecMSCryptoTransformDes3CbcGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformKWDes3Id">xmlSecMSCryptoTransformKWDes3Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformKWDes3GetKlass">xmlSecMSCryptoTransformKWDes3GetKlass</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoHmacGetMinOutputLength">xmlSecMSCryptoHmacGetMinOutputLength</link>
                                            (void);
<link linkend="void">void</link>        <link linkend="xmlSecMSCryptoHmacSetMinOutputLength">xmlSecMSCryptoHmacSetMinOutputLength</link>
                                            (<link linkend="int">int</link> min_length);
#define     <link linkend="xmlSecMSCryptoKeyDataHmacId">xmlSecMSCryptoKeyDataHmacId</link>
<link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> <link linkend="xmlSecMSCryptoKeyDataHmacGetKlass">xmlSecMSCryptoKeyDataHmacGetKlass</link>
                                            (void);
<link linkend="int">int</link>         <link linkend="xmlSecMSCryptoKeyDataHmacSet">xmlSecMSCryptoKeyDataHmacSet</link>    (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);
#define     <link linkend="xmlSecMSCryptoTransformHmacMd5Id">xmlSecMSCryptoTransformHmacMd5Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformHmacMd5GetKlass">xmlSecMSCryptoTransformHmacMd5GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformHmacSha1Id">xmlSecMSCryptoTransformHmacSha1Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformHmacSha1GetKlass">xmlSecMSCryptoTransformHmacSha1GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformHmacSha256Id">xmlSecMSCryptoTransformHmacSha256Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformHmacSha256GetKlass">xmlSecMSCryptoTransformHmacSha256GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformHmacSha384Id">xmlSecMSCryptoTransformHmacSha384Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformHmacSha384GetKlass">xmlSecMSCryptoTransformHmacSha384GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecMSCryptoTransformHmacSha512Id">xmlSecMSCryptoTransformHmacSha512Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecMSCryptoTransformHmacSha512GetKlass">xmlSecMSCryptoTransformHmacSha512GetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
Crypto transforms implementation for MS Crypto.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="xmlSecCryptoGetFunctions-mscrypto" role="function">xmlSecCryptoGetFunctions_mscrypto ()</title>
<indexterm><primary>xmlSecCryptoGetFunctions_mscrypto</primary></indexterm><programlisting><link linkend="xmlSecCryptoDLFunctions">xmlSecCryptoDLFunctionsPtr</link> xmlSecCryptoGetFunctions_mscrypto
                                            (void);</programlisting>
<para>
Gets MSCrypto specific functions table.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> xmlsec-mscrypto functions table.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoInit" role="function">xmlSecMSCryptoInit ()</title>
<indexterm><primary>xmlSecMSCryptoInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoInit              (void);</programlisting>
<para>
XMLSec library specific crypto engine initialization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoShutdown" role="function">xmlSecMSCryptoShutdown ()</title>
<indexterm><primary>xmlSecMSCryptoShutdown</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoShutdown          (void);</programlisting>
<para>
XMLSec library specific crypto engine shutdown.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeysMngrInit" role="function">xmlSecMSCryptoKeysMngrInit ()</title>
<indexterm><primary>xmlSecMSCryptoKeysMngrInit</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoKeysMngrInit      (<link linkend="xmlSecKeysMngr">xmlSecKeysMngrPtr</link> mngr);</programlisting>
<para>
Adds MSCrypto specific key data stores in keys manager.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>mngr</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to keys manager.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoGenerateRandom" role="function">xmlSecMSCryptoGenerateRandom ()</title>
<indexterm><primary>xmlSecMSCryptoGenerateRandom</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoGenerateRandom    (<link linkend="xmlSecBuffer">xmlSecBufferPtr</link> buffer,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Generates <parameter>size</parameter> random bytes and puts result in <parameter>buffer</parameter>
(not implemented yet).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&nbsp;:</term>
<listitem><simpara>             the destination buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&nbsp;:</term>
<listitem><simpara>               the numer of bytes to generate.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoErrorsDefaultCallback" role="function">xmlSecMSCryptoErrorsDefaultCallback ()</title>
<indexterm><primary>xmlSecMSCryptoErrorsDefaultCallback</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecMSCryptoErrorsDefaultCallback
                                            (const <link linkend="char">char</link> *file,
                                             <link linkend="int">int</link> line,
                                             const <link linkend="char">char</link> *func,
                                             const <link linkend="char">char</link> *errorObject,
                                             const <link linkend="char">char</link> *errorSubject,
                                             <link linkend="int">int</link> reason,
                                             const <link linkend="char">char</link> *msg);</programlisting>
<para>
The default errors reporting callback function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&nbsp;:</term>
<listitem><simpara>               the error location file name (__FILE__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>line</parameter>&nbsp;:</term>
<listitem><simpara>               the error location line number (__LINE__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>               the error location function name (__FUNCTION__ macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errorObject</parameter>&nbsp;:</term>
<listitem><simpara>        the error specific error object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errorSubject</parameter>&nbsp;:</term>
<listitem><simpara>       the error specific error subject.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reason</parameter>&nbsp;:</term>
<listitem><simpara>             the error code.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>msg</parameter>&nbsp;:</term>
<listitem><simpara>                the additional error message.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertLocaleToUnicode" role="function">xmlSecMSCryptoConvertLocaleToUnicode ()</title>
<indexterm><primary>xmlSecMSCryptoConvertLocaleToUnicode</primary></indexterm><programlisting><link linkend="LPWSTR:CAPS">LPWSTR</link>      xmlSecMSCryptoConvertLocaleToUnicode
                                            (const <link linkend="char">char</link> *str);</programlisting>
<para>
Converts input string from current system locale to Unicode.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertUtf8ToUnicode" role="function">xmlSecMSCryptoConvertUtf8ToUnicode ()</title>
<indexterm><primary>xmlSecMSCryptoConvertUtf8ToUnicode</primary></indexterm><programlisting><link linkend="LPWSTR:CAPS">LPWSTR</link>      xmlSecMSCryptoConvertUtf8ToUnicode
                                            (const <link linkend="xmlChar">xmlChar</link> *str);</programlisting>
<para>
Converts input string from UTF8 to Unicode.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertUnicodeToUtf8" role="function">xmlSecMSCryptoConvertUnicodeToUtf8 ()</title>
<indexterm><primary>xmlSecMSCryptoConvertUnicodeToUtf8</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecMSCryptoConvertUnicodeToUtf8
                                            (<link linkend="LPCWSTR:CAPS">LPCWSTR</link> str);</programlisting>
<para>
Converts input string from Unicode to UTF8.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertLocaleToUtf8" role="function">xmlSecMSCryptoConvertLocaleToUtf8 ()</title>
<indexterm><primary>xmlSecMSCryptoConvertLocaleToUtf8</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecMSCryptoConvertLocaleToUtf8
                                            (const <link linkend="char">char</link> *str);</programlisting>
<para>
Converts input string from locale to UTF8.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertUtf8ToLocale" role="function">xmlSecMSCryptoConvertUtf8ToLocale ()</title>
<indexterm><primary>xmlSecMSCryptoConvertUtf8ToLocale</primary></indexterm><programlisting><link linkend="char">char</link>*       xmlSecMSCryptoConvertUtf8ToLocale
                                            (const <link linkend="xmlChar">xmlChar</link> *str);</programlisting>
<para>
Converts input string from UTF8 to locale.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertTstrToUtf8" role="function">xmlSecMSCryptoConvertTstrToUtf8 ()</title>
<indexterm><primary>xmlSecMSCryptoConvertTstrToUtf8</primary></indexterm><programlisting><link linkend="xmlChar">xmlChar</link>*    xmlSecMSCryptoConvertTstrToUtf8 (<link linkend="LPCTSTR:CAPS">LPCTSTR</link> str);</programlisting>
<para>
Converts input string from TSTR (locale or Unicode) to UTF8.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoConvertUtf8ToTstr" role="function">xmlSecMSCryptoConvertUtf8ToTstr ()</title>
<indexterm><primary>xmlSecMSCryptoConvertUtf8ToTstr</primary></indexterm><programlisting><link linkend="LPTSTR:CAPS">LPTSTR</link>      xmlSecMSCryptoConvertUtf8ToTstr (const <link linkend="xmlChar">xmlChar</link> *str);</programlisting>
<para>
Converts input string from UTF8 to TSTR (locale or Unicode).</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&nbsp;:</term>
<listitem><simpara>         the string to convert.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a pointer to newly allocated string (must be freed with xmlFree) or NULL if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataDsaId" role="macro">xmlSecMSCryptoKeyDataDsaId</title>
<indexterm><primary>xmlSecMSCryptoKeyDataDsaId</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataDsaId</programlisting>
<para>
The DSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataDsaGetKlass" role="function">xmlSecMSCryptoKeyDataDsaGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataDsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataDsaGetKlass
                                            (void);</programlisting>
<para>
The DSA key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to DSA key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformDsaSha1Id" role="macro">xmlSecMSCryptoTransformDsaSha1Id</title>
<indexterm><primary>xmlSecMSCryptoTransformDsaSha1Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformDsaSha1Id</programlisting>
<para>
The DSA SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformDsaSha1GetKlass" role="function">xmlSecMSCryptoTransformDsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformDsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformDsaSha1GetKlass
                                            (void);</programlisting>
<para>
The DSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> DSA-SHA1 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataGost2001Id" role="macro">xmlSecMSCryptoKeyDataGost2001Id</title>
<indexterm><primary>xmlSecMSCryptoKeyDataGost2001Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataGost2001Id</programlisting>
<para>
The GOST2001 key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataGost2001GetKlass" role="function">xmlSecMSCryptoKeyDataGost2001GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataGost2001GetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataGost2001GetKlass
                                            (void);</programlisting>
<para>
The GOST2001 key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to GOST2001 key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformGost2001GostR3411-94Id" role="macro">xmlSecMSCryptoTransformGost2001GostR3411_94Id</title>
<indexterm><primary>xmlSecMSCryptoTransformGost2001GostR3411_94Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformGost2001GostR3411_94Id</programlisting>
<para>
The GOST2001 GOSTR3411_94 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformGost2001GostR3411-94GetKlass" role="function">xmlSecMSCryptoTransformGost2001GostR3411_94GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformGost2001GostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformGost2001GostR3411_94GetKlass
                                            (void);</programlisting>
<para>
The GOST2001-GOSTR3411_94 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> GOST2001-GOSTR3411_94 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataRsaId" role="macro">xmlSecMSCryptoKeyDataRsaId</title>
<indexterm><primary>xmlSecMSCryptoKeyDataRsaId</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataRsaId</programlisting>
<para>
The RSA key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataRsaGetKlass" role="function">xmlSecMSCryptoKeyDataRsaGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataRsaGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataRsaGetKlass
                                            (void);</programlisting>
<para>
The MSCrypto RSA CertKey data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to MSCrypto RSA key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaMd5Id" role="macro">xmlSecMSCryptoTransformRsaMd5Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaMd5Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaMd5Id</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaMd5GetKlass" role="function">xmlSecMSCryptoTransformRsaMd5GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaMd5GetKlass
                                            (void);</programlisting>
<para>
The RSA-MD5 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-MD5 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha1Id" role="macro">xmlSecMSCryptoTransformRsaSha1Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha1Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaSha1Id</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha1GetKlass" role="function">xmlSecMSCryptoTransformRsaSha1GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaSha1GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA1 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-SHA1 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha256Id" role="macro">xmlSecMSCryptoTransformRsaSha256Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha256Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaSha256Id</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha256GetKlass" role="function">xmlSecMSCryptoTransformRsaSha256GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaSha256GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA256 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-SHA256 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha384Id" role="macro">xmlSecMSCryptoTransformRsaSha384Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha384Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaSha384Id</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha384GetKlass" role="function">xmlSecMSCryptoTransformRsaSha384GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaSha384GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA384 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-SHA384 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha512Id" role="macro">xmlSecMSCryptoTransformRsaSha512Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha512Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaSha512Id</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaSha512GetKlass" role="function">xmlSecMSCryptoTransformRsaSha512GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaSha512GetKlass
                                            (void);</programlisting>
<para>
The RSA-SHA512 signature transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-SHA512 signature transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaPkcs1Id" role="macro">xmlSecMSCryptoTransformRsaPkcs1Id</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaPkcs1Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaPkcs1Id</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaPkcs1GetKlass" role="function">xmlSecMSCryptoTransformRsaPkcs1GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaPkcs1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaPkcs1GetKlass
                                            (void);</programlisting>
<para>
The RSA-PKCS1 key transport transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-PKCS1 key transport transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaOaepId" role="macro">xmlSecMSCryptoTransformRsaOaepId</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaOaepId</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformRsaOaepId</programlisting>
<para>
The RSA PKCS1 key transport transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformRsaOaepGetKlass" role="function">xmlSecMSCryptoTransformRsaOaepGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformRsaOaepGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformRsaOaepGetKlass
                                            (void);</programlisting>
<para>
The RSA-OAEP key transport transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> RSA-OAEP key transport transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformMd5Id" role="macro">xmlSecMSCryptoTransformMd5Id</title>
<indexterm><primary>xmlSecMSCryptoTransformMd5Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformMd5Id</programlisting>
<para>
The MD5 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformMd5GetKlass" role="function">xmlSecMSCryptoTransformMd5GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformMd5GetKlass
                                            (void);</programlisting>
<para>
SHA-1 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to SHA-1 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha1Id" role="macro">xmlSecMSCryptoTransformSha1Id</title>
<indexterm><primary>xmlSecMSCryptoTransformSha1Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformSha1Id</programlisting>
<para>
The SHA1 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha1GetKlass" role="function">xmlSecMSCryptoTransformSha1GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformSha1GetKlass
                                            (void);</programlisting>
<para>
SHA-1 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to SHA-1 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha256Id" role="macro">xmlSecMSCryptoTransformSha256Id</title>
<indexterm><primary>xmlSecMSCryptoTransformSha256Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformSha256Id</programlisting>
<para>
The SHA256 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha256GetKlass" role="function">xmlSecMSCryptoTransformSha256GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformSha256GetKlass
                                            (void);</programlisting>
<para>
SHA-256 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to SHA-256 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha384Id" role="macro">xmlSecMSCryptoTransformSha384Id</title>
<indexterm><primary>xmlSecMSCryptoTransformSha384Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformSha384Id</programlisting>
<para>
The SHA384 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha384GetKlass" role="function">xmlSecMSCryptoTransformSha384GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformSha384GetKlass
                                            (void);</programlisting>
<para>
SHA-384 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to SHA-384 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha512Id" role="macro">xmlSecMSCryptoTransformSha512Id</title>
<indexterm><primary>xmlSecMSCryptoTransformSha512Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformSha512Id</programlisting>
<para>
The SHA512 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformSha512GetKlass" role="function">xmlSecMSCryptoTransformSha512GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformSha512GetKlass
                                            (void);</programlisting>
<para>
SHA-512 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to SHA-512 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformGostR3411-94Id" role="macro">xmlSecMSCryptoTransformGostR3411_94Id</title>
<indexterm><primary>xmlSecMSCryptoTransformGostR3411_94Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformGostR3411_94Id</programlisting>
<para>
The GOSTR3411_94 digest transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformGostR3411-94GetKlass" role="function">xmlSecMSCryptoTransformGostR3411_94GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformGostR3411_94GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformGostR3411_94GetKlass
                                            (void);</programlisting>
<para>
GOSTR3411_94 digest transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to GOSTR3411_94 digest transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataAesId" role="macro">xmlSecMSCryptoKeyDataAesId</title>
<indexterm><primary>xmlSecMSCryptoKeyDataAesId</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataAesId</programlisting>
<para>
The AES key data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataAesGetKlass" role="function">xmlSecMSCryptoKeyDataAesGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataAesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataAesGetKlass
                                            (void);</programlisting>
<para>
The AES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> AES key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataAesSet" role="function">xmlSecMSCryptoKeyDataAesSet ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataAesSet</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoKeyDataAesSet     (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);</programlisting>
<para>
Sets the value of AES key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to AES key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&nbsp;:</term>
<listitem><simpara>            the key value size (in bytes).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes128CbcId" role="macro">xmlSecMSCryptoTransformAes128CbcId</title>
<indexterm><primary>xmlSecMSCryptoTransformAes128CbcId</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformAes128CbcId</programlisting>
<para>
The AES128 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes128CbcGetKlass" role="function">xmlSecMSCryptoTransformAes128CbcGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformAes128CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformAes128CbcGetKlass
                                            (void);</programlisting>
<para>
AES 128 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to AES 128 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes192CbcId" role="macro">xmlSecMSCryptoTransformAes192CbcId</title>
<indexterm><primary>xmlSecMSCryptoTransformAes192CbcId</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformAes192CbcId</programlisting>
<para>
The AES192 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes192CbcGetKlass" role="function">xmlSecMSCryptoTransformAes192CbcGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformAes192CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformAes192CbcGetKlass
                                            (void);</programlisting>
<para>
AES 192 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to AES 192 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes256CbcId" role="macro">xmlSecMSCryptoTransformAes256CbcId</title>
<indexterm><primary>xmlSecMSCryptoTransformAes256CbcId</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformAes256CbcId</programlisting>
<para>
The AES256 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformAes256CbcGetKlass" role="function">xmlSecMSCryptoTransformAes256CbcGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformAes256CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformAes256CbcGetKlass
                                            (void);</programlisting>
<para>
AES 256 CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to AES 256 CBC encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes128Id" role="macro">xmlSecMSCryptoTransformKWAes128Id</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes128Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformKWAes128Id</programlisting>
<para>
The AES 128 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes128GetKlass" role="function">xmlSecMSCryptoTransformKWAes128GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes128GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformKWAes128GetKlass
                                            (void);</programlisting>
<para>
The AES-128 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> AES-128 kew wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes192Id" role="macro">xmlSecMSCryptoTransformKWAes192Id</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes192Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformKWAes192Id</programlisting>
<para>
The AES 192 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes192GetKlass" role="function">xmlSecMSCryptoTransformKWAes192GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes192GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformKWAes192GetKlass
                                            (void);</programlisting>
<para>
The AES-192 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> AES-192 kew wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes256Id" role="macro">xmlSecMSCryptoTransformKWAes256Id</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes256Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformKWAes256Id</programlisting>
<para>
The AES 256 key wrap transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWAes256GetKlass" role="function">xmlSecMSCryptoTransformKWAes256GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformKWAes256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformKWAes256GetKlass
                                            (void);</programlisting>
<para>
The AES-256 kew wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> AES-256 kew wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataDesId" role="macro">xmlSecMSCryptoKeyDataDesId</title>
<indexterm><primary>xmlSecMSCryptoKeyDataDesId</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataDesId</programlisting>
<para>
The DES key data klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataDesGetKlass" role="function">xmlSecMSCryptoKeyDataDesGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataDesGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataDesGetKlass
                                            (void);</programlisting>
<para>
The DES key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> DES key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformDes3CbcId" role="macro">xmlSecMSCryptoTransformDes3CbcId</title>
<indexterm><primary>xmlSecMSCryptoTransformDes3CbcId</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformDes3CbcId</programlisting>
<para>
The DES3 CBC cipher transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformDes3CbcGetKlass" role="function">xmlSecMSCryptoTransformDes3CbcGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformDes3CbcGetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformDes3CbcGetKlass
                                            (void);</programlisting>
<para>
Triple DES CBC encryption transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to Triple DES encryption transform.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWDes3Id" role="macro">xmlSecMSCryptoTransformKWDes3Id</title>
<indexterm><primary>xmlSecMSCryptoTransformKWDes3Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformKWDes3Id</programlisting>
<para>
The DES3 KW transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformKWDes3GetKlass" role="function">xmlSecMSCryptoTransformKWDes3GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformKWDes3GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformKWDes3GetKlass
                                            (void);</programlisting>
<para>
The Triple DES key wrapper transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Triple DES key wrapper transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoHmacGetMinOutputLength" role="function">xmlSecMSCryptoHmacGetMinOutputLength ()</title>
<indexterm><primary>xmlSecMSCryptoHmacGetMinOutputLength</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoHmacGetMinOutputLength
                                            (void);</programlisting>
<para>
Gets the value of min HMAC length.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the min HMAC output length
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoHmacSetMinOutputLength" role="function">xmlSecMSCryptoHmacSetMinOutputLength ()</title>
<indexterm><primary>xmlSecMSCryptoHmacSetMinOutputLength</primary></indexterm><programlisting><link linkend="void">void</link>        xmlSecMSCryptoHmacSetMinOutputLength
                                            (<link linkend="int">int</link> min_length);</programlisting>
<para>
Sets the min HMAC output length</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>min_length</parameter>&nbsp;:</term>
<listitem><simpara> the new min length
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataHmacId" role="macro">xmlSecMSCryptoKeyDataHmacId</title>
<indexterm><primary>xmlSecMSCryptoKeyDataHmacId</primary></indexterm><programlisting>#define     xmlSecMSCryptoKeyDataHmacId</programlisting>
<para>
The DHMAC key klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataHmacGetKlass" role="function">xmlSecMSCryptoKeyDataHmacGetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataHmacGetKlass</primary></indexterm><programlisting><link linkend="xmlSecKeyDataId">xmlSecKeyDataId</link> xmlSecMSCryptoKeyDataHmacGetKlass
                                            (void);</programlisting>
<para>
The HMAC key data klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> HMAC key data klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoKeyDataHmacSet" role="function">xmlSecMSCryptoKeyDataHmacSet ()</title>
<indexterm><primary>xmlSecMSCryptoKeyDataHmacSet</primary></indexterm><programlisting><link linkend="int">int</link>         xmlSecMSCryptoKeyDataHmacSet    (<link linkend="xmlSecKeyData">xmlSecKeyDataPtr</link> data,
                                             const <link linkend="xmlSecByte">xmlSecByte</link> *buf,
                                             <link linkend="xmlSecSize">xmlSecSize</link> bufSize);</programlisting>
<para>
Sets the value of HMAC key data.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&nbsp;:</term>
<listitem><simpara>               the pointer to HMAC key data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&nbsp;:</term>
<listitem><simpara>                the pointer to key value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bufSize</parameter>&nbsp;:</term>
<listitem><simpara>            the key value size (in bytes).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> 0 on success or a negative value if an error occurs.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacMd5Id" role="macro">xmlSecMSCryptoTransformHmacMd5Id</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacMd5Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformHmacMd5Id</programlisting>
<para>
The HMAC with MD5 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacMd5GetKlass" role="function">xmlSecMSCryptoTransformHmacMd5GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacMd5GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformHmacMd5GetKlass
                                            (void);</programlisting>
<para>
The HMAC-MD5 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HMAC-MD5 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha1Id" role="macro">xmlSecMSCryptoTransformHmacSha1Id</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha1Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformHmacSha1Id</programlisting>
<para>
The HMAC with SHA1 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha1GetKlass" role="function">xmlSecMSCryptoTransformHmacSha1GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha1GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformHmacSha1GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA1 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HMAC-SHA1 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha256Id" role="macro">xmlSecMSCryptoTransformHmacSha256Id</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha256Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformHmacSha256Id</programlisting>
<para>
The HMAC with SHA256 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha256GetKlass" role="function">xmlSecMSCryptoTransformHmacSha256GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha256GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformHmacSha256GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA256 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HMAC-SHA256 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha384Id" role="macro">xmlSecMSCryptoTransformHmacSha384Id</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha384Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformHmacSha384Id</programlisting>
<para>
The HMAC with SHA384 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha384GetKlass" role="function">xmlSecMSCryptoTransformHmacSha384GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha384GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformHmacSha384GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA384 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HMAC-SHA384 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha512Id" role="macro">xmlSecMSCryptoTransformHmacSha512Id</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha512Id</primary></indexterm><programlisting>#define     xmlSecMSCryptoTransformHmacSha512Id</programlisting>
<para>
The HMAC with SHA512 signature transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecMSCryptoTransformHmacSha512GetKlass" role="function">xmlSecMSCryptoTransformHmacSha512GetKlass ()</title>
<indexterm><primary>xmlSecMSCryptoTransformHmacSha512GetKlass</primary></indexterm><programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecMSCryptoTransformHmacSha512GetKlass
                                            (void);</programlisting>
<para>
The HMAC-SHA512 transform klass.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the HMAC-SHA512 transform klass.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
