<refentry id="xmlsec-transforms">
<refmeta>
<refentrytitle>transforms.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>transforms.h</refname><refpurpose>The transforms functions.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="XMLSEC-TRANSFORM-BINARY-CHUNK-CAPS">XMLSEC_TRANSFORM_BINARY_CHUNK</link>
enum        <link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link>;
enum        <link linkend="xmlSecTransformMode">xmlSecTransformMode</link>;
typedef     <link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link>;
#define     <link linkend="xmlSecTransformDataTypeUnknown">xmlSecTransformDataTypeUnknown</link>
#define     <link linkend="xmlSecTransformDataTypeBin">xmlSecTransformDataTypeBin</link>
#define     <link linkend="xmlSecTransformDataTypeXml">xmlSecTransformDataTypeXml</link>
struct      <link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link>;
struct      <link linkend="xmlSecTransform">xmlSecTransform</link>;
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformCreate">xmlSecTransformCreate</link>    (<link linkend="xmlSecTransformId">xmlSecTransformId</link> id);
void        <link linkend="xmlSecTransformDestroy">xmlSecTransformDestroy</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
int         <link linkend="xmlSecTransformSetKey">xmlSecTransformSetKey</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecTransformSetKeyReq">xmlSecTransformSetKeyReq</link>        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
int         <link linkend="xmlSecTransformVerify">xmlSecTransformVerify</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> <link linkend="xmlSecTransformGetDataType">xmlSecTransformGetDataType</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPushBin">xmlSecTransformPushBin</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPopBin">xmlSecTransformPopBin</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPushXml">xmlSecTransformPushXml</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPopXml">xmlSecTransformPopXml</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> <link linkend="xmlSecTransformDefaultGetDataType">xmlSecTransformDefaultGetDataType</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPushBin">xmlSecTransformDefaultPushBin</link>   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPopBin">xmlSecTransformDefaultPopBin</link>    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPushXml">xmlSecTransformDefaultPushXml</link>   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPopXml">xmlSecTransformDefaultPopXml</link>    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformExecute">xmlSecTransformExecute</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformAddAfter">xmlSecTransformAddAfter</link>  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformAddBefore">xmlSecTransformAddBefore</link> (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);
void        <link linkend="xmlSecTransformRemove">xmlSecTransformRemove</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
#define     <link linkend="xmlSecTransformGetName">xmlSecTransformGetName</link>          (transform)
#define     <link linkend="xmlSecTransformIsValid">xmlSecTransformIsValid</link>          (transform)
#define     <link linkend="xmlSecTransformCheckType">xmlSecTransformCheckType</link>        (transform, t)
#define     <link linkend="xmlSecTransformCheckId">xmlSecTransformCheckId</link>          (transform, i)
#define     <link linkend="xmlSecTransformCheckSize">xmlSecTransformCheckSize</link>        (transform, size)
typedef     <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link>;
#define     <link linkend="xmlSecTransformUsageUnknown">xmlSecTransformUsageUnknown</link>
#define     <link linkend="xmlSecTransformUsageDSigTransform">xmlSecTransformUsageDSigTransform</link>
#define     <link linkend="xmlSecTransformUsageC14NMethod">xmlSecTransformUsageC14NMethod</link>
#define     <link linkend="xmlSecTransformUsageDigestMethod">xmlSecTransformUsageDigestMethod</link>
#define     <link linkend="xmlSecTransformUsageSignatureMethod">xmlSecTransformUsageSignatureMethod</link>
#define     <link linkend="xmlSecTransformUsageEncryptionMethod">xmlSecTransformUsageEncryptionMethod</link>
#define     <link linkend="xmlSecTransformUsageAny">xmlSecTransformUsageAny</link>
#define     <link linkend="xmlSecTransformIdUnknown">xmlSecTransformIdUnknown</link>
int         (<link linkend="xmlSecTransformInitializeMethod">*xmlSecTransformInitializeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
void        (<link linkend="xmlSecTransformFinalizeMethod">*xmlSecTransformFinalizeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> (<link linkend="xmlSecTransformGetDataTypeMethod">*xmlSecTransformGetDataTypeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformNodeReadMethod">*xmlSecTransformNodeReadMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformSetKeyRequirements">*xmlSecTransformSetKeyRequirements</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
int         (<link linkend="xmlSecTransformSetKeyMethod">*xmlSecTransformSetKeyMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         (<link linkend="xmlSecTransformVerifyMethod">*xmlSecTransformVerifyMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPushBinMethod">*xmlSecTransformPushBinMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPopBinMethod">*xmlSecTransformPopBinMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPushXmlMethod">*xmlSecTransformPushXmlMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPopXmlMethod">*xmlSecTransformPopXmlMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformExecuteMethod">*xmlSecTransformExecuteMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
struct      <link linkend="xmlSecTransformKlass">xmlSecTransformKlass</link>;
#define     <link linkend="xmlSecTransformKlassGetName">xmlSecTransformKlassGetName</link>     (klass)
#define     <link linkend="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</link>
#define     <link linkend="xmlSecTransformBase64Id">xmlSecTransformBase64Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformBase64GetKlass">xmlSecTransformBase64GetKlass</link>
                                            (void);
void        <link linkend="xmlSecTransformBase64SetLineSize">xmlSecTransformBase64SetLineSize</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);
#define     <link linkend="xmlSecTransformInputURIId">xmlSecTransformInputURIId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformInputURIGetKlass">xmlSecTransformInputURIGetKlass</link>
                                            (void);
int         <link linkend="xmlSecTransformInputURIOpen">xmlSecTransformInputURIOpen</link>     (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);
#define     <link linkend="xmlSecTransformXsltId">xmlSecTransformXsltId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformXsltGetKlass">xmlSecTransformXsltGetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="XMLSEC-TRANSFORM-BINARY-CHUNK-CAPS">XMLSEC_TRANSFORM_BINARY_CHUNK</title>
<programlisting>#define XMLSEC_TRANSFORM_BINARY_CHUNK			64
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStatus">enum xmlSecTransformStatus</title>
<programlisting>typedef enum  {
    xmlSecTransformStatusNone = 0,
    xmlSecTransformStatusWorking,
    xmlSecTransformStatusFinished,
    xmlSecTransformStatusOk,
    xmlSecTransformStatusFail
} xmlSecTransformStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformMode">enum xmlSecTransformMode</title>
<programlisting>typedef enum  {
    xmlSecTransformModeNone = 0,
    xmlSecTransformModePush,
    xmlSecTransformModePop
} xmlSecTransformMode;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataType">xmlSecTransformDataType</title>
<programlisting>typedef unsigned char				xmlSecTransformDataType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeUnknown">xmlSecTransformDataTypeUnknown</title>
<programlisting>#define xmlSecTransformDataTypeUnknown		0x0000
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeBin">xmlSecTransformDataTypeBin</title>
<programlisting>#define xmlSecTransformDataTypeBin		0x0001
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeXml">xmlSecTransformDataTypeXml</title>
<programlisting>#define xmlSecTransformDataTypeXml		0x0002
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtx">struct xmlSecTransformCtx</title>
<programlisting>struct xmlSecTransformCtx {
    /* user settings */
    void*				userData;
    unsigned int			flags;
    unsigned int			flags2;
    xmlSecTransformUriType		enabledUris;
    xmlSecPtrList			enabledTransforms;

    /* results */
    xmlSecBufferPtr			result;
    xmlSecTransformStatus		status;
    xmlChar*				uri;
    xmlChar*				xptrExpr;
    xmlSecTransformPtr			first;
    xmlSecTransformPtr			last;

    /* for the future */
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The transform context.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransform">struct xmlSecTransform</title>
<programlisting>struct xmlSecTransform {
    xmlSecTransformId 			id; 
    xmlSecTransformOperation		operation;
    xmlSecTransformStatus		status;
    xmlNodePtr				hereNode;

    /* transforms chain */
    xmlSecTransformPtr			next;
    xmlSecTransformPtr			prev;

    /* binary data */
    xmlSecBuffer			inBuf;
    xmlSecBuffer			outBuf;
        
    /* xml data */
    xmlSecNodeSetPtr			inNodes;
    xmlSecNodeSetPtr			outNodes;

    /* reserved for the future */    
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The transform structure.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="xmlSecTransformId">xmlSecTransformId</link> <structfield>id</structfield></entry>
<entry> the transform id (pointer to <link linkend="xmlSecTransformId">xmlSecTransformId</link>).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformOperation">xmlSecTransformOperation</link> <structfield>operation</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link> <structfield>status</structfield></entry>
<entry> the transform status (ok/fail/unknown).
</entry>
</row>
<row>
<entry><link linkend="xmlNodePtr">xmlNodePtr</link> <structfield>hereNode</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>next</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>prev</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecBuffer">xmlSecBuffer</link> <structfield>inBuf</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecBuffer">xmlSecBuffer</link> <structfield>outBuf</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>inNodes</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>outNodes</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCreate">xmlSecTransformCreate ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformCreate    (<link linkend="xmlSecTransformId">xmlSecTransformId</link> id);</programlisting>
<para>
Creates new transform from the transform id object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the transform id to create.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to newly created <link linkend="xmlSecTransform">xmlSecTransform</link> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDestroy">xmlSecTransformDestroy ()</title>
<programlisting>void        xmlSecTransformDestroy          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Destroys transform by calling appropriate transform specific function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKey">xmlSecTransformSetKey ()</title>
<programlisting>int         xmlSecTransformSetKey           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Sets the key for binary transform (wrapper for transform specific 
<link linkend="setKey">setKey</link>() method).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecKey">xmlSecKey</link> structure. 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyReq">xmlSecTransformSetKeyReq ()</title>
<programlisting>int         xmlSecTransformSetKeyReq        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Sets the key for binary transform (wrapper for transform specific 
<link linkend="setKeyReq">setKeyReq</link>() method).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformVerify">xmlSecTransformVerify ()</title>
<programlisting>int         xmlSecTransformVerify           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetDataType">xmlSecTransformGetDataType ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> xmlSecTransformGetDataType
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushBin">xmlSecTransformPushBin ()</title>
<programlisting>int         xmlSecTransformPushBin          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopBin">xmlSecTransformPopBin ()</title>
<programlisting>int         xmlSecTransformPopBin           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushXml">xmlSecTransformPushXml ()</title>
<programlisting>int         xmlSecTransformPushXml          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopXml">xmlSecTransformPopXml ()</title>
<programlisting>int         xmlSecTransformPopXml           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultGetDataType">xmlSecTransformDefaultGetDataType ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> xmlSecTransformDefaultGetDataType
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPushBin">xmlSecTransformDefaultPushBin ()</title>
<programlisting>int         xmlSecTransformDefaultPushBin   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPopBin">xmlSecTransformDefaultPopBin ()</title>
<programlisting>int         xmlSecTransformDefaultPopBin    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPushXml">xmlSecTransformDefaultPushXml ()</title>
<programlisting>int         xmlSecTransformDefaultPushXml   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPopXml">xmlSecTransformDefaultPopXml ()</title>
<programlisting>int         xmlSecTransformDefaultPopXml    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExecute">xmlSecTransformExecute ()</title>
<programlisting>int         xmlSecTransformExecute          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>last</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAddAfter">xmlSecTransformAddAfter ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformAddAfter  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);</programlisting>
<para>
Adds <parameter>newTransform</parameter> after the <parameter>curTransform</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>curTransform</parameter>&nbsp;:</entry>
<entry> the pointer to current transform (may be NULL).
</entry></row>
<row><entry align="right"><parameter>newTransform</parameter>&nbsp;:</entry>
<entry> the pointer to new transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new transforms chain or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAddBefore">xmlSecTransformAddBefore ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformAddBefore (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);</programlisting>
<para>
Adds <parameter>newTransform</parameter> before the <parameter>curTransform</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>curTransform</parameter>&nbsp;:</entry>
<entry> the pointer to current transform (may be NULL).
</entry></row>
<row><entry align="right"><parameter>newTransform</parameter>&nbsp;:</entry>
<entry> the pointer to new transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new transforms chain or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRemove">xmlSecTransformRemove ()</title>
<programlisting>void        xmlSecTransformRemove           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Removes <parameter>transform</parameter> from the chain. This method MUST be called by any 
bin transform id destructor.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetName">xmlSecTransformGetName()</title>
<programlisting>#define     xmlSecTransformGetName(transform)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIsValid">xmlSecTransformIsValid()</title>
<programlisting>#define     xmlSecTransformIsValid(transform)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to transform.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckType">xmlSecTransformCheckType()</title>
<programlisting>#define     xmlSecTransformCheckType(transform, t)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has specified type <parameter>t</parameter> 
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>t</parameter>&nbsp;:</entry>
<entry> the transform type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckId">xmlSecTransformCheckId()</title>
<programlisting>#define     xmlSecTransformCheckId(transform, i)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has specified id <parameter>i</parameter> 
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>i</parameter>&nbsp;:</entry>
<entry> the transform id.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckSize">xmlSecTransformCheckSize()</title>
<programlisting>#define     xmlSecTransformCheckSize(transform, size)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has at least <parameter>size</parameter>
bytes or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the transform object size.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsage">xmlSecTransformUsage</title>
<programlisting>typedef unsigned int				xmlSecTransformUsage;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageUnknown">xmlSecTransformUsageUnknown</title>
<programlisting>#define xmlSecTransformUsageUnknown		0x0000
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageDSigTransform">xmlSecTransformUsageDSigTransform</title>
<programlisting>#define xmlSecTransformUsageDSigTransform	0x0001
</programlisting>
<para>
Transform could be used in &lt;dsig:Transform&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageC14NMethod">xmlSecTransformUsageC14NMethod</title>
<programlisting>#define xmlSecTransformUsageC14NMethod		0x0002
</programlisting>
<para>
Transform could be used in &lt;dsig:CanonicalizationMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageDigestMethod">xmlSecTransformUsageDigestMethod</title>
<programlisting>#define xmlSecTransformUsageDigestMethod	0x0004
</programlisting>
<para>
Transform could be used in &lt;dsig:DigestMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageSignatureMethod">xmlSecTransformUsageSignatureMethod</title>
<programlisting>#define xmlSecTransformUsageSignatureMethod	0x0008
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageEncryptionMethod">xmlSecTransformUsageEncryptionMethod</title>
<programlisting>#define xmlSecTransformUsageEncryptionMethod	0x0010
</programlisting>
<para>
Transform could be used in &lt;enc:EncryptionMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageAny">xmlSecTransformUsageAny</title>
<programlisting>#define xmlSecTransformUsageAny			0xFFFF
</programlisting>
<para>
Transform could be used for operation.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdUnknown">xmlSecTransformIdUnknown</title>
<programlisting>#define xmlSecTransformIdUnknown			NULL
</programlisting>
<para>
The "unknown" transform id (NULL).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInitializeMethod">xmlSecTransformInitializeMethod ()</title>
<programlisting>int         (*xmlSecTransformInitializeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
The transform specific creation method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformFinalizeMethod">xmlSecTransformFinalizeMethod ()</title>
<programlisting>void        (*xmlSecTransformFinalizeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
The transform specific destroy method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to the <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetDataTypeMethod">xmlSecTransformGetDataTypeMethod ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> (*xmlSecTransformGetDataTypeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeReadMethod">xmlSecTransformNodeReadMethod ()</title>
<programlisting>int         (*xmlSecTransformNodeReadMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transfomr specific method to read the transform data from 
the <parameter>node</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to the <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the pointer to the &lt;dsig:Transform&gt; node.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyRequirements">xmlSecTransformSetKeyRequirements ()</title>
<programlisting>int         (*xmlSecTransformSetKeyRequirements)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyMethod">xmlSecTransformSetKeyMethod ()</title>
<programlisting>int         (*xmlSecTransformSetKeyMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
The transform specific method to set key for use.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to binary transform.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformVerifyMethod">xmlSecTransformVerifyMethod ()</title>
<programlisting>int         (*xmlSecTransformVerifyMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushBinMethod">xmlSecTransformPushBinMethod ()</title>
<programlisting>int         (*xmlSecTransformPushBinMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopBinMethod">xmlSecTransformPopBinMethod ()</title>
<programlisting>int         (*xmlSecTransformPopBinMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushXmlMethod">xmlSecTransformPushXmlMethod ()</title>
<programlisting>int         (*xmlSecTransformPushXmlMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopXmlMethod">xmlSecTransformPopXmlMethod ()</title>
<programlisting>int         (*xmlSecTransformPopXmlMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExecuteMethod">xmlSecTransformExecuteMethod ()</title>
<programlisting>int         (*xmlSecTransformExecuteMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>last</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKlass">struct xmlSecTransformKlass</title>
<programlisting>struct xmlSecTransformKlass {
    /* data */
    size_t				klassSize;
    size_t				objSize;
    const xmlChar*			name;
    const xmlChar*			href;
    xmlSecTransformUsage		usage;

    /* methods */
    xmlSecTransformInitializeMethod	initialize;
    xmlSecTransformFinalizeMethod	finalize;

    xmlSecTransformNodeReadMethod	readNode;
    xmlSecTransformNodeWriteMethod	writeNode;

    xmlSecTransformSetKeyRequirements	setKeyReq;
    xmlSecTransformSetKeyMethod		setKey;
    xmlSecTransformVerifyMethod		verify;
    xmlSecTransformGetDataTypeMethod	getDataType;

    xmlSecTransformPushBinMethod	pushBin;
    xmlSecTransformPopBinMethod		popBin;
    xmlSecTransformPushXmlMethod	pushXml;
    xmlSecTransformPopXmlMethod		popXml;
    
    /* low level method */
    xmlSecTransformExecuteMethod	execute;

    /* reserved for future */ 
    void* 				reserved0;
    void* 				reserved1;
};
</programlisting>
<para>
The transform id structure.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="size-t">size_t</link> <structfield>klassSize</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="size-t">size_t</link> <structfield>objSize</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>const <link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>const <link linkend="xmlChar">xmlChar</link> *<structfield>href</structfield></entry>
<entry> the algorithm href.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> <structfield>usage</structfield></entry>
<entry> the usage.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformInitializeMethod">xmlSecTransformInitializeMethod</link> <structfield>initialize</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformFinalizeMethod">xmlSecTransformFinalizeMethod</link> <structfield>finalize</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformNodeReadMethod">xmlSecTransformNodeReadMethod</link> <structfield>readNode</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformNodeWriteMethod">xmlSecTransformNodeWriteMethod</link> <structfield>writeNode</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformSetKeyRequirements">xmlSecTransformSetKeyRequirements</link> <structfield>setKeyReq</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformSetKeyMethod">xmlSecTransformSetKeyMethod</link> <structfield>setKey</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformVerifyMethod">xmlSecTransformVerifyMethod</link> <structfield>verify</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformGetDataTypeMethod">xmlSecTransformGetDataTypeMethod</link> <structfield>getDataType</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPushBinMethod">xmlSecTransformPushBinMethod</link> <structfield>pushBin</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPopBinMethod">xmlSecTransformPopBinMethod</link> <structfield>popBin</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPushXmlMethod">xmlSecTransformPushXmlMethod</link> <structfield>pushXml</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPopXmlMethod">xmlSecTransformPopXmlMethod</link> <structfield>popXml</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformExecuteMethod">xmlSecTransformExecuteMethod</link> <structfield>execute</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKlassGetName">xmlSecTransformKlassGetName()</title>
<programlisting>#define     xmlSecTransformKlassGetName(klass)</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>klass</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</title>
<programlisting>#define XMLSEC_BASE64_LINESIZE				64
</programlisting>
<para>
The default max line size for base64 encoding</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64Id">xmlSecTransformBase64Id</title>
<programlisting>#define     xmlSecTransformBase64Id</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64GetKlass">xmlSecTransformBase64GetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformBase64GetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64SetLineSize">xmlSecTransformBase64SetLineSize ()</title>
<programlisting>void        xmlSecTransformBase64SetLineSize
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);</programlisting>
<para>
Sets the max line size to <parameter>lineSize</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to BASE64 encode transform.
</entry></row>
<row><entry align="right"><parameter>lineSize</parameter>&nbsp;:</entry>
<entry> the new max line size.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInputURIId">xmlSecTransformInputURIId</title>
<programlisting>#define     xmlSecTransformInputURIId</programlisting>
<para>
The Input URI transform id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInputURIGetKlass">xmlSecTransformInputURIGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformInputURIGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInputURIOpen">xmlSecTransformInputURIOpen ()</title>
<programlisting>int         xmlSecTransformInputURIOpen     (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);</programlisting>
<para>
Opens the given <parameter>uri</parameter> for reading.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to IO transform.
</entry></row>
<row><entry align="right"><parameter>uri</parameter>&nbsp;:</entry>
<entry> the URL to open.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXsltId">xmlSecTransformXsltId</title>
<programlisting>#define     xmlSecTransformXsltId</programlisting>
<para>
The XSLT transform id.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXsltGetKlass">xmlSecTransformXsltGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformXsltGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
