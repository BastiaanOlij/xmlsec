<refentry id="xmlsec-transforms">
<refmeta>
<refentrytitle>transforms.h</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>transforms.h</refname><refpurpose>The transforms functions.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



typedef     <link linkend="xmlSecTransformId">xmlSecTransformId</link>;
#define     <link linkend="xmlSecTransformUnknown">xmlSecTransformUnknown</link>
enum        <link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link>;
int         <link linkend="xmlSecAesKeyGenerate">xmlSecAesKeyGenerate</link>            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
#define     <link linkend="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</link>
void        <link linkend="xmlSecBase64EncodeSetLineSize">xmlSecBase64EncodeSetLineSize</link>   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);
int         <link linkend="xmlSecC14NExclAddInclNamespaces">xmlSecC14NExclAddInclNamespaces</link> (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *prefixList);
int         <link linkend="xmlSecDesKeyGenerate">xmlSecDesKeyGenerate</link>            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecDsaKeyGenerate">xmlSecDsaKeyGenerate</link>            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="DSA-CAPS">DSA</link> *dsa);
int         <link linkend="xmlSecHmacKeyGenerate">xmlSecHmacKeyGenerate</link>           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
int         <link linkend="xmlSecHmacAddOutputLength">xmlSecHmacAddOutputLength</link>       (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="size-t">size_t</link> bitsLen);
int         <link linkend="xmlSecRsaKeyGenerate">xmlSecRsaKeyGenerate</link>            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="RSA-CAPS">RSA</link> *rsa);
int         <link linkend="xmlSecEncRsaOaepAddParam">xmlSecEncRsaOaepAddParam</link>        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);
enum        <link linkend="xmlSecXPath2TransformType">xmlSecXPath2TransformType</link>;
int         <link linkend="xmlSecTransformXPathAdd">xmlSecTransformXPathAdd</link>         (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);
int         <link linkend="xmlSecTransformXPath2Add">xmlSecTransformXPath2Add</link>        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecXPath2TransformType">xmlSecXPath2TransformType</link> type,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);
int         <link linkend="xmlSecTransformXPointerAdd">xmlSecTransformXPointerAdd</link>      (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);
int         <link linkend="xmlSecTransformXsltAdd">xmlSecTransformXsltAdd</link>          (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *xslt);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="xmlSecTransformId">xmlSecTransformId</title>
<programlisting>typedef const struct _xmlSecTransformIdStruct *xmlSecTransformId;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUnknown">xmlSecTransformUnknown</title>
<programlisting>#define xmlSecTransformUnknown			NULL
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStatus">enum xmlSecTransformStatus</title>
<programlisting>typedef enum  {
    xmlSecTransformStatusNone = 0,
    xmlSecTransformStatusOk,
    xmlSecTransformStatusFail
} xmlSecTransformStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecAesKeyGenerate">xmlSecAesKeyGenerate ()</title>
<programlisting>int         xmlSecAesKeyGenerate            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
Sets the AES key to the given data or generates a new random key.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the AES key
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry> the AES key data or NULL if new key should be generated
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> the AES key data size or 0 if new key should be generated   
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 for success or &lt; 0 value otherwise.  
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="XMLSEC-BASE64-LINESIZE-CAPS">XMLSEC_BASE64_LINESIZE</title>
<programlisting>#define XMLSEC_BASE64_LINESIZE		64
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecBase64EncodeSetLineSize">xmlSecBase64EncodeSetLineSize ()</title>
<programlisting>void        xmlSecBase64EncodeSetLineSize   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>lineSize</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecC14NExclAddInclNamespaces">xmlSecC14NExclAddInclNamespaces ()</title>
<programlisting>int         xmlSecC14NExclAddInclNamespaces (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *prefixList);</programlisting>
<para>
Adds "inclusive" namespaces to the ExcC14N transform node</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> 	the exclusive c14n transform node
</entry></row>
<row><entry align="right"><parameter>prefixList</parameter>&nbsp;:</entry>
<entry> 	the white space delimited  list of namespace prefixes, 
		where "<link linkend="default">default</link>" indicates the default namespace
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 if success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDesKeyGenerate">xmlSecDesKeyGenerate ()</title>
<programlisting>int         xmlSecDesKeyGenerate            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecDsaKeyGenerate">xmlSecDsaKeyGenerate ()</title>
<programlisting>int         xmlSecDsaKeyGenerate            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="DSA-CAPS">DSA</link> *dsa);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dsa</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecHmacKeyGenerate">xmlSecHmacKeyGenerate ()</title>
<programlisting>int         xmlSecHmacKeyGenerate           (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecHmacAddOutputLength">xmlSecHmacAddOutputLength ()</title>
<programlisting>int         xmlSecHmacAddOutputLength       (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="size-t">size_t</link> bitsLen);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> the transform node
</entry></row>
<row><entry align="right"><parameter>bitsLen</parameter>&nbsp;:</entry>
<entry> the required length in bits
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecRsaKeyGenerate">xmlSecRsaKeyGenerate ()</title>
<programlisting>int         xmlSecRsaKeyGenerate            (<link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key,
                                             <link linkend="RSA-CAPS">RSA</link> *rsa);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>rsa</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecEncRsaOaepAddParam">xmlSecEncRsaOaepAddParam ()</title>
<programlisting>int         xmlSecEncRsaOaepAddParam        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             unsigned char *buf,
                                             <link linkend="size-t">size_t</link> size);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry>	the tranform node
</entry></row>
<row><entry align="right"><parameter>buf</parameter>&nbsp;:</entry>
<entry>		the OAEP param buffer
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry>		the OAEP param buffer size
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecXPath2TransformType">enum xmlSecXPath2TransformType</title>
<programlisting>typedef enum {
    xmlSecXPathTransformIntersect = 0,
    xmlSecXPathTransformSubtract,
    xmlSecXPathTransformUnion
} xmlSecXPath2TransformType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPathAdd">xmlSecTransformXPathAdd ()</title>
<programlisting>int         xmlSecTransformXPathAdd         (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> the transform node
</entry></row>
<row><entry align="right"><parameter>expression</parameter>&nbsp;:</entry>
<entry> the XPath expression
</entry></row>
<row><entry align="right"><parameter>namespaces</parameter>&nbsp;:</entry>
<entry> NULL terminated list of namespace prefix/href pairs
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPath2Add">xmlSecTransformXPath2Add ()</title>
<programlisting>int         xmlSecTransformXPath2Add        (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             <link linkend="xmlSecXPath2TransformType">xmlSecXPath2TransformType</link> type,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>expression</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>namespaces</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPointerAdd">xmlSecTransformXPointerAdd ()</title>
<programlisting>int         xmlSecTransformXPointerAdd      (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *expression,
                                             const <link linkend="xmlChar">xmlChar</link> **namespaces);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry> the transform node
</entry></row>
<row><entry align="right"><parameter>expression</parameter>&nbsp;:</entry>
<entry> the XPointer expression
</entry></row>
<row><entry align="right"><parameter>namespaces</parameter>&nbsp;:</entry>
<entry> NULL terminated list of namespace prefix/href pairs
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXsltAdd">xmlSecTransformXsltAdd ()</title>
<programlisting>int         xmlSecTransformXsltAdd          (<link linkend="xmlNodePtr">xmlNodePtr</link> transformNode,
                                             const <link linkend="xmlChar">xmlChar</link> *xslt);</programlisting>
<para>
</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformNode</parameter>&nbsp;:</entry>
<entry>	the transform ndoe
</entry></row>
<row><entry align="right"><parameter>xslt</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
