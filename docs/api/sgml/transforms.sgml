<refentry id="xmlsec-transforms">
<refmeta>
<refentrytitle>transforms</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>XMLSEC Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>transforms</refname><refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>
<synopsis>



#define     <link linkend="XMLSEC-TRANSFORM-BINARY-CHUNK-CAPS">XMLSEC_TRANSFORM_BINARY_CHUNK</link>
<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> <link linkend="xmlSecTransformIdsGet">xmlSecTransformIdsGet</link>      (void);
int         <link linkend="xmlSecTransformIdsInit">xmlSecTransformIdsInit</link>          (void);
void        <link linkend="xmlSecTransformIdsShutdown">xmlSecTransformIdsShutdown</link>      (void);
int         <link linkend="xmlSecTransformIdsRegisterDefault">xmlSecTransformIdsRegisterDefault</link>
                                            (void);
int         <link linkend="xmlSecTransformIdsRegister">xmlSecTransformIdsRegister</link>      (<link linkend="xmlSecTransformId">xmlSecTransformId</link> keyId);
enum        <link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link>;
enum        <link linkend="xmlSecTransformMode">xmlSecTransformMode</link>;
enum        <link linkend="xmlSecTransformOperation">xmlSecTransformOperation</link>;
typedef     <link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link>;
#define     <link linkend="xmlSecTransformUriTypeNone">xmlSecTransformUriTypeNone</link>
#define     <link linkend="xmlSecTransformUriTypeEmpty">xmlSecTransformUriTypeEmpty</link>
#define     <link linkend="xmlSecTransformUriTypeSameDocument">xmlSecTransformUriTypeSameDocument</link>
#define     <link linkend="xmlSecTransformUriTypeLocal">xmlSecTransformUriTypeLocal</link>
#define     <link linkend="xmlSecTransformUriTypeRemote">xmlSecTransformUriTypeRemote</link>
#define     <link linkend="xmlSecTransformUriTypeAny">xmlSecTransformUriTypeAny</link>
int         <link linkend="xmlSecTransformUriTypeCheck">xmlSecTransformUriTypeCheck</link>     (<link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link> type,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);
typedef     <link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link>;
#define     <link linkend="xmlSecTransformDataTypeUnknown">xmlSecTransformDataTypeUnknown</link>
#define     <link linkend="xmlSecTransformDataTypeBin">xmlSecTransformDataTypeBin</link>
#define     <link linkend="xmlSecTransformDataTypeXml">xmlSecTransformDataTypeXml</link>
typedef     <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link>;
#define     <link linkend="xmlSecTransformUsageUnknown">xmlSecTransformUsageUnknown</link>
#define     <link linkend="xmlSecTransformUsageDSigTransform">xmlSecTransformUsageDSigTransform</link>
#define     <link linkend="xmlSecTransformUsageC14NMethod">xmlSecTransformUsageC14NMethod</link>
#define     <link linkend="xmlSecTransformUsageDigestMethod">xmlSecTransformUsageDigestMethod</link>
#define     <link linkend="xmlSecTransformUsageSignatureMethod">xmlSecTransformUsageSignatureMethod</link>
#define     <link linkend="xmlSecTransformUsageEncryptionMethod">xmlSecTransformUsageEncryptionMethod</link>
#define     <link linkend="xmlSecTransformUsageAny">xmlSecTransformUsageAny</link>
int         (<link linkend="xmlSecTransformCtxPreExecuteCallback">*xmlSecTransformCtxPreExecuteCallback</link>)
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
struct      <link linkend="xmlSecTransformCtx">xmlSecTransformCtx</link>;
<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> <link linkend="xmlSecTransformCtxCreate">xmlSecTransformCtxCreate</link>
                                            (void);
void        <link linkend="xmlSecTransformCtxDestroy">xmlSecTransformCtxDestroy</link>       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);
int         <link linkend="xmlSecTransformCtxInitialize">xmlSecTransformCtxInitialize</link>    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);
void        <link linkend="xmlSecTransformCtxFinalize">xmlSecTransformCtxFinalize</link>      (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);
void        <link linkend="xmlSecTransformCtxReset">xmlSecTransformCtxReset</link>         (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);
int         <link linkend="xmlSecTransformCtxCopyUserPref">xmlSecTransformCtxCopyUserPref</link>  (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> dst,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> src);
int         <link linkend="xmlSecTransformCtxSetUri">xmlSecTransformCtxSetUri</link>        (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             const <link linkend="xmlChar">xmlChar</link> *uri,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> hereNode);
int         <link linkend="xmlSecTransformCtxAppend">xmlSecTransformCtxAppend</link>        (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
int         <link linkend="xmlSecTransformCtxPrepend">xmlSecTransformCtxPrepend</link>       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformCtxCreateAndAppend">xmlSecTransformCtxCreateAndAppend</link>
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformCtxCreateAndPrepend">xmlSecTransformCtxCreateAndPrepend</link>
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformCtxNodeRead">xmlSecTransformCtxNodeRead</link>
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);
int         <link linkend="xmlSecTransformCtxNodesListRead">xmlSecTransformCtxNodesListRead</link> (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);
int         <link linkend="xmlSecTransformCtxPrepare">xmlSecTransformCtxPrepare</link>       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> inputDataType);
int         <link linkend="xmlSecTransformCtxBinaryExecute">xmlSecTransformCtxBinaryExecute</link> (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize);
int         <link linkend="xmlSecTransformCtxUriExecute">xmlSecTransformCtxUriExecute</link>    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);
int         <link linkend="xmlSecTransformCtxXmlExecute">xmlSecTransformCtxXmlExecute</link>    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes);
int         <link linkend="xmlSecTransformCtxExecute">xmlSecTransformCtxExecute</link>       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlDocPtr">xmlDocPtr</link> doc);
void        <link linkend="xmlSecTransformCtxDebugDump">xmlSecTransformCtxDebugDump</link>     (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecTransformCtxDebugXmlDump">xmlSecTransformCtxDebugXmlDump</link>  (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
struct      <link linkend="xmlSecTransform">xmlSecTransform</link>;
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformCreate">xmlSecTransformCreate</link>    (<link linkend="xmlSecTransformId">xmlSecTransformId</link> id);
void        <link linkend="xmlSecTransformDestroy">xmlSecTransformDestroy</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformNodeRead">xmlSecTransformNodeRead</link>  (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPump">xmlSecTransformPump</link>             (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> left,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> right,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformSetKey">xmlSecTransformSetKey</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         <link linkend="xmlSecTransformSetKeyReq">xmlSecTransformSetKeyReq</link>        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
int         <link linkend="xmlSecTransformVerify">xmlSecTransformVerify</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformVerifyNodeContent">xmlSecTransformVerifyNodeContent</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> <link linkend="xmlSecTransformGetDataType">xmlSecTransformGetDataType</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPushBin">xmlSecTransformPushBin</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPopBin">xmlSecTransformPopBin</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPushXml">xmlSecTransformPushXml</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformPopXml">xmlSecTransformPopXml</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformExecute">xmlSecTransformExecute</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
void        <link linkend="xmlSecTransformDebugDump">xmlSecTransformDebugDump</link>        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecTransformDebugXmlDump">xmlSecTransformDebugXmlDump</link>     (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecTransformGetName">xmlSecTransformGetName</link>          (transform)
#define     <link linkend="xmlSecTransformIsValid">xmlSecTransformIsValid</link>          (transform)
#define     <link linkend="xmlSecTransformCheckType">xmlSecTransformCheckType</link>        (transform, t)
#define     <link linkend="xmlSecTransformCheckId">xmlSecTransformCheckId</link>          (transform, i)
#define     <link linkend="xmlSecTransformCheckSize">xmlSecTransformCheckSize</link>        (transform, size)
int         <link linkend="xmlSecTransformConnect">xmlSecTransformConnect</link>          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> left,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> right,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformAddAfter">xmlSecTransformAddAfter</link>  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);
<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <link linkend="xmlSecTransformAddBefore">xmlSecTransformAddBefore</link> (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);
void        <link linkend="xmlSecTransformRemove">xmlSecTransformRemove</link>           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> <link linkend="xmlSecTransformDefaultGetDataType">xmlSecTransformDefaultGetDataType</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPushBin">xmlSecTransformDefaultPushBin</link>   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPopBin">xmlSecTransformDefaultPopBin</link>    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPushXml">xmlSecTransformDefaultPushXml</link>   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         <link linkend="xmlSecTransformDefaultPopXml">xmlSecTransformDefaultPopXml</link>    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlOutputBufferPtr">xmlOutputBufferPtr</link> <link linkend="xmlSecTransformCreateOutputBuffer">xmlSecTransformCreateOutputBuffer</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
<link linkend="xmlParserInputBufferPtr">xmlParserInputBufferPtr</link> <link linkend="xmlSecTransformCreateInputBuffer">xmlSecTransformCreateInputBuffer</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformInitializeMethod">*xmlSecTransformInitializeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
void        (<link linkend="xmlSecTransformFinalizeMethod">*xmlSecTransformFinalizeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);
<link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> (<link linkend="xmlSecTransformGetDataTypeMethod">*xmlSecTransformGetDataTypeMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformNodeReadMethod">*xmlSecTransformNodeReadMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformNodeWriteMethod">*xmlSecTransformNodeWriteMethod</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformSetKeyRequirements">*xmlSecTransformSetKeyRequirements</link>)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);
int         (<link linkend="xmlSecTransformSetKeyMethod">*xmlSecTransformSetKeyMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);
int         (<link linkend="xmlSecTransformVerifyMethod">*xmlSecTransformVerifyMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPushBinMethod">*xmlSecTransformPushBinMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPopBinMethod">*xmlSecTransformPopBinMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPushXmlMethod">*xmlSecTransformPushXmlMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformPopXmlMethod">*xmlSecTransformPopXmlMethod</link>)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
int         (<link linkend="xmlSecTransformExecuteMethod">*xmlSecTransformExecuteMethod</link>) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);
struct      <link linkend="xmlSecTransformKlass">xmlSecTransformKlass</link>;
#define     <link linkend="xmlSecTransformKlassGetName">xmlSecTransformKlassGetName</link>     (klass)
#define     <link linkend="xmlSecTransformIdListId">xmlSecTransformIdListId</link>
<link linkend="xmlSecPtrListId">xmlSecPtrListId</link> <link linkend="xmlSecTransformIdListGetKlass">xmlSecTransformIdListGetKlass</link>
                                            (void);
int         <link linkend="xmlSecTransformIdListFind">xmlSecTransformIdListFind</link>       (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformIdListFindByHref">xmlSecTransformIdListFindByHref</link>
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             const <link linkend="xmlChar">xmlChar</link> *href,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformIdListFindByName">xmlSecTransformIdListFindByName</link>
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);
void        <link linkend="xmlSecTransformIdListDebugDump">xmlSecTransformIdListDebugDump</link>  (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
void        <link linkend="xmlSecTransformIdListDebugXmlDump">xmlSecTransformIdListDebugXmlDump</link>
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);
#define     <link linkend="xmlSecTransformIdUnknown">xmlSecTransformIdUnknown</link>
#define     <link linkend="xmlSecTransformBase64Id">xmlSecTransformBase64Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformBase64GetKlass">xmlSecTransformBase64GetKlass</link>
                                            (void);
void        <link linkend="xmlSecTransformBase64SetLineSize">xmlSecTransformBase64SetLineSize</link>
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);
#define     <link linkend="xmlSecTransformInclC14NId">xmlSecTransformInclC14NId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformInclC14NGetKlass">xmlSecTransformInclC14NGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformInclC14NWithCommentsId">xmlSecTransformInclC14NWithCommentsId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformInclC14NWithCommentsGetKlass">xmlSecTransformInclC14NWithCommentsGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformExclC14NId">xmlSecTransformExclC14NId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformExclC14NGetKlass">xmlSecTransformExclC14NGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformExclC14NWithCommentsId">xmlSecTransformExclC14NWithCommentsId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformExclC14NWithCommentsGetKlass">xmlSecTransformExclC14NWithCommentsGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformEnvelopedId">xmlSecTransformEnvelopedId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformEnvelopedGetKlass">xmlSecTransformEnvelopedGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformXPathId">xmlSecTransformXPathId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformXPathGetKlass">xmlSecTransformXPathGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformXPath2Id">xmlSecTransformXPath2Id</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformXPath2GetKlass">xmlSecTransformXPath2GetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformXPointerId">xmlSecTransformXPointerId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformXPointerGetKlass">xmlSecTransformXPointerGetKlass</link>
                                            (void);
int         <link linkend="xmlSecTransformXPointerSetExpr">xmlSecTransformXPointerSetExpr</link>  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             const <link linkend="xmlChar">xmlChar</link> *expr,
                                             <link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link> nodeSetType,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> hereNode);
#define     <link linkend="xmlSecTransformXsltId">xmlSecTransformXsltId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformXsltGetKlass">xmlSecTransformXsltGetKlass</link>
                                            (void);
#define     <link linkend="xmlSecTransformRemoveXmlTagsC14NId">xmlSecTransformRemoveXmlTagsC14NId</link>
<link linkend="xmlSecTransformId">xmlSecTransformId</link> <link linkend="xmlSecTransformRemoveXmlTagsC14NGetKlass">xmlSecTransformRemoveXmlTagsC14NGetKlass</link>
                                            (void);
</synopsis>
</refsynopsisdiv>





<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="XMLSEC-TRANSFORM-BINARY-CHUNK-CAPS">XMLSEC_TRANSFORM_BINARY_CHUNK</title>
<programlisting>#define XMLSEC_TRANSFORM_BINARY_CHUNK			64
</programlisting>
<para>
The binary data chunks size. XMLSec processes binary data one chunk 
at a time. Changing this impacts xmlsec memory usage and performance.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdsGet">xmlSecTransformIdsGet ()</title>
<programlisting><link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> xmlSecTransformIdsGet      (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdsInit">xmlSecTransformIdsInit ()</title>
<programlisting>int         xmlSecTransformIdsInit          (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdsShutdown">xmlSecTransformIdsShutdown ()</title>
<programlisting>void        xmlSecTransformIdsShutdown      (void);</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdsRegisterDefault">xmlSecTransformIdsRegisterDefault ()</title>
<programlisting>int         xmlSecTransformIdsRegisterDefault
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdsRegister">xmlSecTransformIdsRegister ()</title>
<programlisting>int         xmlSecTransformIdsRegister      (<link linkend="xmlSecTransformId">xmlSecTransformId</link> keyId);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>keyId</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformStatus">enum xmlSecTransformStatus</title>
<programlisting>typedef enum  {
    xmlSecTransformStatusNone = 0,
    xmlSecTransformStatusWorking,
    xmlSecTransformStatusFinished,
    xmlSecTransformStatusOk,
    xmlSecTransformStatusFail
} xmlSecTransformStatus;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformMode">enum xmlSecTransformMode</title>
<programlisting>typedef enum  {
    xmlSecTransformModeNone = 0,
    xmlSecTransformModePush,
    xmlSecTransformModePop
} xmlSecTransformMode;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformOperation">enum xmlSecTransformOperation</title>
<programlisting>typedef enum  {
    xmlSecTransformOperationNone = 0,
    xmlSecTransformOperationEncode,
    xmlSecTransformOperationDecode,
    xmlSecTransformOperationSign,
    xmlSecTransformOperationVerify,
    xmlSecTransformOperationEncrypt,
    xmlSecTransformOperationDecrypt
} xmlSecTransformOperation;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriType">xmlSecTransformUriType</title>
<programlisting>typedef unsigned int				xmlSecTransformUriType;
</programlisting>
<para>
URI transform type bit mask.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeNone">xmlSecTransformUriTypeNone</title>
<programlisting>#define xmlSecTransformUriTypeNone		0x0000
</programlisting>
<para>
The URI type is unknown or not set.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeEmpty">xmlSecTransformUriTypeEmpty</title>
<programlisting>#define xmlSecTransformUriTypeEmpty		0x0001
</programlisting>
<para>
The empty URI ("") type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeSameDocument">xmlSecTransformUriTypeSameDocument</title>
<programlisting>#define xmlSecTransformUriTypeSameDocument	0x0002		
</programlisting>
<para>
The smae document ("#...") but not empty ("") URI type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeLocal">xmlSecTransformUriTypeLocal</title>
<programlisting>#define xmlSecTransformUriTypeLocal		0x0004
</programlisting>
<para>
The local URI ("file:///....") type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeRemote">xmlSecTransformUriTypeRemote</title>
<programlisting>#define xmlSecTransformUriTypeRemote		0x0008
</programlisting>
<para>
The remote URI type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeAny">xmlSecTransformUriTypeAny</title>
<programlisting>#define xmlSecTransformUriTypeAny		0xFFFF
</programlisting>
<para>
Any URI type.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUriTypeCheck">xmlSecTransformUriTypeCheck ()</title>
<programlisting>int         xmlSecTransformUriTypeCheck     (<link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link> type,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>type</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>uri</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataType">xmlSecTransformDataType</title>
<programlisting>typedef unsigned char				xmlSecTransformDataType;
</programlisting>
<para>
Transform data type bit mask.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeUnknown">xmlSecTransformDataTypeUnknown</title>
<programlisting>#define xmlSecTransformDataTypeUnknown		0x0000
</programlisting>
<para>
The transform data type is unknown or nor data expected.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeBin">xmlSecTransformDataTypeBin</title>
<programlisting>#define xmlSecTransformDataTypeBin		0x0001
</programlisting>
<para>
The binary transform data.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDataTypeXml">xmlSecTransformDataTypeXml</title>
<programlisting>#define xmlSecTransformDataTypeXml		0x0002
</programlisting>
<para>
The xml transform data.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsage">xmlSecTransformUsage</title>
<programlisting>typedef unsigned int				xmlSecTransformUsage;
</programlisting>
<para>
The transform usage bit mask.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageUnknown">xmlSecTransformUsageUnknown</title>
<programlisting>#define xmlSecTransformUsageUnknown		0x0000
</programlisting>
<para>
Transforms usage is unknown or undefined.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageDSigTransform">xmlSecTransformUsageDSigTransform</title>
<programlisting>#define xmlSecTransformUsageDSigTransform	0x0001
</programlisting>
<para>
Transform could be used in &lt;dsig:Transform&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageC14NMethod">xmlSecTransformUsageC14NMethod</title>
<programlisting>#define xmlSecTransformUsageC14NMethod		0x0002
</programlisting>
<para>
Transform could be used in &lt;dsig:CanonicalizationMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageDigestMethod">xmlSecTransformUsageDigestMethod</title>
<programlisting>#define xmlSecTransformUsageDigestMethod	0x0004
</programlisting>
<para>
Transform could be used in &lt;dsig:DigestMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageSignatureMethod">xmlSecTransformUsageSignatureMethod</title>
<programlisting>#define xmlSecTransformUsageSignatureMethod	0x0008
</programlisting>
<para>
Transform could be used in &lt;dsig:SignatureMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageEncryptionMethod">xmlSecTransformUsageEncryptionMethod</title>
<programlisting>#define xmlSecTransformUsageEncryptionMethod	0x0010
</programlisting>
<para>
Transform could be used in &lt;enc:EncryptionMethod&gt;.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformUsageAny">xmlSecTransformUsageAny</title>
<programlisting>#define xmlSecTransformUsageAny			0xFFFF
</programlisting>
<para>
Transform could be used for operation.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxPreExecuteCallback">xmlSecTransformCtxPreExecuteCallback ()</title>
<programlisting>int         (*xmlSecTransformCtxPreExecuteCallback)
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The callback called after creating transforms chain but before
starting data processing. Application can use this callback to
do additional transforms chain verification or modification and
aborting transforms execution (if necessary).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>	the pointer to transform's context. 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success and a negative value otherwise (in this case,
transforms chain will not be executed and xmlsec processing stops).
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtx">struct xmlSecTransformCtx</title>
<programlisting>struct xmlSecTransformCtx {
    /* user settings */
    void*					userData;
    unsigned int				flags;
    unsigned int				flags2;
    xmlSecTransformUriType			enabledUris;
    xmlSecPtrList				enabledTransforms;
    xmlSecTransformCtxPreExecuteCallback	preExecCallback;
    
    /* results */
    xmlSecBufferPtr				result;
    xmlSecTransformStatus			status;
    xmlChar*					uri;
    xmlChar*					xptrExpr;
    xmlSecTransformPtr				first;
    xmlSecTransformPtr				last;

    /* for the future */
    void*					reserved0;
    void*					reserved1;
};
</programlisting>
<para>
The transform execution context.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry>void *<structfield>userData</structfield></entry>
<entry> 		the pointer to user data (xmlsec and xmlsec-crypto never 
		touch this).
</entry>
</row>
<row>
<entry>unsigned int <structfield>flags</structfield></entry>
<entry> 		the bit mask flags to control transforms execution 
		(reserved for the future).
</entry>
</row>
<row>
<entry>unsigned int <structfield>flags2</structfield></entry>
<entry> 		the bit mask flags to control transforms execution 
			(reserved for the future).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformUriType">xmlSecTransformUriType</link> <structfield>enabledUris</structfield></entry>
<entry> 	the allowed transform data source uri types.
</entry>
</row>
<row>
<entry><link linkend="xmlSecPtrList">xmlSecPtrList</link> <structfield>enabledTransforms</structfield></entry>
<entry> 	the list of enabled transforms; if list is empty (default)
		then all registered transforms are enabled.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformCtxPreExecuteCallback">xmlSecTransformCtxPreExecuteCallback</link> <structfield>preExecCallback</structfield></entry>
<entry>	the callback called after preparing transform chain
		and right before actual data processing; application
		can use this callback to change transforms parameters,
		insert additional transforms in the chain or do
		additional validation (and abort transform execution 
		if needed).
</entry>
</row>
<row>
<entry><link linkend="xmlSecBufferPtr">xmlSecBufferPtr</link> <structfield>result</structfield></entry>
<entry>		the pointer to transforms result buffer.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link> <structfield>status</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlChar">xmlChar</link> *<structfield>uri</structfield></entry>
<entry>		the data source URI without xpointer expression.
</entry>
</row>
<row>
<entry><link linkend="xmlChar">xmlChar</link> *<structfield>xptrExpr</structfield></entry>
<entry>		the xpointer expression from data source URI (if any).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>first</structfield></entry>
<entry>		the first transform in the chain.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>last</structfield></entry>
<entry>		the last transform in the chain.
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>		reserved for the future.
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>		reserved for the future.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxCreate">xmlSecTransformCtxCreate ()</title>
<programlisting><link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> xmlSecTransformCtxCreate
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxDestroy">xmlSecTransformCtxDestroy ()</title>
<programlisting>void        xmlSecTransformCtxDestroy       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxInitialize">xmlSecTransformCtxInitialize ()</title>
<programlisting>int         xmlSecTransformCtxInitialize    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxFinalize">xmlSecTransformCtxFinalize ()</title>
<programlisting>void        xmlSecTransformCtxFinalize      (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxReset">xmlSecTransformCtxReset ()</title>
<programlisting>void        xmlSecTransformCtxReset         (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxCopyUserPref">xmlSecTransformCtxCopyUserPref ()</title>
<programlisting>int         xmlSecTransformCtxCopyUserPref  (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> dst,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> src);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>dst</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>src</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxSetUri">xmlSecTransformCtxSetUri ()</title>
<programlisting>int         xmlSecTransformCtxSetUri        (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             const <link linkend="xmlChar">xmlChar</link> *uri,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> hereNode);</programlisting>
<para>
Parses uri and adds xpointer transforms if required.
</para>
<para>
The following examples demonstrate what the URI attribute identifies and
how it is dereferenced 
(http://www.w3.org/TR/xmldsig-core/<link linkend="sec-ReferenceProcessingModel">sec-ReferenceProcessingModel</link>):
</para>
<para>
- URI="http://example.com/bar.xml"
identifies the octets that represent the external resource 
'http://example.com/bar.xml', that is probably an XML document given 
its file extension. 
</para>
<para>
- URI="http://example.com/bar.xml<link linkend="chapter1">chapter1</link>"
identifies the element with ID attribute value 'chapter1' of the 
external XML resource 'http://example.com/bar.xml', provided as an 
octet stream. Again, for the sake of interoperability, the element 
identified as 'chapter1' should be obtained using an XPath transform 
rather than a URI fragment (barename XPointer resolution in external 
resources is not REQUIRED in this specification). 
</para>
<para>
- URI=""
identifies the node-set (minus any comment nodes) of the XML resource 
containing the signature 
</para>
<para>
- URI="<link linkend="chapter1">chapter1</link>"
identifies a node-set containing the element with ID attribute value 
'chapter1' of the XML resource containing the signature. XML Signature 
(and its applications) modify this node-set to include the element plus 
all descendents including namespaces and attributes -- but not comments.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>uri</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>hereNode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxAppend">xmlSecTransformCtxAppend ()</title>
<programlisting>int         xmlSecTransformCtxAppend        (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxPrepend">xmlSecTransformCtxPrepend ()</title>
<programlisting>int         xmlSecTransformCtxPrepend       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxCreateAndAppend">xmlSecTransformCtxCreateAndAppend ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformCtxCreateAndAppend
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxCreateAndPrepend">xmlSecTransformCtxCreateAndPrepend ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformCtxCreateAndPrepend
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> id);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxNodeRead">xmlSecTransformCtxNodeRead ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformCtxNodeRead
                                            (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxNodesListRead">xmlSecTransformCtxNodesListRead ()</title>
<programlisting>int         xmlSecTransformCtxNodesListRead (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxPrepare">xmlSecTransformCtxPrepare ()</title>
<programlisting>int         xmlSecTransformCtxPrepare       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> inputDataType);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>inputDataType</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxBinaryExecute">xmlSecTransformCtxBinaryExecute ()</title>
<programlisting>int         xmlSecTransformCtxBinaryExecute (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxUriExecute">xmlSecTransformCtxUriExecute ()</title>
<programlisting>int         xmlSecTransformCtxUriExecute    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             const <link linkend="xmlChar">xmlChar</link> *uri);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>uri</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxXmlExecute">xmlSecTransformCtxXmlExecute ()</title>
<programlisting>int         xmlSecTransformCtxXmlExecute    (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxExecute">xmlSecTransformCtxExecute ()</title>
<programlisting>int         xmlSecTransformCtxExecute       (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="xmlDocPtr">xmlDocPtr</link> doc);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>doc</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxDebugDump">xmlSecTransformCtxDebugDump ()</title>
<programlisting>void        xmlSecTransformCtxDebugDump     (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCtxDebugXmlDump">xmlSecTransformCtxDebugXmlDump ()</title>
<programlisting>void        xmlSecTransformCtxDebugXmlDump  (<link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> ctx,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>ctx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransform">struct xmlSecTransform</title>
<programlisting>struct xmlSecTransform {
    xmlSecTransformId 			id; 
    xmlSecTransformOperation		operation;
    xmlSecTransformStatus		status;
    xmlNodePtr				hereNode;

    /* transforms chain */
    xmlSecTransformPtr			next;
    xmlSecTransformPtr			prev;

    /* binary data */
    xmlSecBuffer			inBuf;
    xmlSecBuffer			outBuf;
        
    /* xml data */
    xmlSecNodeSetPtr			inNodes;
    xmlSecNodeSetPtr			outNodes;

    /* reserved for the future */    
    void*				reserved0;
    void*				reserved1;
};
</programlisting>
<para>
The transform structure.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="xmlSecTransformId">xmlSecTransformId</link> <structfield>id</structfield></entry>
<entry> 		the transform id (pointer to <link linkend="xmlSecTransformId">xmlSecTransformId</link>).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformOperation">xmlSecTransformOperation</link> <structfield>operation</structfield></entry>
<entry>		the transform's opertaion.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformStatus">xmlSecTransformStatus</link> <structfield>status</structfield></entry>
<entry> 		the current status.
</entry>
</row>
<row>
<entry><link linkend="xmlNodePtr">xmlNodePtr</link> <structfield>hereNode</structfield></entry>
<entry>		the pointer to transform's &lt;dsig:Transform /&gt; node.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>next</structfield></entry>
<entry>		the pointer to next transform in the chain.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> <structfield>prev</structfield></entry>
<entry>		the pointer to previous transform in the chain.
</entry>
</row>
<row>
<entry><link linkend="xmlSecBuffer">xmlSecBuffer</link> <structfield>inBuf</structfield></entry>
<entry>		the input binary data buffer.
</entry>
</row>
<row>
<entry><link linkend="xmlSecBuffer">xmlSecBuffer</link> <structfield>outBuf</structfield></entry>
<entry>		the output binary data buffer.
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>inNodes</structfield></entry>
<entry>		the input XML nodes.
</entry>
</row>
<row>
<entry><link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> <structfield>outNodes</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>		reserved for the future.
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>		reserved for the future.
</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCreate">xmlSecTransformCreate ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformCreate    (<link linkend="xmlSecTransformId">xmlSecTransformId</link> id);</programlisting>
<para>
Creates new transform from the transform id object.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>id</parameter>&nbsp;:</entry>
<entry> the transform id to create.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>the pointer to newly created <link linkend="xmlSecTransform">xmlSecTransform</link> structure
or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDestroy">xmlSecTransformDestroy ()</title>
<programlisting>void        xmlSecTransformDestroy          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Destroys transform by calling appropriate transform specific function.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeRead">xmlSecTransformNodeRead ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformNodeRead  (<link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
Reads transform from the <parameter>node</parameter> as follows:
   1) reads "Algorithm" attribute;
   2) checks the list of known algorithms;
   3) calls transform create method;
   4) calls transform read transform node method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry> the pointer to the &lt;dsig:Transform&gt; node.
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPump">xmlSecTransformPump ()</title>
<programlisting>int         xmlSecTransformPump             (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> left,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> right,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>left</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>right</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKey">xmlSecTransformSetKey ()</title>
<programlisting>int         xmlSecTransformSetKey           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
Sets the key for binary transform (wrapper for transform specific 
<link linkend="setKey">setKey</link>() method).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecKey">xmlSecKey</link> structure. 
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyReq">xmlSecTransformSetKeyReq ()</title>
<programlisting>int         xmlSecTransformSetKeyReq        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Sets the key for binary transform (wrapper for transform specific 
<link linkend="setKeyReq">setKeyReq</link>() method).</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformVerify">xmlSecTransformVerify ()</title>
<programlisting>int         xmlSecTransformVerify           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformVerifyNodeContent">xmlSecTransformVerifyNodeContent ()</title>
<programlisting>int         xmlSecTransformVerifyNodeContent
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetDataType">xmlSecTransformGetDataType ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> xmlSecTransformGetDataType
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushBin">xmlSecTransformPushBin ()</title>
<programlisting>int         xmlSecTransformPushBin          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopBin">xmlSecTransformPopBin ()</title>
<programlisting>int         xmlSecTransformPopBin           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushXml">xmlSecTransformPushXml ()</title>
<programlisting>int         xmlSecTransformPushXml          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopXml">xmlSecTransformPopXml ()</title>
<programlisting>int         xmlSecTransformPopXml           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExecute">xmlSecTransformExecute ()</title>
<programlisting>int         xmlSecTransformExecute          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>last</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDebugDump">xmlSecTransformDebugDump ()</title>
<programlisting>void        xmlSecTransformDebugDump        (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDebugXmlDump">xmlSecTransformDebugXmlDump ()</title>
<programlisting>void        xmlSecTransformDebugXmlDump     (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetName">xmlSecTransformGetName()</title>
<programlisting>#define     xmlSecTransformGetName(transform)</programlisting>
<para>
Macro. Returns transform name.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIsValid">xmlSecTransformIsValid()</title>
<programlisting>#define     xmlSecTransformIsValid(transform)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> 		the pointer to transform.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckType">xmlSecTransformCheckType()</title>
<programlisting>#define     xmlSecTransformCheckType(transform, t)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has specified type <parameter>t</parameter> 
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> 		the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>t</parameter>&nbsp;:</entry>
<entry> 			the transform type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckId">xmlSecTransformCheckId()</title>
<programlisting>#define     xmlSecTransformCheckId(transform, i)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has specified id <parameter>i</parameter> 
or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>		the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>i</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCheckSize">xmlSecTransformCheckSize()</title>
<programlisting>#define     xmlSecTransformCheckSize(transform, size)</programlisting>
<para>
Macro. Returns 1 if the <parameter>transform</parameter> is valid and has at least <parameter>size</parameter>
bytes or 0 otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> 		the pointer to transform.
</entry></row>
<row><entry align="right"><parameter>size</parameter>&nbsp;:</entry>
<entry> 		the transform object size.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformConnect">xmlSecTransformConnect ()</title>
<programlisting>int         xmlSecTransformConnect          (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> left,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> right,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
<parameter>left</parameter>:
<parameter>right</parameter>:
</para>
<para>
If the data object is a node-set and the next transform requires octets, 
the signature application MUST attempt to convert the node-set to an octet 
stream using Canonical XML [XML-C14N].  
</para>
<para>
The story is different if the right transform is base64 decode:
</para>
<para>
http://www.w3.org/TR/xmldsig-core/<link linkend="sec-Base-64">sec-Base-64</link>
</para>
<para>
This transform requires an octet stream for input. If an XPath node-set 
(or sufficiently functional alternative) is given as input, then it is 
converted to an octet stream by performing operations logically equivalent 
to 1) applying an XPath transform with expression self::<link linkend="text">text</link>(), then 2) 
taking the string-value of the node-set. Thus, if an XML element is 
identified by a barename XPointer in the Reference URI, and its content 
consists solely of base64 encoded character data, then this transform 
automatically strips away the start and end tags of the identified element 
and any of its descendant elements as well as any descendant comments and 
processing instructions. The output of this transform is an octet stream.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>left</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>right</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAddAfter">xmlSecTransformAddAfter ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformAddAfter  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);</programlisting>
<para>
Adds <parameter>newTransform</parameter> after the <parameter>curTransform</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>curTransform</parameter>&nbsp;:</entry>
<entry> the pointer to current transform (may be NULL).
</entry></row>
<row><entry align="right"><parameter>newTransform</parameter>&nbsp;:</entry>
<entry> the pointer to new transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new transforms chain or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformAddBefore">xmlSecTransformAddBefore ()</title>
<programlisting><link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> xmlSecTransformAddBefore (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> curTransform,
                                             <link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> newTransform);</programlisting>
<para>
Adds <parameter>newTransform</parameter> before the <parameter>curTransform</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>curTransform</parameter>&nbsp;:</entry>
<entry> the pointer to current transform (may be NULL).
</entry></row>
<row><entry align="right"><parameter>newTransform</parameter>&nbsp;:</entry>
<entry> the pointer to new transform.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>pointer to the new transforms chain or NULL if an error occurs.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRemove">xmlSecTransformRemove ()</title>
<programlisting>void        xmlSecTransformRemove           (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
Removes <parameter>transform</parameter> from the chain. This method MUST be called by any 
bin transform id destructor.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to <link linkend="xmlSecTransform">xmlSecTransform</link> structure.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultGetDataType">xmlSecTransformDefaultGetDataType ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> xmlSecTransformDefaultGetDataType
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPushBin">xmlSecTransformDefaultPushBin ()</title>
<programlisting>int         xmlSecTransformDefaultPushBin   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPopBin">xmlSecTransformDefaultPopBin ()</title>
<programlisting>int         xmlSecTransformDefaultPopBin    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPushXml">xmlSecTransformDefaultPushXml ()</title>
<programlisting>int         xmlSecTransformDefaultPushXml   (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformDefaultPopXml">xmlSecTransformDefaultPopXml ()</title>
<programlisting>int         xmlSecTransformDefaultPopXml    (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCreateOutputBuffer">xmlSecTransformCreateOutputBuffer ()</title>
<programlisting><link linkend="xmlOutputBufferPtr">xmlOutputBufferPtr</link> xmlSecTransformCreateOutputBuffer
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformCreateInputBuffer">xmlSecTransformCreateInputBuffer ()</title>
<programlisting><link linkend="xmlParserInputBufferPtr">xmlParserInputBufferPtr</link> xmlSecTransformCreateInputBuffer
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInitializeMethod">xmlSecTransformInitializeMethod ()</title>
<programlisting>int         (*xmlSecTransformInitializeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
The transform specific initialization method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformFinalizeMethod">xmlSecTransformFinalizeMethod ()</title>
<programlisting>void        (*xmlSecTransformFinalizeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform);</programlisting>
<para>
The transform specific destroy method.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformGetDataTypeMethod">xmlSecTransformGetDataTypeMethod ()</title>
<programlisting><link linkend="xmlSecTransformDataType">xmlSecTransformDataType</link> (*xmlSecTransformGetDataTypeMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecTransformMode">xmlSecTransformMode</link> mode,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to query information about transform
data type in specified mode <link linkend="mode">mode</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>mode</parameter>&nbsp;:</entry>
<entry>			the mode.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>transform data type.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeReadMethod">xmlSecTransformNodeReadMethod ()</title>
<programlisting>int         (*xmlSecTransformNodeReadMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to read the transform data from 
the <link linkend="node">node</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>			the pointer to &lt;dsig:Transform/&gt; node.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformNodeWriteMethod">xmlSecTransformNodeWriteMethod ()</title>
<programlisting>int         (*xmlSecTransformNodeWriteMethod)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> node,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to write transform information to an XML node <link linkend="node">node</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>node</parameter>&nbsp;:</entry>
<entry>			the pointer to &lt;dsig:Transform/&gt; node.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyRequirements">xmlSecTransformSetKeyRequirements ()</title>
<programlisting>int         (*xmlSecTransformSetKeyRequirements)
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyReqPtr">xmlSecKeyReqPtr</link> keyReq);</programlisting>
<para>
Transform specific method to set transform's key requirements.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>keyReq</parameter>&nbsp;:</entry>
<entry>			the pointer to key requirements structure.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformSetKeyMethod">xmlSecTransformSetKeyMethod ()</title>
<programlisting>int         (*xmlSecTransformSetKeyMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecKeyPtr">xmlSecKeyPtr</link> key);</programlisting>
<para>
The transform specific method to set the key for use.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>key</parameter>&nbsp;:</entry>
<entry> 			the pointer to key.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformVerifyMethod">xmlSecTransformVerifyMethod ()</title>
<programlisting>int         (*xmlSecTransformVerifyMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to verify transform processing results
(used by digest and signature transforms). This method sets <link linkend="status">status</link>
member of the <link linkend="xmlSecTransform">xmlSecTransform</link> structure to either <link linkend="xmlSecTransformStatusOk">xmlSecTransformStatusOk</link>
if verification succeeded or <link linkend="xmlSecTransformStatusFail">xmlSecTransformStatusFail</link> otherwise.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>			the input buffer.
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>			the size of input buffer <link linkend="data">data</link>.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushBinMethod">xmlSecTransformPushBinMethod ()</title>
<programlisting>int         (*xmlSecTransformPushBinMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> dataSize,
                                             int final,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to process data from <link linkend="data">data</link> and push
result to the next transform in the chain.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>			the input binary data,
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>			the input data size.
</entry></row>
<row><entry align="right"><parameter>final</parameter>&nbsp;:</entry>
<entry>			the flag: if set to 1 then it's the last
			data chunk.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopBinMethod">xmlSecTransformPopBinMethod ()</title>
<programlisting>int         (*xmlSecTransformPopBinMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             unsigned char *data,
                                             <link linkend="size-t">size_t</link> maxDataSize,
                                             <link linkend="size-t">size_t</link> *dataSize,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to pop data from previous transform 
in the chain and return result in the <link linkend="data">data</link> buffer. The size of returned
data is placed in the <link linkend="dataSize">dataSize</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>data</parameter>&nbsp;:</entry>
<entry>			the buffer to store result data.
</entry></row>
<row><entry align="right"><parameter>maxDataSize</parameter>&nbsp;:</entry>
<entry>		the size of the buffer <link linkend="data">data</link>.
</entry></row>
<row><entry align="right"><parameter>dataSize</parameter>&nbsp;:</entry>
<entry>			the pointer to returned data size.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPushXmlMethod">xmlSecTransformPushXmlMethod ()</title>
<programlisting>int         (*xmlSecTransformPushXmlMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to process <link linkend="nodes">nodes</link> and push result to the next 
transform in the chain.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>			the input nodes.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformPopXmlMethod">xmlSecTransformPopXmlMethod ()</title>
<programlisting>int         (*xmlSecTransformPopXmlMethod)  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="xmlSecNodeSetPtr">xmlSecNodeSetPtr</link> *nodes,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
The transform specific method to pop data from previous transform in the chain,
process the data and return result in <link linkend="nodes">nodes</link>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>nodes</parameter>&nbsp;:</entry>
<entry>			the pointer to store popinter to result nodes.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExecuteMethod">xmlSecTransformExecuteMethod ()</title>
<programlisting>int         (*xmlSecTransformExecuteMethod) (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             int last,
                                             <link linkend="xmlSecTransformCtxPtr">xmlSecTransformCtxPtr</link> transformCtx);</programlisting>
<para>
Transform specific method to process a chunk of data.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>			the pointer to transform object.
</entry></row>
<row><entry align="right"><parameter>last</parameter>&nbsp;:</entry>
<entry>			the flag: if set to 1 then it's the last data chunk.
</entry></row>
<row><entry align="right"><parameter>transformCtx</parameter>&nbsp;:</entry>
<entry>		the pointer to transform context object.
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>0 on success or a negative value otherwise.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKlass">struct xmlSecTransformKlass</title>
<programlisting>struct xmlSecTransformKlass {
    /* data */
    size_t				klassSize;
    size_t				objSize;
    const xmlChar*			name;
    const xmlChar*			href;
    xmlSecTransformUsage		usage;

    /* methods */
    xmlSecTransformInitializeMethod	initialize;
    xmlSecTransformFinalizeMethod	finalize;

    xmlSecTransformNodeReadMethod	readNode;
    xmlSecTransformNodeWriteMethod	writeNode;

    xmlSecTransformSetKeyRequirements	setKeyReq;
    xmlSecTransformSetKeyMethod		setKey;
    xmlSecTransformVerifyMethod		verify;
    xmlSecTransformGetDataTypeMethod	getDataType;

    xmlSecTransformPushBinMethod	pushBin;
    xmlSecTransformPopBinMethod		popBin;
    xmlSecTransformPushXmlMethod	pushXml;
    xmlSecTransformPopXmlMethod		popXml;
    
    /* low level method */
    xmlSecTransformExecuteMethod	execute;

    /* reserved for future */ 
    void* 				reserved0;
    void* 				reserved1;
};
</programlisting>
<para>
The transform klass desccription structure.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="struct">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row>
<entry><link linkend="size-t">size_t</link> <structfield>klassSize</structfield></entry>
<entry>			the transform klass structure size.
</entry>
</row>
<row>
<entry><link linkend="size-t">size_t</link> <structfield>objSize</structfield></entry>
<entry>			the transform object size.
</entry>
</row>
<row>
<entry>const <link linkend="xmlChar">xmlChar</link> *<structfield>name</structfield></entry>
<entry>			the transform's name.
</entry>
</row>
<row>
<entry>const <link linkend="xmlChar">xmlChar</link> *<structfield>href</structfield></entry>
<entry>			the transform's identification string (href).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> <structfield>usage</structfield></entry>
<entry>			the allowed transforms usages.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformInitializeMethod">xmlSecTransformInitializeMethod</link> <structfield>initialize</structfield></entry>
<entry>			the initialization method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformFinalizeMethod">xmlSecTransformFinalizeMethod</link> <structfield>finalize</structfield></entry>
<entry>			the finmalization (destroy) function.
readNode:			the XML node read method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformNodeReadMethod">xmlSecTransformNodeReadMethod</link> <structfield>readNode</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformNodeWriteMethod">xmlSecTransformNodeWriteMethod</link> <structfield>writeNode</structfield></entry>
<entry>			the XML node write method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformSetKeyRequirements">xmlSecTransformSetKeyRequirements</link> <structfield>setKeyReq</structfield></entry>
<entry>			the set key requirements method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformSetKeyMethod">xmlSecTransformSetKeyMethod</link> <structfield>setKey</structfield></entry>
<entry>			the set key method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformVerifyMethod">xmlSecTransformVerifyMethod</link> <structfield>verify</structfield></entry>
<entry>			the verify method (for digest and signature transforms).
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformGetDataTypeMethod">xmlSecTransformGetDataTypeMethod</link> <structfield>getDataType</structfield></entry>
<entry>		the input/output data type query method.
<parameter>pushBin</parameter>;			the binary data "push thru chain" processing method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPushBinMethod">xmlSecTransformPushBinMethod</link> <structfield>pushBin</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPopBinMethod">xmlSecTransformPopBinMethod</link> <structfield>popBin</structfield></entry>
<entry>			the binary data "pop from chain" procesing method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPushXmlMethod">xmlSecTransformPushXmlMethod</link> <structfield>pushXml</structfield></entry>
<entry>			the XML data "push thru chain" processing method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformPopXmlMethod">xmlSecTransformPopXmlMethod</link> <structfield>popXml</structfield></entry>
<entry>			the XML data "pop from chain" procesing method.
</entry>
</row>
<row>
<entry><link linkend="xmlSecTransformExecuteMethod">xmlSecTransformExecuteMethod</link> <structfield>execute</structfield></entry>
<entry>			the low level data processing method used  by default
			implementations of <parameter>pushBin</parameter>, <parameter>popBin</parameter>, <parameter>pushXml</parameter> and <parameter>popXml</parameter>.
</entry>
</row>
<row>
<entry>void *<structfield>reserved0</structfield></entry>
<entry>
</entry>
</row>
<row>
<entry>void *<structfield>reserved1</structfield></entry>
<entry>

</entry>
</row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformKlassGetName">xmlSecTransformKlassGetName()</title>
<programlisting>#define     xmlSecTransformKlassGetName(klass)</programlisting>
<para>
Macro. Returns transform klass name.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>klass</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListId">xmlSecTransformIdListId</title>
<programlisting>#define xmlSecTransformIdListId	xmlSecTransformIdListGetKlass()
</programlisting>
<para>
Transform klasses list klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListGetKlass">xmlSecTransformIdListGetKlass ()</title>
<programlisting><link linkend="xmlSecPtrListId">xmlSecPtrListId</link> xmlSecTransformIdListGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListFind">xmlSecTransformIdListFind ()</title>
<programlisting>int         xmlSecTransformIdListFind       (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="xmlSecTransformId">xmlSecTransformId</link> transformId);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>transformId</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListFindByHref">xmlSecTransformIdListFindByHref ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformIdListFindByHref
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             const <link linkend="xmlChar">xmlChar</link> *href,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>href</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListFindByName">xmlSecTransformIdListFindByName ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformIdListFindByName
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             const <link linkend="xmlChar">xmlChar</link> *name,
                                             <link linkend="xmlSecTransformUsage">xmlSecTransformUsage</link> usage);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>name</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>usage</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListDebugDump">xmlSecTransformIdListDebugDump ()</title>
<programlisting>void        xmlSecTransformIdListDebugDump  (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdListDebugXmlDump">xmlSecTransformIdListDebugXmlDump ()</title>
<programlisting>void        xmlSecTransformIdListDebugXmlDump
                                            (<link linkend="xmlSecPtrListPtr">xmlSecPtrListPtr</link> list,
                                             <link linkend="FILE-CAPS">FILE</link> *output);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>list</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>output</parameter>&nbsp;:</entry>
<entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformIdUnknown">xmlSecTransformIdUnknown</title>
<programlisting>#define xmlSecTransformIdUnknown			NULL
</programlisting>
<para>
The "unknown" transform id (NULL).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64Id">xmlSecTransformBase64Id</title>
<programlisting>#define     xmlSecTransformBase64Id</programlisting>
<para>
The base64 encode transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64GetKlass">xmlSecTransformBase64GetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformBase64GetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformBase64SetLineSize">xmlSecTransformBase64SetLineSize ()</title>
<programlisting>void        xmlSecTransformBase64SetLineSize
                                            (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             <link linkend="size-t">size_t</link> lineSize);</programlisting>
<para>
Sets the max line size to <parameter>lineSize</parameter>.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry> the pointer to BASE64 encode transform.
</entry></row>
<row><entry align="right"><parameter>lineSize</parameter>&nbsp;:</entry>
<entry> the new max line size.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInclC14NId">xmlSecTransformInclC14NId</title>
<programlisting>#define     xmlSecTransformInclC14NId</programlisting>
<para>
The regular (inclusive) C14N without comments transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInclC14NGetKlass">xmlSecTransformInclC14NGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformInclC14NGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInclC14NWithCommentsId">xmlSecTransformInclC14NWithCommentsId</title>
<programlisting>#define     xmlSecTransformInclC14NWithCommentsId</programlisting>
<para>
The regular (inclusive) C14N with comments transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformInclC14NWithCommentsGetKlass">xmlSecTransformInclC14NWithCommentsGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformInclC14NWithCommentsGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExclC14NId">xmlSecTransformExclC14NId</title>
<programlisting>#define     xmlSecTransformExclC14NId</programlisting>
<para>
The exclusive C14N without comments transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExclC14NGetKlass">xmlSecTransformExclC14NGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformExclC14NGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExclC14NWithCommentsId">xmlSecTransformExclC14NWithCommentsId</title>
<programlisting>#define     xmlSecTransformExclC14NWithCommentsId</programlisting>
<para>
The exclusive C14N with comments transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformExclC14NWithCommentsGetKlass">xmlSecTransformExclC14NWithCommentsGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformExclC14NWithCommentsGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformEnvelopedId">xmlSecTransformEnvelopedId</title>
<programlisting>#define     xmlSecTransformEnvelopedId</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformEnvelopedGetKlass">xmlSecTransformEnvelopedGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformEnvelopedGetKlass
                                            (void);</programlisting>
<para>
http://www.w3.org/TR/xmldsig-core/<link linkend="sec-EnvelopedSignature">sec-EnvelopedSignature</link>
</para>
<para>
An enveloped signature transform T removes the whole Signature element 
containing T from the digest calculation of the Reference element 
containing T. The entire string of characters used by an XML processor 
to match the Signature with the XML production element is removed. 
The output of the transform is equivalent to the output that would 
result from replacing T with an XPath transform containing the following 
XPath parameter element:
</para>
<para>
&lt;XPath xmlns:dsig="&amp;dsig;"&gt;
  count(ancestor-or-self::dsig:Signature |
  <link linkend="here">here</link>()/ancestor::dsig:Signature[1]) &gt;
  count(ancestor-or-self::dsig:Signature)&lt;/XPath&gt;
   
The input and output requirements of this transform are identical to 
those of the XPath transform, but may only be applied to a node-set from 
its parent XML document. Note that it is not necessary to use an XPath 
expression evaluator to create this transform. However, this transform 
MUST produce output in exactly the same manner as the XPath transform 
parameterized by the XPath expression above.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPathId">xmlSecTransformXPathId</title>
<programlisting>#define     xmlSecTransformXPathId</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPathGetKlass">xmlSecTransformXPathGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformXPathGetKlass
                                            (void);</programlisting>
<para>
The XPath transform evaluates given XPath expression and 
intersects the result with the previous nodes set. See 
http://www.w3.org/TR/xmldsig-core/<link linkend="sec-XPath">sec-XPath</link> for more details.</para>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>XPath transform id.
</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPath2Id">xmlSecTransformXPath2Id</title>
<programlisting>#define     xmlSecTransformXPath2Id</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPath2GetKlass">xmlSecTransformXPath2GetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformXPath2GetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPointerId">xmlSecTransformXPointerId</title>
<programlisting>#define     xmlSecTransformXPointerId</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPointerGetKlass">xmlSecTransformXPointerGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformXPointerGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXPointerSetExpr">xmlSecTransformXPointerSetExpr ()</title>
<programlisting>int         xmlSecTransformXPointerSetExpr  (<link linkend="xmlSecTransformPtr">xmlSecTransformPtr</link> transform,
                                             const <link linkend="xmlChar">xmlChar</link> *expr,
                                             <link linkend="xmlSecNodeSetType">xmlSecNodeSetType</link> nodeSetType,
                                             <link linkend="xmlNodePtr">xmlNodePtr</link> hereNode);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><parameter>transform</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>expr</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>nodeSetType</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><parameter>hereNode</parameter>&nbsp;:</entry>
<entry>
</entry></row>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXsltId">xmlSecTransformXsltId</title>
<programlisting>#define     xmlSecTransformXsltId</programlisting>
<para>
The XSLT transform klass.</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformXsltGetKlass">xmlSecTransformXsltGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformXsltGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRemoveXmlTagsC14NId">xmlSecTransformRemoveXmlTagsC14NId</title>
<programlisting>#define     xmlSecTransformRemoveXmlTagsC14NId</programlisting>
<para>
The "remove all xml tags" transform klass (used before base64 transforms).</para>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="xmlSecTransformRemoveXmlTagsC14NGetKlass">xmlSecTransformRemoveXmlTagsC14NGetKlass ()</title>
<programlisting><link linkend="xmlSecTransformId">xmlSecTransformId</link> xmlSecTransformRemoveXmlTagsC14NGetKlass
                                            (void);</programlisting>
<para>

</para><informaltable pgwide="1" frame="none" role="params">
<tgroup cols="2">
<colspec colwidth="2*">
<colspec colwidth="8*">
<tbody>
<row><entry align="right"><emphasis>Returns</emphasis> :</entry><entry>


</entry></row>
</tbody></tgroup></informaltable></refsect2>

</refsect1>




</refentry>
