<!doctype book PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!ENTITY xmlsec-base64 SYSTEM "sgml/base64.sgml">
<!ENTITY xmlsec-buffer SYSTEM "sgml/buffer.sgml">
<!ENTITY xmlsec-errors SYSTEM "sgml/errors.sgml">
<!ENTITY xmlsec-io SYSTEM "sgml/io.sgml">
<!ENTITY xmlsec-keyinfo SYSTEM "sgml/keyinfo.sgml">
<!ENTITY xmlsec-keysdata SYSTEM "sgml/keysdata.sgml">
<!ENTITY xmlsec-keys SYSTEM "sgml/keys.sgml">
<!ENTITY xmlsec-keysmngr SYSTEM "sgml/keysmngr.sgml">
<!ENTITY xmlsec-list SYSTEM "sgml/list.sgml">
<!ENTITY xmlsec-membuf SYSTEM "sgml/membuf.sgml">
<!ENTITY xmlsec-nodeset SYSTEM "sgml/nodeset.sgml">
<!ENTITY xmlsec-parser SYSTEM "sgml/parser.sgml">
<!ENTITY xmlsec-templates SYSTEM "sgml/templates.sgml">
<!ENTITY xmlsec-transforms SYSTEM "sgml/transforms.sgml">
<!ENTITY xmlsec-version SYSTEM "sgml/version.sgml">
<!ENTITY xmlsec-xmldsig SYSTEM "sgml/xmldsig.sgml">
<!ENTITY xmlsec-xmlenc SYSTEM "sgml/xmlenc.sgml">
<!ENTITY xmlsec-xmlsec SYSTEM "sgml/xmlsec.sgml">
<!ENTITY xmlsec-xmltree SYSTEM "sgml/xmltree.sgml">

<!ENTITY xmlsec-openssl-app SYSTEM "sgml/openssl/app.sgml">
<!ENTITY xmlsec-openssl-bn SYSTEM "sgml/openssl/bn.sgml">
<!ENTITY xmlsec-openssl-crypto SYSTEM "sgml/openssl/crypto.sgml">
<!ENTITY xmlsec-openssl-x509 SYSTEM "sgml/openssl/x509.sgml">
<!ENTITY xmlsec-openssl-symbols SYSTEM "sgml/openssl/symbols.sgml">

<!ENTITY xmlsec-gnutls-app SYSTEM "sgml/gnutls/app.sgml">
<!ENTITY xmlsec-gnutls-crypto SYSTEM "sgml/gnutls/crypto.sgml">
<!ENTITY xmlsec-gnutls-symbols SYSTEM "sgml/gnutls/symbols.sgml">

<!ENTITY xmlsec-nss-app SYSTEM "sgml/nss/app.sgml">
<!ENTITY xmlsec-nss-crypto SYSTEM "sgml/nss/crypto.sgml">
<!ENTITY xmlsec-nss-symbols SYSTEM "sgml/nss/symbols.sgml">


<!ENTITY xmlsec-example-dsig1 SYSTEM "examples/dsig1.sgml">
<!ENTITY xmlsec-example-dsig2 SYSTEM "examples/dsig2.sgml">
<!ENTITY xmlsec-example-dsig3 SYSTEM "examples/dsig3.sgml">
<!ENTITY xmlsec-example-dsig4 SYSTEM "examples/dsig4.sgml">
<!ENTITY xmlsec-example-enc1 SYSTEM "examples/enc1.sgml">
<!ENTITY xmlsec-example-enc2 SYSTEM "examples/enc2.sgml">
]>
<book id="index">
  <bookinfo>
    <title>XML Security Library Reference Manual</title>
    <authorgroup>
      <author>
        <firstname>Aleksey</firstname>
        <surname>Sanin</surname>
        <affiliation>
	  <address>
	    <email>aleksey@aleksey.com</email>
	  </address>
        </affiliation>
      </author>
    </authorgroup>
    <copyright>
      <year>2002-2003</year>
      <holder>Aleksey Sanin</holder>
    </copyright>	
    <legalnotice>
      <para>Permission is granted to make and distribute verbatim
      copies of this manual provided the copyright notice and this
      permission notice are preserved on all copies.</para>
      <para>Permission is granted to copy and distribute modified
      versions of this manual under the conditions for verbatim
      copying, provided also that the entire resulting derived work is
      distributed under the terms of a permission notice identical to
      this one.</para>
      
      <para>Permission is granted to copy and distribute translations
      of this manual into another language, under the above conditions
      for modified versions.</para>
    </legalnotice>

    <abstract>
      <para>This manual documents the interfaces of the xmlsec
      library and has some short notes to help get you up to speed
      with using the library.</para>
    </abstract>
  </bookinfo>

  <chapter id="xmlsec-notes">
    <title>XML Security Library Programming Notes</title>
    <sect1 id="xmlsec-notes-overview">
	<title>Overview.</title>
	<para>XML Security Library provides support for XML Digital Signature 
	and XML Encryption. It is based on LibXML/LibXSLT and can use
	practicaly any crypto library (currently there is "out of the box" 
	support for OpenSSL, GnuTLS and NSS).
	</para>
    </sect1>
    <sect1 id="xmlsec-notes-structure">
	<title>XML Security Library Structure.</title>
	<para>In order to provide the an ability to use different crypto engines, 
	the XML Security Library is splitted in two parts: core library (xmlsec)
	and crypto library (xmlsec-openssl, xmlsec-gnutls, xmlsec-nss, ...). 
	<figure>
	    <title>The library structure and dependencies.</title>
	    <graphic fileref="images/structure.png" align="center" />
	</figure>	 
	</para>
	<para>The core library has no dependency on any crypto library and provides 
	implementation of all the engines as well as support for all the non 
	crypto transforms (xml parser, c14n transforms, xpath and xslt 
	transforms,...). The XML Security Crypto library provides 
	implementations for crypto transforms, crypto keys data and key 
	data stores. Application is linked with particular XML Security 
	Crypto library (or even libraries), but the actual application 
	code might be general enough so switching crypto engine would be 
	a matter of changing several #include directives.</para>
    </sect1>
    <sect1 id="xmlsec-notes-init-shutdown">
      <title>Initialization and shutdown.</title>
      <para>TODO: example</para>
    </sect1>
    <sect1 id="xmlsec-notes-sign-encrypt">
      <title>Signing and encrypting documents.</title>
	<para>XML Security Library performs signature or encryption by processing 
	input xml or binary data and a template that specifies a signature or 
	encryption skeleton: the transforms, algorithms, the key selection 
	process. A template has the same structure as the desired result but 
	some of the nodes are empty. XML Security Library gets the key for 
	signature/encryption from keys managers using the information from 
	the template, does necessary computations and puts the results in 
	the template. Signature or encryption context controls the whole 
	process and stores the required temporary data.
	  <figure>
	    <title>The signature or encryption processing model.</title>
	    <graphic fileref="images/sign-enc-model.png" align="center" />
	  </figure>
	</para>
	<para>The typical siganture process includes following steps:
	  <itemizedlist>
	    <listitem><para>
		Prepare data for signature.
	    </para></listitem>
	    <listitem><para>
		Create or load signature template and select start
		&lt;dsig:Signature/&gt; node.
	    </para></listitem>
	    <listitem><para>
		Create signature context <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>
		using <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link> or
		<link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link>
		functions.
	    </para></listitem>
	    <listitem><para>
		Load signature key in <link linkend="xmlSecKeysMngr">keys manager</link> 
		or generate a sesison key and set it in the signature context 
		(<structfield>signKey</structfield> member of 
		<link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link> structure).
	    </para></listitem>
	    <listitem><para>
		Sign data by calling <link linkend="xmlSecDSigCtxSign">xmlSecDSigCtxSign</link> 
		function.
	    </para></listitem>
	    <listitem><para>
		Check returned value and consume signed data.
	    </para></listitem>
	    <listitem><para>
		Destroy signature context <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>
		using <link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link> or
		<link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link>
		functions.
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>TODO: example signature
	     <example>
		<title>Signing a template</title>
		<programlisting></programlisting>
	    </example>
	</para>

	<para>The typical encryption process includes following steps:
	  <itemizedlist>
	    <listitem><para>
		Prepare data for encryption.
	    </para></listitem>
	    <listitem><para>
		Create or load encryption template and select start
		&lt;enc:EncryptedData/&gt; node.
	    </para></listitem>
	    <listitem><para>
		Create encryption context <link linkend="xmlSecEncCtx">xmlSecEncCtx</link>
		using <link linkend="xmlSecEncCtxCreate">xmlSecEncCtxCreate</link> or
		<link linkend="xmlSecEncCtxInitialize">xmlSecEncCtxInitialize</link>
		functions.
	    </para></listitem>
	    <listitem><para>
		Load encryption key in <link linkend="xmlSecKeysMngr">keys manager</link> 
		or generate a sesison key and set it in the encryption context
		(<structfield>encKey</structfield> member of 
		<link linkend="xmlSecEncCtx">xmlSecEncCtx</link> structure).
	    </para></listitem>
	    <listitem><para>
		Encrypt data by calling one of the following functions:
		<itemizedlist>
		    <listitem><para>
			<link linkend="xmlSecEncCtxBinaryEncrypt">xmlSecEncCtxBinaryEncrypt</link>
		    </para></listitem>
		    <listitem><para>
			<link linkend="xmlSecEncCtxXmlEncrypt">xmlSecEncCtxXmlEncrypt</link>
		    </para></listitem>
		    <listitem><para>
			<link linkend="xmlSecEncCtxUriEncrypt">xmlSecEncCtxUriEncrypt</link>
		    </para></listitem>
		</itemizedlist>
	    </para></listitem>
	    <listitem><para>
		Check returned value and if necessary consume encrypted data.
	    </para></listitem>
	    <listitem><para>
		Destroy encryption context <link linkend="xmlSecEncCtx">xmlSecEncCtx</link>
		using <link linkend="xmlSecEncCtxDestroy">xmlSecEncCtxDestroy</link> or
		<link linkend="xmlSecEncCtxFinalize">xmlSecEncCtxFinalize</link>
		functions.
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>TODO: example encryption</para>
    </sect1>
    <sect1 id="xmlsec-notes-verify-decrypt">
      <title>Verifing and decrypting documents.</title>
	<para>Since the template is just an XML file, it might be created in advance 
	and saved in a file. It's also possible for application to create 
	templates without using XML Security Library functions. Also in some 
	cases template should be inserted in the signed or encrypted data 
	(for example, if you want to create an enveloped or enveloping 
	signature).</para>
	<para>Signature verification and data decryption do not require template 
	because all the necessary information is provided in the signed or 
	encrypted document.
    	  <figure>
	    <title>The verification or decryption processing model.</title>
	    <graphic fileref="images/verif-dec-model.png" align="center" />
	  </figure>	 
	</para>
	<para>The typical siganture verification process includes following steps:
	  <itemizedlist>
	    <listitem><para>
		Load keys, X509 certificates, etc. in the <link linkend="xmlSecKeysMngr">keys manager</link> .
	    </para></listitem>
	    <listitem><para>
		Create signature context <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>
		using <link linkend="xmlSecDSigCtxCreate">xmlSecDSigCtxCreate</link> or
		<link linkend="xmlSecDSigCtxInitialize">xmlSecDSigCtxInitialize</link>
		functions.
	    </para></listitem>
	    <listitem><para>
		Select start verification &lt;dsig:Signature/&gt; node in 
		the signed XML document.
	    </para></listitem>
	    <listitem><para>
		Verify signature by calling <link linkend="xmlSecDSigCtxVerify">xmlSecDSigCtxVerify</link> 
		function.
	    </para></listitem>
	    <listitem><para>
		Check returned value and verification status (<structfield>status</structfield>
		member of <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link> structure).
		If necessary, consume returned data from the <link linkend="xmlSecDSigCtx">context</link>.
	    </para></listitem>
	    <listitem><para>
		Destroy signature context <link linkend="xmlSecDSigCtx">xmlSecDSigCtx</link>
		using <link linkend="xmlSecDSigCtxDestroy">xmlSecDSigCtxDestroy</link> or
		<link linkend="xmlSecDSigCtxFinalize">xmlSecDSigCtxFinalize</link>
		functions.
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>TODO: example signature
	</para>
	<para>The typical decryption process includes following steps:
	  <itemizedlist>
	    <listitem><para>
		Load keys, X509 certificates, etc. in the <link linkend="xmlSecKeysMngr">keys manager</link> .
	    </para></listitem>
	    <listitem><para>
		Create encryption context <link linkend="xmlSecEncCtx">xmlSecEncCtx</link>
		using <link linkend="xmlSecEncCtxCreate">xmlSecEncCtxCreate</link> or
		<link linkend="xmlSecEncCtxInitialize">xmlSecEncCtxInitialize</link>
		functions.
	    </para></listitem>
	    <listitem><para>
		Select start decryption &lt;enc:EncryptedData&gt; node.
	    </para></listitem>
	    <listitem><para>
		Decrypt by calling <link linkend="xmlSecEncCtxDecrypt">xmlSecencCtxDecrypt</link> 
		function.
	    </para></listitem>
	    <listitem><para>
		Check returned value and if necessary consume encrypted data.
	    </para></listitem>
	    <listitem><para>
		Destroy encryption context <link linkend="xmlSecEncCtx">xmlSecEncCtx</link>
		using <link linkend="xmlSecEncCtxDestroy">xmlSecEncCtxDestroy</link> or
		<link linkend="xmlSecEncCtxFinalize">xmlSecEncCtxFinalize</link>
		functions.
	    </para></listitem>
	  </itemizedlist>
	</para>
	<para>TODO: example encryption</para>
    </sect1>
    <sect1 id="xmlsec-notes-keysmngr">
        <title>Keys and keys manager.</title>
	<para>A key in XML Security Library is a representation of the 
	&lt;dsig:KeyInfo/&gt; element and consist of several key data objects. 
	The "value" key data usually contains raw key material (or handlers to 
	key material) required to execute particular crypto transform. Other 
	key data objects may contain any additional information about the key. 
	All the key data objects in the key are associated with the same key 
	material. For example, if a DSA key material has both an X509 
	certificate and a PGP data associated with it then such a key can 
	have a DSA key "value" and two key data objects for X509 certificate 
	and PGP key data.
	</para>
	<figure>
	    <title>The key structure.</title>
	    <graphic fileref="images/key.png" align="center" />
	</figure>	 
	<para>XML Security Library has several "invisible" key data classes. 
	These classes never show up in the keys data list of a key but are used 
	for &lt;dsig:KeyInfo/&gt; children processing (&lt;dsig:KeyName/&gt;, 
	&lt;dsig:EncryptedKey/&gt;, ...). As with transforms, application might 
	add any new key data objects or replace the default ones.
	</para>
	<para>Processing some of the key data objects require additional 
	information which is global across the application (or in the 
	particular area of the application). For example, X509 certificates 
	processing require a common list of trusted certificates to be 
	available. XML Security Library keeps all the common information 
	for key data processing in a a collection of key data stores called 
	"keys manager".
	</para>
	<figure>
	    <title>The keys manager structure.</title>
	    <graphic fileref="images/keysmngr.png" align="center" />
	</figure>	 
	<para>Keys manager has a special "keys store" which lists the keys 
	known to the application. This "keys store" is used by XML Security 
	Library to lookup keys by name, type and crypto algorithm (for example,
	during &lt;dsig:KeyName/&gt; processing). The XML Security Library 
	provides default "flat list" based implementation of a simple keys 
	store. The application can replace it with any other keys store 
	(for example, based on an SQL database).
	</para>
	<para>Keys manager is the only object in XML Security Library which 
	is supposed to be shared by many different operations. Usually keys 
	manager is initialized once at the application startup and later is 
	used by XML Security library routines in "read-only" mode. If 
	application or crypto function need to modify any of the key data 
	stores inside keys manager then proper synchronization must be 
	implemented. In the same time, application can create a new keys 
	manager each time it needs to perform XML signature, verification, 
	encryption or decryption.
	</para>
	<para>TODO: example</para>
    </sect1>
    <sect1 id="xmlsec-notes-transforms">
	<title>Transforms and transforms chain.</title>
	<para>XML Digital Signature and XML Encryption standards are 
	very flexible and provide an XML developer many different ways to 
	sign or encrypt any part (or even parts) of an XML document. 
	The key for such great flexibility is the "transforms" model.
	Transform is defined as a method of pre-processing binary or XML data 
	before calculating digest or signature. XML Security Library extends 
	this definition and names "transform" any operation performed on 
	the data: reading data from an URI, xml parsing, xml transformation, 
	calculation digest, encrypting or decrypting. Each XML Security Library
	transform provides at least one of the following callbacks: 
	    <itemizedlist>
		<listitem><para>
		    <link linkend="xmlSecTransformPushBinMethod">push binary data</link>;
		</para></listitem>
		<listitem><para>
		    <link linkend="xmlSecTransformPushXmlMethod">push xml data</link>;
		</para></listitem>
		<listitem><para>
		    <link linkend="xmlSecTransformPopBinMethod">pop binary data</link>;
		</para></listitem>
		<listitem><para>
		    <link linkend="xmlSecTransformPopXmlMethod">pop xml data</link>.
		</para></listitem>
	    </itemizedlist>
	</para><para>One additional <link linkend="xmlSecTransformExecuteMethod">execute</link>
	callback was added to simplify the development and reduce code size. 
	This callback is used by default
	implementations of the four external callbacks from the list above.
	For example, most of the crypto transforms could be implemented by 
	just implementing one "execute" callback and using default push/pop 
	binary data callbacks. However, in some cases using push/pop callbacks 
	directly is more efficient.
	</para>
	<figure>
	    <title>The XML Security Library transform.</title>
	    <graphic fileref="images/transform.png" align="center" />
	</figure>	 
	<para>XML Security Library constructs transforms chain according to the 
	signature/encryption template or signed/encrypted document. 
	If necessary, XML Security Library inserts XML parser or defaul
	canonicalization to ensure that the output data type (binary or XML) 
	of previous transform matches the input of the next transform.
	</para>
	<para>The data are processed by pushing through or poping from the chain
	depending on the transforms in the chain.  For example, then binary 
	data chunk is pushed through a binary-to-binary transform, it 
	processes this chunk and pushes the result to the next transform 
	in the chain. 
	</para>	
	<figure>
	    <title>Transforms chain created for &lt;dsig:Reference/&gt; element processing.</title>
	    <graphic fileref="images/transforms-chain.png" align="center" />
	</figure>	 


	<para>TODO: example</para>
    </sect1>
    <sect1 id="xmlsec-notes-templates">
	<title>Creating dynamic templates.</title>
	<para>    
    <figure>
    <title>XML Digital Signature Structure</title>
    <programlisting>
        &lt;Signature ID?&gt; 
	    &lt;SignedInfo&gt;
	        &lt;CanonicalizationMethod/&gt;
	        &lt;SignatureMethod/&gt;
	        (&lt;Reference URI? &gt;
    	    (&lt;Transforms&gt;)?
    	    &lt;DigestMethod&gt;
    	    &lt;DigestValue&gt;
	        &lt;/Reference&gt;)+
	    &lt;/SignedInfo&gt;
	    &lt;SignatureValue&gt; 
	(&lt;KeyInfo&gt;)?
	(&lt;Object ID?&gt;)*
        &lt;/Signature&gt;
    </programlisting>
    </figure>
    <figure>
    <title>XML Encryption Structure</title>
    <programlisting>
        &lt;EncryptedData Id? Type? MimeType? Encoding?&gt;
	&lt;EncryptionMethod/&gt;?
	&lt;ds:KeyInfo&gt;
	        &lt;EncryptedKey&gt;?
	        &lt;AgreementMethod&gt;?
	        &lt;ds:KeyName&gt;?
	        &lt;ds:RetrievalMethod&gt;?
	        &lt;ds:*&gt;?
	&lt;/ds:KeyInfo&gt;?
	&lt;CipherData&gt;
	    &lt;CipherValue&gt;?
	        &lt;CipherReference URI?&gt;?
	&lt;/CipherData&gt;
	&lt;EncryptionProperties&gt;?
        &lt;/EncryptedData&gt;	
	</programlisting>
    </figure>
</para>
	<para>TODO: example signature</para>
	<para>TODO: example encryption</para>
    </sect1>
    <sect1 id="xmlsec-notes-cusomize-signature">
	<title>Customizing signature and verification process.</title>
	<para>TODO: example</para>
    </sect1>
    <sect1 id="xmlsec-notes-customize-encryption">
	<title>Customizing encryption and decryption process.</title>
	<para>TODO: example</para>
    </sect1>
    <sect1 id="xmlsec-notes-new-crypto-library">
        <title>Supporting new cryptographic library.</title>
        <para>This section contains information for developers who wish to use
    	XML Security Library with a new crypto engine.
        </para>
	<para>TODO: example</para>
    </sect1>
  </chapter>

  <chapter id="xmlsec-ref">
    <title>XML Security Library API Reference.</title>
    <para>This section contains the API reference for xmlsec. All
    the public interfaces are documented here. This reference guide is
    build by extracting comments from the code sources. </para>

    &xmlsec-base64;
    &xmlsec-buffer;
    &xmlsec-errors;
    &xmlsec-io;
    &xmlsec-keyinfo;
    &xmlsec-keysdata;
    &xmlsec-keys;
    &xmlsec-keysmngr;
    &xmlsec-list;
    &xmlsec-membuf;
    &xmlsec-nodeset;
    &xmlsec-parser;
    &xmlsec-templates;
    &xmlsec-transforms;
    &xmlsec-version;
    &xmlsec-xmldsig;
    &xmlsec-xmlenc;
    &xmlsec-xmlsec;
    &xmlsec-xmltree;
  </chapter>

  <chapter id="xmlsec-openssl-ref">
    <title>XML Security Library for OpenSLL API Reference.</title>
    <para>This section contains the API reference for xmlsec-openssl. All
    the public interfaces are documented here. This reference guide is
    build by extracting comments from the code sources. </para>
    
    &xmlsec-openssl-app;
    &xmlsec-openssl-bn;
    &xmlsec-openssl-crypto;
    &xmlsec-openssl-x509;
  </chapter>

  <chapter id="xmlsec-gnutls-ref">
    <title>XML Security Library for GnuTLS API Reference.</title>
    <para>This section contains the API reference for xmlsec-gnutls. All
    the public interfaces are documented here. This reference guide is
    build by extracting comments from the code sources. </para>
    &xmlsec-gnutls-app;
    &xmlsec-gnutls-crypto;
  </chapter>

  <chapter id="xmlsec-nss-ref">
    <title>XML Security Library for NSS API Reference.</title>
    <para>This section contains the API reference for xmlsec-nss. All
    the public interfaces are documented here. This reference guide is
    build by extracting comments from the code sources. </para>
    &xmlsec-nss-app;
    &xmlsec-nss-crypto;
  </chapter>
    
  <chapter id="xmlsec-examples">
    <title>XML Security Library Examples.</title>
    <para>This section contains several examples of using XML Security Library
	to sign, veiryf, encrypt or decrypt XML documents.</para>
    
    &xmlsec-example-dsig1;
    &xmlsec-example-dsig2;
    &xmlsec-example-dsig3;
    &xmlsec-example-dsig4;
    &xmlsec-example-enc1;
    &xmlsec-example-enc2;
  </chapter>
</book>
