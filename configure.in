dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.2)
AC_INIT(src/xmlsec.c)
AM_CONFIG_HEADER(config.h)
AC_CANONICAL_HOST

XMLSEC_PACKAGE=xmlsec1
XMLSEC_VERSION_MAJOR=1
XMLSEC_VERSION_MINOR=0
XMLSEC_VERSION_SUBMINOR=0rc1
XMLSEC_VERSION="$XMLSEC_VERSION_MAJOR.$XMLSEC_VERSION_MINOR.$XMLSEC_VERSION_SUBMINOR"
XMLSEC_VERSION_INFO=`echo $XMLSEC_VERSION | awk -F. '{ printf "%d:%d:%d", $1+$2, $3, $2 }'`
3BXMLSEC_VERSION_SAFE=`echo $XMLSEC_VERSION | sed 's/\./_/g'`

PACKAGE=$XMLSEC_PACKAGE
VERSION=$XMLSEC_VERSION

AC_SUBST(XMLSEC_VERSION)
AC_SUBST(XMLSEC_PACKAGE)
AC_SUBST(XMLSEC_VERSION_SAFE)
AC_SUBST(XMLSEC_VERSION_MAJOR)
AC_SUBST(XMLSEC_VERSION_MINOR)
AC_SUBST(XMLSEC_VERSION_SUBMINOR)
AC_SUBST(XMLSEC_VERSION_INFO)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
AM_MAINTAINER_MODE

dnl
dnl Check the environment
dnl
AC_PROG_CC
AC_PROG_INSTALL
AC_ARG_PROGRAM
AC_STDC_HEADERS
AM_PROG_LIBTOOL
AC_PATH_PROG(RM, rm, /bin/rm)
AC_PATH_PROG(MV, mv, /bin/mv)
AC_PATH_PROG(TAR, tar, /bin/tar)

dnl Make sure we have an ANSI compiler
AM_C_PROTOTYPES
test "x$U" != "x" && AC_MSG_ERROR(Compiler not ANSI compliant)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS([stdio.h])
AC_CHECK_HEADERS([stdlib.h])
AC_CHECK_HEADERS([string.h])
AC_CHECK_HEADERS([ctype.h])
AC_CHECK_HEADERS([errno.h])
AC_CHECK_HEADERS([ansidecl.h])
AC_CHECK_HEADERS([time.h])
AC_CHECK_FUNCS(printf sprintf fprintf snprintf vfprintf vsprintf vsnprintf sscanf)




XMLSEC_DEFINES=""


dnl ==========================================================================
dnl Specific setup for Aleksey's development environment: 
dnl	- with debug
dnl 	- with pedantic compiler flags
dnl	- with static binaries
dnl ==========================================================================
XMLSEC_STATIC_BINARIES=""
AC_MSG_CHECKING(for development environment) 
AC_ARG_ENABLE(development,   [  --enable-development       enable development environment (no)])
if test "$enable_development" = "yes" -o "${LOGNAME}" = "aleksey" ; then
    dnl CFLAGS="$CFLAGS -pedantic -Wall -ansi -W -Wunused -Wimplicit -Wreturn-type -Wswitch -Wcomment -Wtrigraphs -Wformat -Wchar-subscripts -Wuninitialized -Wparentheses -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wnested-externs -Winline -Wredundant-decls"
    CFLAGS="$CFLAGS -g -O -pedantic -Wall -ansi -W -Wunused -Wimplicit -Wreturn-type -Wswitch -Wcomment -Wtrigraphs -Wformat -Wchar-subscripts -Wuninitialized -Wparentheses -Wshadow -Wpointer-arith -Wcast-align -Wwrite-strings -Waggregate-return -Wmissing-prototypes -Wnested-externs -Winline -Wredundant-decls"
    XMLSEC_STATIC_BINARIES="-static"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    
AC_SUBST(XMLSEC_STATIC_BINARIES)

dnl ==========================================================================
dnl find libxml
dnl ==========================================================================
LIBXML_WITHOUT="no"
LIBXML_MIN_VERSION=2.4.24
LIBXML_CONFIG="xml2-config"
LIBXML_PREFIX=""
LIBXML_CFLAG=""
LIBXML_LIBS=""
AC_MSG_CHECKING(for libxml2 libraries >= $LIBXML_MIN_VERSION) 
AC_ARG_WITH(libxml, [  --with-libxml=[PFX]     libxml2 location])
if test "$with_libxml" = "no" ; then
    AC_MSG_ERROR(libxml2 is required for $PACKAGE)
else
    if test "$with_libxml" != "" ; then
	LIBXML_PREFIX=$with_libxml
	LIBXML_CONFIG=$LIBXML_PREFIX/bin/$LIBXML_CONFIG
    fi

    if ! $LIBXML_CONFIG --version > /dev/null 2>&1
    then
	AC_MSG_ERROR(Could not find libxml2 anywhere (see config.log for details).)
    fi
    vers=`$LIBXML_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
    minvers=`echo $LIBXML_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
    if test "$vers" -ge "$minvers"
    then
        LIBXML_LIBS="`$LIBXML_CONFIG --libs`"
        LIBXML_CFLAGS="`$LIBXML_CONFIG --cflags`"
	LIBXML_VERSION="`$LIBXML_CONFIG --version`"
        AC_MSG_RESULT(yes ('$LIBXML_VERSION'))
    else
        AC_MSG_ERROR(You need at least libxml2 $LIBXML_MIN_VERSION for this version of $PACKAGE)
    fi
fi
AC_SUBST(LIBXML_WITHOUT)
AC_SUBST(LIBXML_MIN_VERSION)
AC_SUBST(LIBXML_CONFIG)	
AC_SUBST(LIBXML_PREFIX)
AC_SUBST(LIBXML_CFLAGS)
AC_SUBST(LIBXML_LIBS)

dnl ==========================================================================
dnl find libxslt
dnl ==========================================================================
LIBXSLT_WITHOUT="no"
LIBXSLT_MIN_VERSION=1.0.20
LIBXSLT_CONFIG="xslt-config"
LIBXSLT_PREFIX=""
LIBXSLT_CFLAGS=""
LIBXSLT_LIBS=""
AC_MSG_CHECKING(for libxslt libraries >= $LIBXSLT_MIN_VERSION) 
AC_ARG_WITH(libxslt, [  --with-libxslt=[PFX]    libxslt location])
if test "$with_libxslt" = "no" ; then
    LIBXSLT_WITHOUT="yes"
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XSLT=1"
    AC_MSG_RESULT(no)
else
    if test "$with_libxslt" != "" ; then
	LIBXSLT_PREFIX=$with_libxslt
	LIBXSLT_CONFIG=$LIBXSLT_PREFIX/bin/$LIBXSLT_CONFIG
    fi
    if ! $LIBXSLT_CONFIG --version > /dev/null 2>&1
    then
	if test "$with_libxslt" != "" ; then
	    AC_MSG_ERROR(Unable to find libxslt at '$with_libxslt')
	else 
	    LIBXSLT_WITHOUT="yes"
	    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XSLT=1"
	    AC_MSG_RESULT(no)
	fi
    else
        vers=`$LIBXSLT_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	minvers=`echo $LIBXSLT_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	if test "$vers" -ge "$minvers"
	then
    	    LIBXSLT_LIBS="`$LIBXSLT_CONFIG --libs`"
	    LIBXSLT_CFLAGS="`$LIBXSLT_CONFIG --cflags`"
	    LIBXSLT_VERSION="`$LIBXSLT_CONFIG --version`"
    	    AC_MSG_RESULT(yes ('$LIBXSLT_VERSION'))
	else
    	    AC_MSG_ERROR(You need at least libxslt $LIBXSLT_MIN_VERSION for this version of $PACKAGE)
	fi	
    fi
fi
AC_SUBST(LIBXSLT_WITHOUT)
AC_SUBST(LIBXSLT_MIN_VERSION)
AC_SUBST(LIBXSLT_PREFIX)
AC_SUBST(LIBXSLT_CONFIG)	
AC_SUBST(LIBXSLT_CFLAGS)
AC_SUBST(LIBXSLT_LIBS)

dnl ==========================================================================
dnl See if we can find a crypto library
dnl ==========================================================================
XMLSEC_CRYPTO=""
XMLSEC_CRYPTO_LIST=""
XMLSEC_CRYPTO_DISABLED_LIST=""
XMLSEC_CRYPTO_LIB=""
XMLSEC_CRYPTO_CFLAGS=""
XMLSEC_CRYPTO_LIBS=""
XMLSEC_CRYPTO_LDADDS=""

dnl ==========================================================================
dnl OpenSSL
dnl ==========================================================================
ac_openssl_lib_dir="/usr/local/lib /usr/lib /usr/local /usr/local/ssl /usr/local/ssl/lib /usr/pkg"
ac_openssl_inc_dir="/usr/local/include /usr/include /usr/local /usr/local/ssl /usr/pkg /usr/local/ssl/include"

XMLSEC_OPENSSL_DEFINES=""
OPENSSL_WITHOUT="yes"
OPENSSL_MIN_VERSION="0.9.6"
OPENSSL_VERSION=""
OPENSSL_PREFIX=""
OPENSSL_CFLAGS=""
OPENSSL_LIBS=""
OPENSSL_LDADDS=""
AC_MSG_CHECKING(for openssl libraries >= $OPENSSL_MIN_VERSION) 
AC_ARG_WITH(openssl, [  --with-openssl=[PFX]    openssl location])
if test "$with_openssl" = "no" ; then
    OPENSSL_WITHOUT="yes"
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST openssl"
    AC_MSG_RESULT(no)
else
    if test "$with_openssl" != "" ; then
	OPENSSL_PREFIX=$with_openssl
	OPENSSL_CFLAGS="-I$OPENSSL_PREFIX/include"
	OPENSSL_LIBS="-L$OPENSSL_PREFIX/lib -lcrypto"
	OPENSSL_LDADDS="$OPENSSL_PREFIX/lib/libcrypto.a"
	OPENSSL_INCLUDES_FOUND="yes"
	OPENSSL_LIBS_FOUND="yes"
    else
	OPENSSL_INCLUDES_FOUND="no"
	OPENSSL_LIBS_FOUND="no"
	for dir in $ac_openssl_inc_dir; do
	    if test -f $dir/openssl/ssl.h; then
		dnl do not add -I/usr/include because compiler does it anyway
		if test "$dir" = "/usr/include" ; then
		    OPENSSL_CFLAGS=""
		else
		    OPENSSL_CFLAGS="-I$dir"
		fi
		OPENSSL_INCLUDES_FOUND="yes"
		break
	    fi
	done

	for dir in $ac_openssl_lib_dir; do
	    if test -f $dir/libcrypto.a; then
		dnl do not add -L/usr/lib because compiler does it anyway
		if test "$dir" = "/usr/lib" ; then
		    OPENSSL_LIBS="-lcrypto"
		else
		    OPENSSL_LIBS="-L$dir -lcrypto"
		fi
		OPENSSL_LIBS_FOUND="yes"
		OPENSSL_LDADDS="$dir/libcrypto.a"
		ac_found_openssl_lib_dir=$dir
		break;
	    fi
	done
    fi
    
    if test "$OPENSSL_INCLUDES_FOUND" = "yes" -a "$OPENSSL_LIBS_FOUND" = "yes" ;
    then
	dnl Check the OpenSSL version    
	OLD_CPPFLAGS=$CPPFLAGS
	CPPFLAGS="$OPENSSL_CFLAGS"
	AC_EGREP_CPP(yes,[
	    #include <openssl/opensslv.h>
	    #if OPENSSL_VERSION_NUMBER >= 0x00906000L
		yes
	    #endif
	],[
	    OPENSSL_VERSION="0.9.6"
	],[
    	    AC_MSG_ERROR(You need at least OpenSSL 0.9.6 for this version of $PACKAGE)
	]) 
	AC_EGREP_CPP(yes,[
	    #include <openssl/opensslv.h>
	    #if OPENSSL_VERSION_NUMBER >= 0x00907000L
		yes
	    #endif
	],[
	    OPENSSL_VERSION="0.9.7"
	],[
	    OPENSSL_VERSION="0.9.6"
	    XMLSEC_OPENSSL_DEFINES="$XMLSEC_OPENSSL_DEFINES -DXMLSEC_OPENSSL_096=1"
	])    
	CPPFLAGS=$OLD_CPPFLAGS
	OPENSSL_WITHOUT="no"
	
	dnl first crypto library is default one
	if test "z$XMLSEC_CRYPTO" = "z"
	then
	    XMLSEC_CRYPTO="openssl"
    	    XMLSEC_CRYPTO_LIB="xmlsec1-openssl"
	    XMLSEC_CRYPTO_CFLAGS="$OPENSSL_CFLAGS -DXMLSEC_CRYPTO_OPENSSL=1"
	    XMLSEC_CRYPTO_LIBS="$OPENSSL_LIBS"
	    XMLSEC_CRYPTO_LDADDS="$OPENSSL_LDADDS"
	fi	
	XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST openssl"
        AC_MSG_RESULT(yes ('$OPENSSL_VERSION'))
    else
	XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST openssl"
        AC_MSG_RESULT(no)
    fi
fi
AC_SUBST(OPENSSL_WITHOUT)
AC_SUBST(OPENSSL_MIN_VERSION)
AC_SUBST(OPENSSL_VERSION)
AC_SUBST(OPENSSL_CONFIG)	
AC_SUBST(OPENSSL_PREFIX)
AC_SUBST(OPENSSL_CFLAGS)
AC_SUBST(OPENSSL_LIBS)
AC_SUBST(OPENSSL_LDADDS)
AC_SUBST(XMLSEC_OPENSSL_DEFINES)

dnl ==========================================================================
dnl See if we can find GnuTLS
dnl ==========================================================================
XMLSEC_GNUTLS_DEFINES=""
GNUTLS_CONFIG="libgnutls-config"
GNUTLS_WITHOUT="no"
GNUTLS_MIN_VERSION="0.8.1"
GNUTLS_VERSION=""
GNUTLS_PREFIX=""
GNUTLS_CFLAGS=""
GNUTLS_LIBS=""
GNUTLS_LDADDS=""
AC_MSG_CHECKING(for gnutls libraries >= $GNUTLS_MIN_VERSION) 
AC_ARG_WITH(gnutls, [  --with-gnutls=[PFX]    gnutls location])
if test "$with_gnutls" = "no" ; then
    GNUTLS_WITHOUT="yes"
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST gnutls"
    AC_MSG_RESULT(no)
else
    if test "$with_gnutls" != "" ; then
	GNUTLS_PREFIX=$with_gnutls
	GNUTLS_CONFIG=$GNUTLS_PREFIX/bin/$GNUTLS_CONFIG
    fi
    if ! $GNUTLS_CONFIG --version > /dev/null 2>&1
    then
	GNUTLS_WITHOUT="yes"
	if test "$with_gnutls" != "" ; then
	    AC_MSG_ERROR(Unable to find gnutls at '$with_gnutls')
	fi
    else
        vers=`$GNUTLS_CONFIG --version | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	minvers=`echo $GNUTLS_MIN_VERSION | awk -F. '{ printf "%d", ($1 * 1000 + $2) * 1000 + $3;}'`
	if test "$vers" -ge "$minvers"
	then
    	    GNUTLS_LIBS="`$GNUTLS_CONFIG --libs`"
	    GNUTLS_CFLAGS="`$GNUTLS_CONFIG --cflags`"
	    GNUTLS_VERSION="`$GNUTLS_CONFIG --version`"
	else
    	    AC_MSG_ERROR(You need at least gnutls $GNUTLS_MIN_VERSION for this version of $PACKAGE)
	fi	
    fi

    dnl update crypt libraries list
    if test "$GNUTLS_WITHOUT" = "no" ;
    then
	dnl first crypto library is default one
	if test "z$XMLSEC_CRYPTO" = "z"
	then
	    XMLSEC_CRYPTO="gnutls"
    	    XMLSEC_CRYPTO_LIB="xmlsec1-gnutls"
	    XMLSEC_CRYPTO_CFLAGS="$GNUTLS_CFLAGS -DXMLSEC_CRYPTO_GNUTLS=1"
	    XMLSEC_CRYPTO_LIBS="$GNUTLS_LIBS"
	    XMLSEC_CRYPTO_LDADDS="$GNUTLS_LDADDS"
	fi	
	XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST gnutls"
    	AC_MSG_RESULT(yes ('$GNUTLS_VERSION'))
    else
	XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST gnutls"
	AC_MSG_RESULT(no)
    fi
fi
AC_SUBST(GNUTLS_WITHOUT)
AC_SUBST(GNUTLS_MIN_VERSION)
AC_SUBST(GNUTLS_VERSION)
AC_SUBST(GNUTLS_CONFIG)	
AC_SUBST(GNUTLS_PREFIX)
AC_SUBST(GNUTLS_CFLAGS)
AC_SUBST(GNUTLS_LIBS)
AC_SUBST(GNUTLS_LDADDS)
AC_SUBST(XMLSEC_GNUTLS_DEFINES)

dnl ==========================================================================
dnl See if we can find NSS
dnl ==========================================================================
    
XMLSEC_NSS_DEFINES=""
NSS_WITHOUT="no"
NSS_MIN_VERSION="1.2.1"
NSS_VERSION=""
NSS_PREFIX=""
NSS_CFLAGS=""
NSS_LIBS=""
NSS_LDADDS=""
NSS_LIBS_LIST="-lnss3 -lnspr4 -lplds4 -lplc4"
ac_mozilla_name=mozilla-$NSS_MIN_VERSION
ac_nss_lib_dir="/usr/lib /usr/local/lib /usr/lib/$ac_mozilla_name /usr/local/lib/$ac_mozilla_name"
ac_nss_inc_dir="/usr/include /usr/local/include /usr/include/$ac_mozilla_name /usr/local/include/$ac_mozilla_name"
AC_MSG_CHECKING(for nss libraries >= $NSS_MIN_VERSION) 
AC_ARG_WITH(nss, [  --with-nss=[PFX]    nss location])
if test "$with_nss" = "no" ; then
    NSS_WITHOUT="yes"
    XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST nss"
    AC_MSG_RESULT(no)
else
    if test "$with_nss" != "" ; then
	NSS_PREFIX=$with_nss
	NSS_CFLAGS="-I$NSS_PREFIX/include -I$NSS_PREFIX/include/nss -I$NSS_PREFIX/include/nspr"
	NSS_LIBS="-L$NSS_PREFIX/lib $NSS_LIBS_LIST"
	NSS_LDADDS="-L$NSS_PREFIX/lib $NSS_LIBS_LIST"
	NSS_INCLUDES_FOUND="yes"
	NSS_LIBS_FOUND="yes"
    else
	NSS_INCLUDES_FOUND="no"
	NSS_LIBS_FOUND="no"
	for dir in $ac_nss_inc_dir; do
	    if test -f $dir/nss/nss.h; then
		dnl do not add -I/usr/include because compiler does it anyway
		if test "$dir" = "/usr/include" ; then
		    NSS_CFLAGS="-I$dir/nss -I$dir/nspr"
		else
		    NSS_CFLAGS="-I$dir -I$dir/nss -I$dir/nspr"
		fi
		NSS_INCLUDES_FOUND="yes"
		break
	    fi
	done

	for dir in $ac_nss_lib_dir; do
	    if test -f $dir/libnss3.so; then
		dnl do not add -L/usr/lib because compiler does it anyway
		if test "$dir" = "/usr/lib" ; then
		    NSS_LIBS="-L$dir $NSS_LIBS_LIST"
		    NSS_LDADDS="-L$dir $NSS_LIBS_LIST"
		else
		    NSS_LIBS="-L$dir $NSS_LIBS_LIST"
		    NSS_LDADDS="-L$dir $NSS_LIBS_LIST"
		fi
		NSS_LIBS_FOUND="yes"
		ac_found_nss_lib_dir=$dir
		break;
	    fi
	done
    fi
    
    if test "$NSS_INCLUDES_FOUND" = "yes" -a "$NSS_LIBS_FOUND" = "yes" ;
    then
	dnl Check the NSS version    
	dnl todo: check the version
	NSS_WITHOUT="no"
    
	dnl first crypto library is default one
	if test "z$XMLSEC_CRYPTO" = "z"
	then
	    XMLSEC_CRYPTO="nss"
    	    XMLSEC_CRYPTO_LIB="xmlsec1-nss"
	    XMLSEC_CRYPTO_CFLAGS="$NSS_CFLAGS -DXMLSEC_CRYPTO_NSS=1"
	    XMLSEC_CRYPTO_LIBS="$NSS_LIBS"
	    XMLSEC_CRYPTO_LDADDS="$NSS_LDADDS"
	fi	
	XMLSEC_CRYPTO_LIST="$XMLSEC_CRYPTO_LIST nss"
	AC_MSG_RESULT(yes ('$NSS_VERSION'))
    else
	XMLSEC_CRYPTO_DISABLED_LIST="$XMLSEC_CRYPTO_DISABLED_LIST nss"
	AC_MSG_RESULT(no)
    fi
fi
AC_SUBST(NSS_WITHOUT)
AC_SUBST(NSS_MIN_VERSION)
AC_SUBST(NSS_VERSION)
AC_SUBST(NSS_CONFIG)	
AC_SUBST(NSS_PREFIX)
AC_SUBST(NSS_CFLAGS)
AC_SUBST(NSS_LIBS)
AC_SUBST(NSS_LDADDS)
AC_SUBST(XMLSEC_NSS_DEFINES)

dnl ==========================================================================
dnl Do we have a crypto library?
dnl ==========================================================================
AC_MSG_CHECKING(for crypto library) 
if test "z$XMLSEC_CRYPTO" = "z"
then
    AC_MSG_ERROR(At least one crypto library should exist for $PACKAGE)
else
    AC_MSG_RESULT(yes ('$XMLSEC_CRYPTO'))
fi


dnl ==========================================================================
dnl See do we need SHA1 suport
dnl ==========================================================================
AC_MSG_CHECKING(for SHA1 support) 
AC_ARG_ENABLE(sha1,   [  --enable-sha1           enable SHA1 support (yes)])
if test "$enable_sha1" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_SHA1=1"
    XMLSEC_NO_SHA1="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_SHA1="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_SHA1)

dnl ==========================================================================
dnl See do we need RIPEMD-160 suport
dnl ==========================================================================
AC_MSG_CHECKING(for RIPEMD-160 support) 
AC_ARG_ENABLE(ripemd160,   [  --enable-ripemd160      enable RIPEMD-160 support (yes)])
if test "$enable_ripemd160" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_RIPEMD160=1"
    XMLSEC_NO_RIPEMD160="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_RIPEMD160="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_RIPEMD160)

dnl ==========================================================================
dnl See do we need HMAC suport
dnl ==========================================================================
AC_MSG_CHECKING(for HMAC support) 
AC_ARG_ENABLE(hmac,   [  --enable-hmac           enable HMAC support (yes)])
if test "$enable_hmac" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_HMAC=1"
    XMLSEC_NO_HMAC="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_HMAC="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_HMAC)

dnl ==========================================================================
dnl See do we need DSA suport
dnl ==========================================================================
AC_MSG_CHECKING(for DSA support) 
AC_ARG_ENABLE(dsa,   [  --enable-dsa            enable DSA support (yes)])
if test "$enable_dsa" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_DSA=1"
    XMLSEC_NO_DSA="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_DSA="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_DSA)

dnl ==========================================================================
dnl See do we need RSA suport
dnl ==========================================================================
AC_MSG_CHECKING(for RSA support) 
AC_ARG_ENABLE(rsa,   [  --enable-rsa            enable RSA support (yes)])
if test "$enable_rsa" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_RSA=1"
    XMLSEC_NO_RSA="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_RSA="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_RSA)

dnl ==========================================================================
dnl See do we need x509 suport
dnl ==========================================================================
AC_MSG_CHECKING(for x509 support) 
AC_ARG_ENABLE(x509,   [  --enable-x509           enable x509 support (yes)])
if test "$enable_x509" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_X509=1"
    XMLSEC_NO_X509="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_X509="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_X509)

dnl ==========================================================================
dnl See do we need DES suport
dnl ==========================================================================
AC_MSG_CHECKING(for DES support) 
AC_ARG_ENABLE(des,   [  --enable-des            enable DES support (yes)])
if test "$enable_des" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_DES=1"
    XMLSEC_NO_DES="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_DES="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_DES)

dnl ==========================================================================
dnl See do we need AES suport
dnl ==========================================================================
AC_MSG_CHECKING(for AES support) 
AC_ARG_ENABLE(aes,   [  --enable-aes            enable AES support (OpenSSL >= 0.9.7 is required)])
if test "$enable_aes" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_AES=1"
    XMLSEC_NO_AES="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_AES="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_AES)

dnl ==========================================================================
dnl See do we need XMLDSig suport
dnl ==========================================================================
AC_MSG_CHECKING(for XMLDSig support) 
AC_ARG_ENABLE(xmldsig,   [  --enable-xmldsig        enable XMLDSig support (yes)])
if test "$enable_xmldsig" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XMLDSIG=1"
    XMLSEC_NO_XMLDSIG="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_XMLDSIG="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_XMLDSIG)

dnl ==========================================================================
dnl See do we need XMLEnc suport
dnl ==========================================================================
AC_MSG_CHECKING(for XMLEnc support) 
AC_ARG_ENABLE(xmlenc,   [  --enable-xmlenc         enable XMLEnc support (yes)])
if test "$enable_xmlenc" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_XMLENC=1"
    XMLSEC_NO_XMLENC="1"
    AC_MSG_RESULT(no)
else
    XMLSEC_NO_XMLENC="0"
    AC_MSG_RESULT(yes)
fi    
AC_SUBST(XMLSEC_NO_XMLENC)

dnl ==========================================================================
dnl See do we need Simple Keys Manager 
dnl ==========================================================================
AC_MSG_CHECKING(for Simple Keys Manager testing) 
AC_ARG_ENABLE(skm,   [  --enable-skm            enable Simple Keys Manager testing(yes)])
if test "$enable_skm" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_SKM_TEST=1"
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi    

dnl ==========================================================================
dnl See do we need templates tests
dnl ==========================================================================
AC_MSG_CHECKING(for templates testing) 
AC_ARG_ENABLE(skm,   [  --enable-tmpl-tests           enable templates testing in xmlsec utility (yes)])
if test "$enable_tmpl_tests" = "no" ; then
    XMLSEC_DEFINES="$XMLSEC_DEFINES -DXMLSEC_NO_TMPL_TEST=1"
    AC_MSG_RESULT(no)
else
    AC_MSG_RESULT(yes)
fi    

dnl ==========================================================================
dnl Profiling 
dnl ==========================================================================
AC_MSG_CHECKING(for profiling) 
AC_ARG_ENABLE(profiling,   [  --enable-profiling       enable profiling compilation flags (no)])
if test "$enable_profiling" = "yes" ; then
    CFLAGS="$CFLAGS -pg"
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi    

dnl ==========================================================================
dnl Final steps: xmlsec config
dnl ==========================================================================
XMLSEC_CFLAGS="$XMLSEC_DEFINES -I${includedir}/xmlsec1 $LIBXML_CFLAGS $LIBXSLT_CFLAGS $XMLSEC_CRYPTO_CFLAGS -DXMLSEC_CRYPTO=\"@XMLSEC_CRYPTO@\""
XMLSEC_LIBS="-L${libdir} -l$XMLSEC_CRYPTO_LIB -lxmlsec1 $LIBXML_LIBS $LIBXSLT_LIBS $XMLSEC_CRYPTO_LIBS"

AC_SUBST(XMLSEC_CFLAGS)
AC_SUBST(XMLSEC_LIBS)

CFLAGS="$CFLAGS $XMLSEC_DEFINES"
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(XMLSEC_DEFINES)

AC_SUBST(XMLSEC_CRYPTO)
AC_SUBST(XMLSEC_CRYPTO_LIST)
AC_SUBST(XMLSEC_CRYPTO_DISABLED_LIST)
AC_SUBST(XMLSEC_CRYPTO_LIB)
AC_SUBST(XMLSEC_CRYPTO_CFLAGS)
AC_SUBST(XMLSEC_CRYPTO_LIBS)
AC_SUBST(XMLSEC_CRYPTO_LDADDS)

dnl ==========================================================================
dnl Which files to process
dnl ==========================================================================
rm -f rm COPYING.LIB COPYING
ln -s $srcdir/Copyright COPYING

AC_OUTPUT([
include/xmlsec/version.h
Makefile
include/Makefile
include/xmlsec/Makefile
include/xmlsec/openssl/Makefile
include/xmlsec/gnutls/Makefile
include/xmlsec/nss/Makefile
src/Makefile
src/openssl/Makefile
src/gnutls/Makefile
src/nss/Makefile
apps/Makefile
docs/Makefile
docs/api/Makefile
man/Makefile
]
[xmlsec1Conf.sh:xmlsecConf.sh.in]
[xmlsec1-config:xmlsec-config.in]
[xmlsec1.pc:xmlsec.pc.in]
[xmlsec1.spec:xmlsec.spec.in]
)

